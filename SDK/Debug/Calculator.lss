
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000468a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  0000468a  0000471e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008001ae  008001ae  0000486c  2**0
                  ALLOC
  3 .stab         00003c0c  00000000  00000000  0000486c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b16  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000a12e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  0000a323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000edba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <main>
      8a:	0c 94 43 23 	jmp	0x4686	; 0x4686 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e8 57       	subi	r30, 0x78	; 120
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <DIO_enumPortInit>:
#include "DIO_config.h"



ES_T DIO_enumPortInit (void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enumErrorState=ES_NOK;
     d9c:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	80 83       	st	Z, r24

	PORTA=CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	10 82       	st	Z, r1
	PORTB=CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     dc4:	e8 e3       	ldi	r30, 0x38	; 56
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 82       	st	Z, r1
	PORTC=CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     dca:	e5 e3       	ldi	r30, 0x35	; 53
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	10 82       	st	Z, r1
	PORTD=CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     dd0:	e2 e3       	ldi	r30, 0x32	; 50
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1

	Local_enumErrorState=ES_OK;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <DIO_enumSetPortDirection>:

ES_T DIO_enumSetPortDirection (u8 Copy_u8PortID,u8 Copy_u8Direction)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <DIO_enumSetPortDirection+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <DIO_enumSetPortDirection+0x8>
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
     df6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	a8 f5       	brcc	.+106    	; 0xe68 <DIO_enumSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3d 83       	std	Y+5, r19	; 0x05
     e06:	2c 83       	std	Y+4, r18	; 0x04
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	d1 f0       	breq	.+52     	; 0xe46 <DIO_enumSetPortDirection+0x62>
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	31 05       	cpc	r19, r1
     e1a:	2c f4       	brge	.+10     	; 0xe26 <DIO_enumSetPortDirection+0x42>
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	61 f0       	breq	.+24     	; 0xe3c <DIO_enumSetPortDirection+0x58>
     e24:	1e c0       	rjmp	.+60     	; 0xe62 <DIO_enumSetPortDirection+0x7e>
     e26:	2c 81       	ldd	r18, Y+4	; 0x04
     e28:	3d 81       	ldd	r19, Y+5	; 0x05
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	81 f0       	breq	.+32     	; 0xe50 <DIO_enumSetPortDirection+0x6c>
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	91 05       	cpc	r25, r1
     e38:	81 f0       	breq	.+32     	; 0xe5a <DIO_enumSetPortDirection+0x76>
     e3a:	13 c0       	rjmp	.+38     	; 0xe62 <DIO_enumSetPortDirection+0x7e>
		{
			case DIO_PORTA:
				DDRA=Copy_u8Direction;
     e3c:	ea e3       	ldi	r30, 0x3A	; 58
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	80 83       	st	Z, r24
     e44:	0e c0       	rjmp	.+28     	; 0xe62 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTB:
				DDRB=Copy_u8Direction;
     e46:	e7 e3       	ldi	r30, 0x37	; 55
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	80 83       	st	Z, r24
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTC:
				DDRC=Copy_u8Direction;
     e50:	e4 e3       	ldi	r30, 0x34	; 52
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	80 83       	st	Z, r24
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTD:
				DDRD=Copy_u8Direction;
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	80 83       	st	Z, r24
				break;
		}
		Local_enumErrorState=ES_OK;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enumSetPortDirection+0x88>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <DIO_enumSetPortValue>:
ES_T DIO_enumSetPortValue (u8 Copy_u8PortID,u8 Copy_u8Value)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_enumSetPortValue+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DIO_enumSetPortValue+0x8>
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
     e90:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	a8 f5       	brcc	.+106    	; 0xf02 <DIO_enumSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	d1 f0       	breq	.+52     	; 0xee0 <DIO_enumSetPortValue+0x62>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	2c f4       	brge	.+10     	; 0xec0 <DIO_enumSetPortValue+0x42>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	61 f0       	breq	.+24     	; 0xed6 <DIO_enumSetPortValue+0x58>
     ebe:	1e c0       	rjmp	.+60     	; 0xefc <DIO_enumSetPortValue+0x7e>
     ec0:	2c 81       	ldd	r18, Y+4	; 0x04
     ec2:	3d 81       	ldd	r19, Y+5	; 0x05
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	81 f0       	breq	.+32     	; 0xeea <DIO_enumSetPortValue+0x6c>
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	81 f0       	breq	.+32     	; 0xef4 <DIO_enumSetPortValue+0x76>
     ed4:	13 c0       	rjmp	.+38     	; 0xefc <DIO_enumSetPortValue+0x7e>
		{
			case DIO_PORTA:
				PORTA=Copy_u8Value;
     ed6:	eb e3       	ldi	r30, 0x3B	; 59
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	80 83       	st	Z, r24
     ede:	0e c0       	rjmp	.+28     	; 0xefc <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB=Copy_u8Value;
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	80 83       	st	Z, r24
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC=Copy_u8Value;
     eea:	e5 e3       	ldi	r30, 0x35	; 53
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	80 83       	st	Z, r24
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD=Copy_u8Value;
     ef4:	e2 e3       	ldi	r30, 0x32	; 50
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 83       	st	Z, r24
				break;
		}
		Local_enumErrorState=ES_OK;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_enumSetPortValue+0x88>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <DIO_enumTogglePortDirection>:
ES_T DIO_enumTogglePortDirection (u8 Copy_u8PortID)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_enumTogglePortDirection+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <DIO_enumTogglePortDirection+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <DIO_enumTogglePortDirection+0x18>
     f2e:	41 c0       	rjmp	.+130    	; 0xfb2 <DIO_enumTogglePortDirection+0x9a>
	{
		switch(Copy_u8PortID)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3c 83       	std	Y+4, r19	; 0x04
     f38:	2b 83       	std	Y+3, r18	; 0x03
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	e9 f0       	breq	.+58     	; 0xf7e <DIO_enumTogglePortDirection+0x66>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <DIO_enumTogglePortDirection+0x40>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <DIO_enumTogglePortDirection+0x56>
     f56:	2a c0       	rjmp	.+84     	; 0xfac <DIO_enumTogglePortDirection+0x94>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	b1 f0       	breq	.+44     	; 0xf8e <DIO_enumTogglePortDirection+0x76>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	c9 f0       	breq	.+50     	; 0xf9e <DIO_enumTogglePortDirection+0x86>
     f6c:	1f c0       	rjmp	.+62     	; 0xfac <DIO_enumTogglePortDirection+0x94>
		{
			case DIO_PORTA:
				DDRA=~DDRA;
     f6e:	aa e3       	ldi	r26, 0x3A	; 58
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e3       	ldi	r30, 0x3A	; 58
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 95       	com	r24
     f7a:	8c 93       	st	X, r24
     f7c:	17 c0       	rjmp	.+46     	; 0xfac <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTB:
				DDRB=~DDRB;
     f7e:	a7 e3       	ldi	r26, 0x37	; 55
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e7 e3       	ldi	r30, 0x37	; 55
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 95       	com	r24
     f8a:	8c 93       	st	X, r24
     f8c:	0f c0       	rjmp	.+30     	; 0xfac <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTC:
				DDRC=~DDRC;
     f8e:	a4 e3       	ldi	r26, 0x34	; 52
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e4 e3       	ldi	r30, 0x34	; 52
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 95       	com	r24
     f9a:	8c 93       	st	X, r24
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTD:
				DDRD=~DDRD;
     f9e:	a1 e3       	ldi	r26, 0x31	; 49
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e1 e3       	ldi	r30, 0x31	; 49
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 95       	com	r24
     faa:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_enumTogglePortDirection+0x9e>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <DIO_enumTogglePortValue>:
ES_T DIO_enumTogglePortValue (u8 Copy_u8PortID)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <DIO_enumTogglePortValue+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_enumTogglePortValue+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
     fd4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <DIO_enumTogglePortValue+0x18>
     fdc:	41 c0       	rjmp	.+130    	; 0x1060 <DIO_enumTogglePortValue+0x9a>
	{
		switch(Copy_u8PortID)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3c 83       	std	Y+4, r19	; 0x04
     fe6:	2b 83       	std	Y+3, r18	; 0x03
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	e9 f0       	breq	.+58     	; 0x102c <DIO_enumTogglePortValue+0x66>
     ff2:	2b 81       	ldd	r18, Y+3	; 0x03
     ff4:	3c 81       	ldd	r19, Y+4	; 0x04
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_enumTogglePortValue+0x40>
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	61 f0       	breq	.+24     	; 0x101c <DIO_enumTogglePortValue+0x56>
    1004:	2a c0       	rjmp	.+84     	; 0x105a <DIO_enumTogglePortValue+0x94>
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	3c 81       	ldd	r19, Y+4	; 0x04
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	b1 f0       	breq	.+44     	; 0x103c <DIO_enumTogglePortValue+0x76>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	c9 f0       	breq	.+50     	; 0x104c <DIO_enumTogglePortValue+0x86>
    101a:	1f c0       	rjmp	.+62     	; 0x105a <DIO_enumTogglePortValue+0x94>
		{
			case DIO_PORTA:
				PORTA=~PORTA;
    101c:	ab e3       	ldi	r26, 0x3B	; 59
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 95       	com	r24
    1028:	8c 93       	st	X, r24
    102a:	17 c0       	rjmp	.+46     	; 0x105a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTB:
				PORTB=~PORTB;
    102c:	a8 e3       	ldi	r26, 0x38	; 56
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e3       	ldi	r30, 0x38	; 56
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	80 95       	com	r24
    1038:	8c 93       	st	X, r24
    103a:	0f c0       	rjmp	.+30     	; 0x105a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTC:
				PORTC=~PORTC;
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 95       	com	r24
    1048:	8c 93       	st	X, r24
    104a:	07 c0       	rjmp	.+14     	; 0x105a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTD:
				PORTD=~PORTD;
    104c:	a2 e3       	ldi	r26, 0x32	; 50
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 95       	com	r24
    1058:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_enumTogglePortValue+0x9e>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <DIO_enumGetPortDirection>:
ES_T DIO_enumGetPortDirection (u8 Copy_u8PortID,u8 *Copy_pu8Direction)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <DIO_enumGetPortDirection+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_enumGetPortDirection+0x8>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_enumGetPortDirection+0xa>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	8a 83       	std	Y+2, r24	; 0x02
    1084:	7c 83       	std	Y+4, r23	; 0x04
    1086:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
    1088:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	08 f0       	brcs	.+2      	; 0x1092 <DIO_enumGetPortDirection+0x1e>
    1090:	44 c0       	rjmp	.+136    	; 0x111a <DIO_enumGetPortDirection+0xa6>
	{
		if (Copy_pu8Direction!=NULL)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	e9 f1       	breq	.+122    	; 0x1114 <DIO_enumGetPortDirection+0xa0>
		{
			switch(Copy_u8PortID)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3e 83       	std	Y+6, r19	; 0x06
    10a2:	2d 83       	std	Y+5, r18	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	e1 f0       	breq	.+56     	; 0x10e6 <DIO_enumGetPortDirection+0x72>
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <DIO_enumGetPortDirection+0x4e>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 f0       	breq	.+24     	; 0x10d8 <DIO_enumGetPortDirection+0x64>
    10c0:	26 c0       	rjmp	.+76     	; 0x110e <DIO_enumGetPortDirection+0x9a>
    10c2:	2d 81       	ldd	r18, Y+5	; 0x05
    10c4:	3e 81       	ldd	r19, Y+6	; 0x06
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	a1 f0       	breq	.+40     	; 0x10f4 <DIO_enumGetPortDirection+0x80>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <DIO_enumGetPortDirection+0x8e>
    10d6:	1b c0       	rjmp	.+54     	; 0x110e <DIO_enumGetPortDirection+0x9a>
			{
				case DIO_PORTA:
					*Copy_pu8Direction=DDRA;
    10d8:	ea e3       	ldi	r30, 0x3A	; 58
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	eb 81       	ldd	r30, Y+3	; 0x03
    10e0:	fc 81       	ldd	r31, Y+4	; 0x04
    10e2:	80 83       	st	Z, r24
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTB:
					*Copy_pu8Direction=DDRB;
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	eb 81       	ldd	r30, Y+3	; 0x03
    10ee:	fc 81       	ldd	r31, Y+4	; 0x04
    10f0:	80 83       	st	Z, r24
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTC:
					*Copy_pu8Direction=DDRC;
    10f4:	e4 e3       	ldi	r30, 0x34	; 52
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	eb 81       	ldd	r30, Y+3	; 0x03
    10fc:	fc 81       	ldd	r31, Y+4	; 0x04
    10fe:	80 83       	st	Z, r24
    1100:	06 c0       	rjmp	.+12     	; 0x110e <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTD:
					*Copy_pu8Direction=DDRD;
    1102:	e1 e3       	ldi	r30, 0x31	; 49
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	eb 81       	ldd	r30, Y+3	; 0x03
    110a:	fc 81       	ldd	r31, Y+4	; 0x04
    110c:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	05 c0       	rjmp	.+10     	; 0x111e <DIO_enumGetPortDirection+0xaa>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_enumGetPortDirection+0xaa>
		}

	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1120:	26 96       	adiw	r28, 0x06	; 6
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DIO_enumGetPortValue>:
ES_T DIO_enumGetPortValue (u8 Copy_u8PortID,u8 *Copy_pu8Value)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_enumGetPortValue+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_enumGetPortValue+0x8>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_enumGetPortValue+0xa>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	7c 83       	std	Y+4, r23	; 0x04
    1144:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
    1146:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	08 f0       	brcs	.+2      	; 0x1150 <DIO_enumGetPortValue+0x1e>
    114e:	44 c0       	rjmp	.+136    	; 0x11d8 <DIO_enumGetPortValue+0xa6>
	{
		if (Copy_pu8Value!=NULL)
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	e9 f1       	breq	.+122    	; 0x11d2 <DIO_enumGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3e 83       	std	Y+6, r19	; 0x06
    1160:	2d 83       	std	Y+5, r18	; 0x05
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	e1 f0       	breq	.+56     	; 0x11a4 <DIO_enumGetPortValue+0x72>
    116c:	2d 81       	ldd	r18, Y+5	; 0x05
    116e:	3e 81       	ldd	r19, Y+6	; 0x06
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <DIO_enumGetPortValue+0x4e>
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	61 f0       	breq	.+24     	; 0x1196 <DIO_enumGetPortValue+0x64>
    117e:	26 c0       	rjmp	.+76     	; 0x11cc <DIO_enumGetPortValue+0x9a>
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	a1 f0       	breq	.+40     	; 0x11b2 <DIO_enumGetPortValue+0x80>
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	b1 f0       	breq	.+44     	; 0x11c0 <DIO_enumGetPortValue+0x8e>
    1194:	1b c0       	rjmp	.+54     	; 0x11cc <DIO_enumGetPortValue+0x9a>
			{
				case DIO_PORTA:
					*Copy_pu8Value=PINA;
    1196:	e9 e3       	ldi	r30, 0x39	; 57
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	80 83       	st	Z, r24
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_pu8Value=PINB;
    11a4:	e6 e3       	ldi	r30, 0x36	; 54
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	80 83       	st	Z, r24
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_pu8Value=PINC;
    11b2:	e3 e3       	ldi	r30, 0x33	; 51
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ba:	fc 81       	ldd	r31, Y+4	; 0x04
    11bc:	80 83       	st	Z, r24
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_pu8Value=PIND;
    11c0:	e0 e3       	ldi	r30, 0x30	; 48
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <DIO_enumGetPortValue+0xaa>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_enumGetPortValue+0xaa>
		}

	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_enumSetPinDirection>:

ES_T DIO_enumSetPinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Direction)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_enumSetPinDirection+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_enumSetPinDirection+0x8>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_enumSetPinDirection+0xa>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	6b 83       	std	Y+3, r22	; 0x03
    1202:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
    1204:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Direction <= OUTPUT)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	08 f0       	brcs	.+2      	; 0x120e <DIO_enumSetPinDirection+0x1e>
    120c:	d1 c0       	rjmp	.+418    	; 0x13b0 <DIO_enumSetPinDirection+0x1c0>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	08 f0       	brcs	.+2      	; 0x1216 <DIO_enumSetPinDirection+0x26>
    1214:	cd c0       	rjmp	.+410    	; 0x13b0 <DIO_enumSetPinDirection+0x1c0>
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	08 f0       	brcs	.+2      	; 0x121e <DIO_enumSetPinDirection+0x2e>
    121c:	c9 c0       	rjmp	.+402    	; 0x13b0 <DIO_enumSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3e 83       	std	Y+6, r19	; 0x06
    1226:	2d 83       	std	Y+5, r18	; 0x05
    1228:	6d 81       	ldd	r22, Y+5	; 0x05
    122a:	7e 81       	ldd	r23, Y+6	; 0x06
    122c:	61 30       	cpi	r22, 0x01	; 1
    122e:	71 05       	cpc	r23, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_enumSetPinDirection+0x44>
    1232:	41 c0       	rjmp	.+130    	; 0x12b6 <DIO_enumSetPinDirection+0xc6>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	91 05       	cpc	r25, r1
    123c:	34 f4       	brge	.+12     	; 0x124a <DIO_enumSetPinDirection+0x5a>
    123e:	2d 81       	ldd	r18, Y+5	; 0x05
    1240:	3e 81       	ldd	r19, Y+6	; 0x06
    1242:	21 15       	cp	r18, r1
    1244:	31 05       	cpc	r19, r1
    1246:	71 f0       	breq	.+28     	; 0x1264 <DIO_enumSetPinDirection+0x74>
    1248:	b0 c0       	rjmp	.+352    	; 0x13aa <DIO_enumSetPinDirection+0x1ba>
    124a:	6d 81       	ldd	r22, Y+5	; 0x05
    124c:	7e 81       	ldd	r23, Y+6	; 0x06
    124e:	62 30       	cpi	r22, 0x02	; 2
    1250:	71 05       	cpc	r23, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <DIO_enumSetPinDirection+0x66>
    1254:	59 c0       	rjmp	.+178    	; 0x1308 <DIO_enumSetPinDirection+0x118>
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <DIO_enumSetPinDirection+0x72>
    1260:	7c c0       	rjmp	.+248    	; 0x135a <DIO_enumSetPinDirection+0x16a>
    1262:	a3 c0       	rjmp	.+326    	; 0x13aa <DIO_enumSetPinDirection+0x1ba>
		{
			case DIO_PORTA:
				CLEAR_BIT(DDRA,Copy_u8PinID);
    1264:	aa e3       	ldi	r26, 0x3A	; 58
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_enumSetPinDirection+0x90>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	2a 95       	dec	r18
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_enumSetPinDirection+0x8c>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Direction << Copy_u8PinID);
    128a:	aa e3       	ldi	r26, 0x3A	; 58
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	b9 01       	movw	r22, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_enumSetPinDirection+0xba>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	8a 95       	dec	r24
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_enumSetPinDirection+0xb6>
    12ae:	cb 01       	movw	r24, r22
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	7a c0       	rjmp	.+244    	; 0x13aa <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB,Copy_u8PinID);
    12b6:	a7 e3       	ldi	r26, 0x37	; 55
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_enumSetPinDirection+0xe2>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	2a 95       	dec	r18
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_enumSetPinDirection+0xde>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Direction << Copy_u8PinID);
    12dc:	a7 e3       	ldi	r26, 0x37	; 55
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e3       	ldi	r30, 0x37	; 55
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	b9 01       	movw	r22, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_enumSetPinDirection+0x10c>
    12f8:	66 0f       	add	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_enumSetPinDirection+0x108>
    1300:	cb 01       	movw	r24, r22
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	51 c0       	rjmp	.+162    	; 0x13aa <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC,Copy_u8PinID);
    1308:	a4 e3       	ldi	r26, 0x34	; 52
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e4 e3       	ldi	r30, 0x34	; 52
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_enumSetPinDirection+0x134>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	2a 95       	dec	r18
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_enumSetPinDirection+0x130>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Direction << Copy_u8PinID);
    132e:	a4 e3       	ldi	r26, 0x34	; 52
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e4 e3       	ldi	r30, 0x34	; 52
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	b9 01       	movw	r22, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_enumSetPinDirection+0x15e>
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_enumSetPinDirection+0x15a>
    1352:	cb 01       	movw	r24, r22
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	28 c0       	rjmp	.+80     	; 0x13aa <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD,Copy_u8PinID);
    135a:	a1 e3       	ldi	r26, 0x31	; 49
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e1 e3       	ldi	r30, 0x31	; 49
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_enumSetPinDirection+0x186>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	2a 95       	dec	r18
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_enumSetPinDirection+0x182>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Direction << Copy_u8PinID);
    1380:	a1 e3       	ldi	r26, 0x31	; 49
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	b9 01       	movw	r22, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_enumSetPinDirection+0x1b0>
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_enumSetPinDirection+0x1ac>
    13a4:	cb 01       	movw	r24, r22
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_enumSetPinDirection+0x1c4>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	26 96       	adiw	r28, 0x06	; 6
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <DIO_enumSetPinValue>:
ES_T DIO_enumSetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Value)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DIO_enumSetPinValue+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <DIO_enumSetPinValue+0x8>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <DIO_enumSetPinValue+0xa>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	6b 83       	std	Y+3, r22	; 0x03
    13da:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
    13dc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7&&Copy_u8Value<=OUTPUT)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <DIO_enumSetPinValue+0x1e>
    13e4:	d1 c0       	rjmp	.+418    	; 0x1588 <DIO_enumSetPinValue+0x1c0>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 30       	cpi	r24, 0x08	; 8
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_enumSetPinValue+0x26>
    13ec:	cd c0       	rjmp	.+410    	; 0x1588 <DIO_enumSetPinValue+0x1c0>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <DIO_enumSetPinValue+0x2e>
    13f4:	c9 c0       	rjmp	.+402    	; 0x1588 <DIO_enumSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3e 83       	std	Y+6, r19	; 0x06
    13fe:	2d 83       	std	Y+5, r18	; 0x05
    1400:	6d 81       	ldd	r22, Y+5	; 0x05
    1402:	7e 81       	ldd	r23, Y+6	; 0x06
    1404:	61 30       	cpi	r22, 0x01	; 1
    1406:	71 05       	cpc	r23, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_enumSetPinValue+0x44>
    140a:	41 c0       	rjmp	.+130    	; 0x148e <DIO_enumSetPinValue+0xc6>
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	91 05       	cpc	r25, r1
    1414:	34 f4       	brge	.+12     	; 0x1422 <DIO_enumSetPinValue+0x5a>
    1416:	2d 81       	ldd	r18, Y+5	; 0x05
    1418:	3e 81       	ldd	r19, Y+6	; 0x06
    141a:	21 15       	cp	r18, r1
    141c:	31 05       	cpc	r19, r1
    141e:	71 f0       	breq	.+28     	; 0x143c <DIO_enumSetPinValue+0x74>
    1420:	b0 c0       	rjmp	.+352    	; 0x1582 <DIO_enumSetPinValue+0x1ba>
    1422:	6d 81       	ldd	r22, Y+5	; 0x05
    1424:	7e 81       	ldd	r23, Y+6	; 0x06
    1426:	62 30       	cpi	r22, 0x02	; 2
    1428:	71 05       	cpc	r23, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_enumSetPinValue+0x66>
    142c:	59 c0       	rjmp	.+178    	; 0x14e0 <DIO_enumSetPinValue+0x118>
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_enumSetPinValue+0x72>
    1438:	7c c0       	rjmp	.+248    	; 0x1532 <DIO_enumSetPinValue+0x16a>
    143a:	a3 c0       	rjmp	.+326    	; 0x1582 <DIO_enumSetPinValue+0x1ba>
		{
			case DIO_PORTA:
				CLEAR_BIT(PORTA,Copy_u8PinID);
    143c:	ab e3       	ldi	r26, 0x3B	; 59
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	eb e3       	ldi	r30, 0x3B	; 59
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_enumSetPinValue+0x90>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	2a 95       	dec	r18
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_enumSetPinValue+0x8c>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
    1462:	ab e3       	ldi	r26, 0x3B	; 59
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	eb e3       	ldi	r30, 0x3B	; 59
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	b9 01       	movw	r22, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_enumSetPinValue+0xba>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_enumSetPinValue+0xb6>
    1486:	cb 01       	movw	r24, r22
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	7a c0       	rjmp	.+244    	; 0x1582 <DIO_enumSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB,Copy_u8PinID);
    148e:	a8 e3       	ldi	r26, 0x38	; 56
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e3       	ldi	r30, 0x38	; 56
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_enumSetPinValue+0xe2>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	2a 95       	dec	r18
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_enumSetPinValue+0xde>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
    14b4:	a8 e3       	ldi	r26, 0x38	; 56
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	b9 01       	movw	r22, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_enumSetPinValue+0x10c>
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_enumSetPinValue+0x108>
    14d8:	cb 01       	movw	r24, r22
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	51 c0       	rjmp	.+162    	; 0x1582 <DIO_enumSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC,Copy_u8PinID);
    14e0:	a5 e3       	ldi	r26, 0x35	; 53
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_enumSetPinValue+0x134>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	2a 95       	dec	r18
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_enumSetPinValue+0x130>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
    1506:	a5 e3       	ldi	r26, 0x35	; 53
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e3       	ldi	r30, 0x35	; 53
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	b9 01       	movw	r22, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_enumSetPinValue+0x15e>
    1522:	66 0f       	add	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_enumSetPinValue+0x15a>
    152a:	cb 01       	movw	r24, r22
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	28 c0       	rjmp	.+80     	; 0x1582 <DIO_enumSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD,Copy_u8PinID);
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_enumSetPinValue+0x186>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	2a 95       	dec	r18
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_enumSetPinValue+0x182>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
    1558:	a2 e3       	ldi	r26, 0x32	; 50
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_enumSetPinValue+0x1b0>
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_enumSetPinValue+0x1ac>
    157c:	cb 01       	movw	r24, r22
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_enumSetPinValue+0x1c4>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
}
    158e:	26 96       	adiw	r28, 0x06	; 6
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_enumTogglePinDirection>:
ES_T DIO_enumTogglePinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_enumTogglePinDirection+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_enumTogglePinDirection+0x8>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
    15b2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <DIO_enumTogglePinDirection+0x1c>
    15ba:	75 c0       	rjmp	.+234    	; 0x16a6 <DIO_enumTogglePinDirection+0x106>
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <DIO_enumTogglePinDirection+0x24>
    15c2:	71 c0       	rjmp	.+226    	; 0x16a6 <DIO_enumTogglePinDirection+0x106>
	{
		switch(Copy_u8PortID)
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3d 83       	std	Y+5, r19	; 0x05
    15cc:	2c 83       	std	Y+4, r18	; 0x04
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	49 f1       	breq	.+82     	; 0x162a <DIO_enumTogglePinDirection+0x8a>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <DIO_enumTogglePinDirection+0x4c>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <DIO_enumTogglePinDirection+0x62>
    15ea:	5a c0       	rjmp	.+180    	; 0x16a0 <DIO_enumTogglePinDirection+0x100>
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	71 f1       	breq	.+92     	; 0x1652 <DIO_enumTogglePinDirection+0xb2>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	e9 f1       	breq	.+122    	; 0x167a <DIO_enumTogglePinDirection+0xda>
    1600:	4f c0       	rjmp	.+158    	; 0x16a0 <DIO_enumTogglePinDirection+0x100>
		{
			case DIO_PORTA:
				TOGGLE_BIT(DDRA,Copy_u8PinID);
    1602:	aa e3       	ldi	r26, 0x3A	; 58
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ea e3       	ldi	r30, 0x3A	; 58
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_enumTogglePinDirection+0x80>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_enumTogglePinDirection+0x7c>
    1624:	84 27       	eor	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	3b c0       	rjmp	.+118    	; 0x16a0 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTB:
				TOGGLE_BIT(DDRB,Copy_u8PinID);
    162a:	a7 e3       	ldi	r26, 0x37	; 55
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e7 e3       	ldi	r30, 0x37	; 55
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_enumTogglePinDirection+0xa8>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_enumTogglePinDirection+0xa4>
    164c:	84 27       	eor	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	27 c0       	rjmp	.+78     	; 0x16a0 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTC:
				TOGGLE_BIT(DDRC,Copy_u8PinID);
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_enumTogglePinDirection+0xd0>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_enumTogglePinDirection+0xcc>
    1674:	84 27       	eor	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTD:
				TOGGLE_BIT(DDRD,Copy_u8PinID);
    167a:	a1 e3       	ldi	r26, 0x31	; 49
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e1 e3       	ldi	r30, 0x31	; 49
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_enumTogglePinDirection+0xf8>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_enumTogglePinDirection+0xf4>
    169c:	84 27       	eor	r24, r20
    169e:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_enumTogglePinDirection+0x10a>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <DIO_enumTogglePinValue>:
ES_T DIO_enumTogglePinValue (u8 Copy_u8PortID,u8 Copy_u8PinID)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_enumTogglePinValue+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <DIO_enumTogglePinValue+0x8>
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
    16ce:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <DIO_enumTogglePinValue+0x1c>
    16d6:	75 c0       	rjmp	.+234    	; 0x17c2 <DIO_enumTogglePinValue+0x106>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <DIO_enumTogglePinValue+0x24>
    16de:	71 c0       	rjmp	.+226    	; 0x17c2 <DIO_enumTogglePinValue+0x106>
	{
		switch(Copy_u8PortID)
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3d 83       	std	Y+5, r19	; 0x05
    16e8:	2c 83       	std	Y+4, r18	; 0x04
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	91 05       	cpc	r25, r1
    16f2:	49 f1       	breq	.+82     	; 0x1746 <DIO_enumTogglePinValue+0x8a>
    16f4:	2c 81       	ldd	r18, Y+4	; 0x04
    16f6:	3d 81       	ldd	r19, Y+5	; 0x05
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	2c f4       	brge	.+10     	; 0x1708 <DIO_enumTogglePinValue+0x4c>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	61 f0       	breq	.+24     	; 0x171e <DIO_enumTogglePinValue+0x62>
    1706:	5a c0       	rjmp	.+180    	; 0x17bc <DIO_enumTogglePinValue+0x100>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	71 f1       	breq	.+92     	; 0x176e <DIO_enumTogglePinValue+0xb2>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	91 05       	cpc	r25, r1
    171a:	e9 f1       	breq	.+122    	; 0x1796 <DIO_enumTogglePinValue+0xda>
    171c:	4f c0       	rjmp	.+158    	; 0x17bc <DIO_enumTogglePinValue+0x100>
		{
			case DIO_PORTA:
				TOGGLE_BIT(PORTA,Copy_u8PinID);
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_enumTogglePinValue+0x80>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_enumTogglePinValue+0x7c>
    1740:	84 27       	eor	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	3b c0       	rjmp	.+118    	; 0x17bc <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTB:
				TOGGLE_BIT(PORTB,Copy_u8PinID);
    1746:	a8 e3       	ldi	r26, 0x38	; 56
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e8 e3       	ldi	r30, 0x38	; 56
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_enumTogglePinValue+0xa8>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_enumTogglePinValue+0xa4>
    1768:	84 27       	eor	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	27 c0       	rjmp	.+78     	; 0x17bc <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTC:
				TOGGLE_BIT(PORTC,Copy_u8PinID);
    176e:	a5 e3       	ldi	r26, 0x35	; 53
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e3       	ldi	r30, 0x35	; 53
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_enumTogglePinValue+0xd0>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_enumTogglePinValue+0xcc>
    1790:	84 27       	eor	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTD:
				TOGGLE_BIT(PORTD,Copy_u8PinID);
    1796:	a2 e3       	ldi	r26, 0x32	; 50
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e2 e3       	ldi	r30, 0x32	; 50
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_enumTogglePinValue+0xf8>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_enumTogglePinValue+0xf4>
    17b8:	84 27       	eor	r24, r20
    17ba:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_enumTogglePinValue+0x10a>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <DIO_enumGetPinDirection>:
ES_T DIO_enumGetPinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 *Copy_pu8Direction)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	27 97       	sbiw	r28, 0x07	; 7
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	6b 83       	std	Y+3, r22	; 0x03
    17f0:	5d 83       	std	Y+5, r21	; 0x05
    17f2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
    17f4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	84 30       	cpi	r24, 0x04	; 4
    17fa:	08 f0       	brcs	.+2      	; 0x17fe <DIO_enumGetPinDirection+0x26>
    17fc:	7f c0       	rjmp	.+254    	; 0x18fc <DIO_enumGetPinDirection+0x124>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	08 f0       	brcs	.+2      	; 0x1806 <DIO_enumGetPinDirection+0x2e>
    1804:	7b c0       	rjmp	.+246    	; 0x18fc <DIO_enumGetPinDirection+0x124>
		{
			if (Copy_pu8Direction!=NULL)
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	09 f4       	brne	.+2      	; 0x1810 <DIO_enumGetPinDirection+0x38>
    180e:	73 c0       	rjmp	.+230    	; 0x18f6 <DIO_enumGetPinDirection+0x11e>
			{
				switch(Copy_u8PortID)
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3f 83       	std	Y+7, r19	; 0x07
    1818:	2e 83       	std	Y+6, r18	; 0x06
    181a:	4e 81       	ldd	r20, Y+6	; 0x06
    181c:	5f 81       	ldd	r21, Y+7	; 0x07
    181e:	41 30       	cpi	r20, 0x01	; 1
    1820:	51 05       	cpc	r21, r1
    1822:	59 f1       	breq	.+86     	; 0x187a <DIO_enumGetPinDirection+0xa2>
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	34 f4       	brge	.+12     	; 0x183a <DIO_enumGetPinDirection+0x62>
    182e:	2e 81       	ldd	r18, Y+6	; 0x06
    1830:	3f 81       	ldd	r19, Y+7	; 0x07
    1832:	21 15       	cp	r18, r1
    1834:	31 05       	cpc	r19, r1
    1836:	69 f0       	breq	.+26     	; 0x1852 <DIO_enumGetPinDirection+0x7a>
    1838:	5b c0       	rjmp	.+182    	; 0x18f0 <DIO_enumGetPinDirection+0x118>
    183a:	4e 81       	ldd	r20, Y+6	; 0x06
    183c:	5f 81       	ldd	r21, Y+7	; 0x07
    183e:	42 30       	cpi	r20, 0x02	; 2
    1840:	51 05       	cpc	r21, r1
    1842:	79 f1       	breq	.+94     	; 0x18a2 <DIO_enumGetPinDirection+0xca>
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <DIO_enumGetPinDirection+0x78>
    184e:	3d c0       	rjmp	.+122    	; 0x18ca <DIO_enumGetPinDirection+0xf2>
    1850:	4f c0       	rjmp	.+158    	; 0x18f0 <DIO_enumGetPinDirection+0x118>
				{
					case DIO_PORTA:
						*Copy_pu8Direction=READ_BIT(DDRA,Copy_u8PinID);
    1852:	ea e3       	ldi	r30, 0x3A	; 58
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_enumGetPinDirection+0x92>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_enumGetPinDirection+0x8e>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	ec 81       	ldd	r30, Y+4	; 0x04
    1874:	fd 81       	ldd	r31, Y+5	; 0x05
    1876:	80 83       	st	Z, r24
    1878:	3b c0       	rjmp	.+118    	; 0x18f0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTB:
						*Copy_pu8Direction=READ_BIT(DDRB,Copy_u8PinID);
    187a:	e7 e3       	ldi	r30, 0x37	; 55
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a9 01       	movw	r20, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_enumGetPinDirection+0xba>
    188e:	55 95       	asr	r21
    1890:	47 95       	ror	r20
    1892:	8a 95       	dec	r24
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_enumGetPinDirection+0xb6>
    1896:	ca 01       	movw	r24, r20
    1898:	81 70       	andi	r24, 0x01	; 1
    189a:	ec 81       	ldd	r30, Y+4	; 0x04
    189c:	fd 81       	ldd	r31, Y+5	; 0x05
    189e:	80 83       	st	Z, r24
    18a0:	27 c0       	rjmp	.+78     	; 0x18f0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTC:
						*Copy_pu8Direction=READ_BIT(DDRC,Copy_u8PinID);
    18a2:	e4 e3       	ldi	r30, 0x34	; 52
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_enumGetPinDirection+0xe2>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_enumGetPinDirection+0xde>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	ec 81       	ldd	r30, Y+4	; 0x04
    18c4:	fd 81       	ldd	r31, Y+5	; 0x05
    18c6:	80 83       	st	Z, r24
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTD:
						*Copy_pu8Direction=READ_BIT(DDRD,Copy_u8PinID);
    18ca:	e1 e3       	ldi	r30, 0x31	; 49
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a9 01       	movw	r20, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_enumGetPinDirection+0x10a>
    18de:	55 95       	asr	r21
    18e0:	47 95       	ror	r20
    18e2:	8a 95       	dec	r24
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_enumGetPinDirection+0x106>
    18e6:	ca 01       	movw	r24, r20
    18e8:	81 70       	andi	r24, 0x01	; 1
    18ea:	ec 81       	ldd	r30, Y+4	; 0x04
    18ec:	fd 81       	ldd	r31, Y+5	; 0x05
    18ee:	80 83       	st	Z, r24
						break;
				}
				Local_enumErrorState=ES_OK;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <DIO_enumGetPinDirection+0x128>
			}
			else
			{
				Local_enumErrorState=ES_NULL_POINTER;
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_enumGetPinDirection+0x128>
			}
		}
		else
		{
			Local_enumErrorState=ES_OUT_OF_RANGE;
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enumErrorState;
    1900:	89 81       	ldd	r24, Y+1	; 0x01
}
    1902:	27 96       	adiw	r28, 0x07	; 7
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <DIO_enumGetPinValue>:
ES_T DIO_enumGetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 *Copy_pu8Value)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	27 97       	sbiw	r28, 0x07	; 7
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	8a 83       	std	Y+2, r24	; 0x02
    192a:	6b 83       	std	Y+3, r22	; 0x03
    192c:	5d 83       	std	Y+5, r21	; 0x05
    192e:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
    1930:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	08 f0       	brcs	.+2      	; 0x193a <DIO_enumGetPinValue+0x26>
    1938:	7f c0       	rjmp	.+254    	; 0x1a38 <DIO_enumGetPinValue+0x124>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	88 30       	cpi	r24, 0x08	; 8
    193e:	08 f0       	brcs	.+2      	; 0x1942 <DIO_enumGetPinValue+0x2e>
    1940:	7b c0       	rjmp	.+246    	; 0x1a38 <DIO_enumGetPinValue+0x124>
	{
		if (Copy_pu8Value!=NULL)
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	09 f4       	brne	.+2      	; 0x194c <DIO_enumGetPinValue+0x38>
    194a:	73 c0       	rjmp	.+230    	; 0x1a32 <DIO_enumGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3f 83       	std	Y+7, r19	; 0x07
    1954:	2e 83       	std	Y+6, r18	; 0x06
    1956:	4e 81       	ldd	r20, Y+6	; 0x06
    1958:	5f 81       	ldd	r21, Y+7	; 0x07
    195a:	41 30       	cpi	r20, 0x01	; 1
    195c:	51 05       	cpc	r21, r1
    195e:	59 f1       	breq	.+86     	; 0x19b6 <DIO_enumGetPinValue+0xa2>
    1960:	8e 81       	ldd	r24, Y+6	; 0x06
    1962:	9f 81       	ldd	r25, Y+7	; 0x07
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	91 05       	cpc	r25, r1
    1968:	34 f4       	brge	.+12     	; 0x1976 <DIO_enumGetPinValue+0x62>
    196a:	2e 81       	ldd	r18, Y+6	; 0x06
    196c:	3f 81       	ldd	r19, Y+7	; 0x07
    196e:	21 15       	cp	r18, r1
    1970:	31 05       	cpc	r19, r1
    1972:	69 f0       	breq	.+26     	; 0x198e <DIO_enumGetPinValue+0x7a>
    1974:	5b c0       	rjmp	.+182    	; 0x1a2c <DIO_enumGetPinValue+0x118>
    1976:	4e 81       	ldd	r20, Y+6	; 0x06
    1978:	5f 81       	ldd	r21, Y+7	; 0x07
    197a:	42 30       	cpi	r20, 0x02	; 2
    197c:	51 05       	cpc	r21, r1
    197e:	79 f1       	breq	.+94     	; 0x19de <DIO_enumGetPinValue+0xca>
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	91 05       	cpc	r25, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <DIO_enumGetPinValue+0x78>
    198a:	3d c0       	rjmp	.+122    	; 0x1a06 <DIO_enumGetPinValue+0xf2>
    198c:	4f c0       	rjmp	.+158    	; 0x1a2c <DIO_enumGetPinValue+0x118>
			{
				case DIO_PORTA:
					*Copy_pu8Value=READ_BIT(PINA,Copy_u8PinID);
    198e:	e9 e3       	ldi	r30, 0x39	; 57
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a9 01       	movw	r20, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_enumGetPinValue+0x92>
    19a2:	55 95       	asr	r21
    19a4:	47 95       	ror	r20
    19a6:	8a 95       	dec	r24
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_enumGetPinValue+0x8e>
    19aa:	ca 01       	movw	r24, r20
    19ac:	81 70       	andi	r24, 0x01	; 1
    19ae:	ec 81       	ldd	r30, Y+4	; 0x04
    19b0:	fd 81       	ldd	r31, Y+5	; 0x05
    19b2:	80 83       	st	Z, r24
    19b4:	3b c0       	rjmp	.+118    	; 0x1a2c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_pu8Value=READ_BIT(PINB,Copy_u8PinID);
    19b6:	e6 e3       	ldi	r30, 0x36	; 54
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_enumGetPinValue+0xba>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_enumGetPinValue+0xb6>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	ec 81       	ldd	r30, Y+4	; 0x04
    19d8:	fd 81       	ldd	r31, Y+5	; 0x05
    19da:	80 83       	st	Z, r24
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_pu8Value=READ_BIT(PINC,Copy_u8PinID);
    19de:	e3 e3       	ldi	r30, 0x33	; 51
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_enumGetPinValue+0xe2>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_enumGetPinValue+0xde>
    19fa:	ca 01       	movw	r24, r20
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1a00:	fd 81       	ldd	r31, Y+5	; 0x05
    1a02:	80 83       	st	Z, r24
    1a04:	13 c0       	rjmp	.+38     	; 0x1a2c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_pu8Value=READ_BIT(PIND,Copy_u8PinID);
    1a06:	e0 e3       	ldi	r30, 0x30	; 48
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_enumGetPinValue+0x10a>
    1a1a:	55 95       	asr	r21
    1a1c:	47 95       	ror	r20
    1a1e:	8a 95       	dec	r24
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_enumGetPinValue+0x106>
    1a22:	ca 01       	movw	r24, r20
    1a24:	81 70       	andi	r24, 0x01	; 1
    1a26:	ec 81       	ldd	r30, Y+4	; 0x04
    1a28:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2a:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <DIO_enumGetPinValue+0x128>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_enumGetPinValue+0x128>
		}
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3e:	27 96       	adiw	r28, 0x07	; 7
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <createlist>:
	int size;
	listentry entry[MAXLIST];
};

void createlist (plist *ppl)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <createlist+0x6>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	*ppl=(struct list *)malloc(sizeof(struct list));
    1a5e:	8a e2       	ldi	r24, 0x2A	; 42
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 77 1f 	call	0x3eee	; 0x3eee <malloc>
    1a66:	e9 81       	ldd	r30, Y+1	; 0x01
    1a68:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
	(*ppl)->size=0;
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	01 90       	ld	r0, Z+
    1a74:	f0 81       	ld	r31, Z
    1a76:	e0 2d       	mov	r30, r0
    1a78:	11 82       	std	Z+1, r1	; 0x01
    1a7a:	10 82       	st	Z, r1
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <insertlist>:
void insertlist (int p,listentry e,plist pl)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	4d 83       	std	Y+5, r20	; 0x05
    1aa0:	5e 83       	std	Y+6, r21	; 0x06
    1aa2:	6f 83       	std	Y+7, r22	; 0x07
    1aa4:	78 87       	std	Y+8, r23	; 0x08
    1aa6:	3a 87       	std	Y+10, r19	; 0x0a
    1aa8:	29 87       	std	Y+9, r18	; 0x09
	int i;
	for (i=pl->size-1;i>=p;i--)
    1aaa:	e9 85       	ldd	r30, Y+9	; 0x09
    1aac:	fa 85       	ldd	r31, Y+10	; 0x0a
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	28 c0       	rjmp	.+80     	; 0x1b0a <insertlist+0x84>
	{
		pl->entry[i+1]=pl->entry[i];
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	dc 01       	movw	r26, r24
    1ac0:	11 96       	adiw	r26, 0x01	; 1
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	29 85       	ldd	r18, Y+9	; 0x09
    1ac8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	e8 0f       	add	r30, r24
    1ad8:	f9 1f       	adc	r31, r25
    1ada:	20 81       	ld	r18, Z
    1adc:	31 81       	ldd	r19, Z+1	; 0x01
    1ade:	42 81       	ldd	r20, Z+2	; 0x02
    1ae0:	53 81       	ldd	r21, Z+3	; 0x03
    1ae2:	69 85       	ldd	r22, Y+9	; 0x09
    1ae4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	fb 01       	movw	r30, r22
    1af4:	e8 0f       	add	r30, r24
    1af6:	f9 1f       	adc	r31, r25
    1af8:	20 83       	st	Z, r18
    1afa:	31 83       	std	Z+1, r19	; 0x01
    1afc:	42 83       	std	Z+2, r20	; 0x02
    1afe:	53 83       	std	Z+3, r21	; 0x03
	(*ppl)->size=0;
}
void insertlist (int p,listentry e,plist pl)
{
	int i;
	for (i=pl->size-1;i>=p;i--)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	29 81       	ldd	r18, Y+1	; 0x01
    1b0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	28 17       	cp	r18, r24
    1b14:	39 07       	cpc	r19, r25
    1b16:	8c f6       	brge	.-94     	; 0x1aba <insertlist+0x34>
	{
		pl->entry[i+1]=pl->entry[i];
	}
	pl->entry[p]=e;
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	29 85       	ldd	r18, Y+9	; 0x09
    1b1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	af 81       	ldd	r26, Y+7	; 0x07
    1b36:	b8 85       	ldd	r27, Y+8	; 0x08
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
	pl->size++;
    1b40:	e9 85       	ldd	r30, Y+9	; 0x09
    1b42:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	e9 85       	ldd	r30, Y+9	; 0x09
    1b4c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
}
    1b52:	2a 96       	adiw	r28, 0x0a	; 10
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <listfull>:
int listfull (plist pl)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <listfull+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <listfull+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	if (pl->size==MAXLIST) return 1;
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	8a 30       	cpi	r24, 0x0A	; 10
    1b7e:	91 05       	cpc	r25, r1
    1b80:	29 f4       	brne	.+10     	; 0x1b8c <listfull+0x28>
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <listfull+0x2c>
	else return 0;
    1b8c:	1c 82       	std	Y+4, r1	; 0x04
    1b8e:	1b 82       	std	Y+3, r1	; 0x03
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <deletlist>:
void deletlist (int p,listentry *pe,plist pl)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	28 97       	sbiw	r28, 0x08	; 8
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	7e 83       	std	Y+6, r23	; 0x06
    1bbc:	6d 83       	std	Y+5, r22	; 0x05
    1bbe:	58 87       	std	Y+8, r21	; 0x08
    1bc0:	4f 83       	std	Y+7, r20	; 0x07
	int i;
	*pe=pl->entry[p];
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc8:	38 85       	ldd	r19, Y+8	; 0x08
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	e8 0f       	add	r30, r24
    1bd8:	f9 1f       	adc	r31, r25
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	a2 81       	ldd	r26, Z+2	; 0x02
    1be0:	b3 81       	ldd	r27, Z+3	; 0x03
    1be2:	ed 81       	ldd	r30, Y+5	; 0x05
    1be4:	fe 81       	ldd	r31, Y+6	; 0x06
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
	for (i=p+1;i<=pl->size-1;i++)
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	28 c0       	rjmp	.+80     	; 0x1c4a <deletlist+0xa8>
	{
		pl->entry[i-1]=pl->entry[i];
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	dc 01       	movw	r26, r24
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	2f 81       	ldd	r18, Y+7	; 0x07
    1c08:	38 85       	ldd	r19, Y+8	; 0x08
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	f9 01       	movw	r30, r18
    1c16:	e8 0f       	add	r30, r24
    1c18:	f9 1f       	adc	r31, r25
    1c1a:	20 81       	ld	r18, Z
    1c1c:	31 81       	ldd	r19, Z+1	; 0x01
    1c1e:	42 81       	ldd	r20, Z+2	; 0x02
    1c20:	53 81       	ldd	r21, Z+3	; 0x03
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	cd 01       	movw	r24, r26
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	fb 01       	movw	r30, r22
    1c34:	e8 0f       	add	r30, r24
    1c36:	f9 1f       	adc	r31, r25
    1c38:	20 83       	st	Z, r18
    1c3a:	31 83       	std	Z+1, r19	; 0x01
    1c3c:	42 83       	std	Z+2, r20	; 0x02
    1c3e:	53 83       	std	Z+3, r21	; 0x03
}
void deletlist (int p,listentry *pe,plist pl)
{
	int i;
	*pe=pl->entry[p];
	for (i=p+1;i<=pl->size-1;i++)
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c4c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	9c 01       	movw	r18, r24
    1c54:	21 50       	subi	r18, 0x01	; 1
    1c56:	30 40       	sbci	r19, 0x00	; 0
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	64 f6       	brge	.-104    	; 0x1bfa <deletlist+0x58>
	{
		pl->entry[i-1]=pl->entry[i];
	}
	pl->size--;
    1c62:	ef 81       	ldd	r30, Y+7	; 0x07
    1c64:	f8 85       	ldd	r31, Y+8	; 0x08
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c6e:	f8 85       	ldd	r31, Y+8	; 0x08
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
}
    1c74:	28 96       	adiw	r28, 0x08	; 8
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <listempty>:
int listempty (plist pl)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <listempty+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <listempty+0x8>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
	if (pl->size==0) return 1;
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <listempty+0x26>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 83       	std	Y+4, r25	; 0x04
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <listempty+0x2a>
	else return 0;
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	1b 82       	std	Y+3, r1	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <listsize>:
int listsize (plist pl)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <listsize+0x6>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
	return pl->size;
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <retrievelist>:
void retrievelist (int p,listentry *pe,plist pl)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <retrievelist+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <retrievelist+0x8>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <retrievelist+0xa>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	7c 83       	std	Y+4, r23	; 0x04
    1cf6:	6b 83       	std	Y+3, r22	; 0x03
    1cf8:	5e 83       	std	Y+6, r21	; 0x06
    1cfa:	4d 83       	std	Y+5, r20	; 0x05
	*pe=pl->entry[p];
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	2d 81       	ldd	r18, Y+5	; 0x05
    1d02:	3e 81       	ldd	r19, Y+6	; 0x06
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	f9 01       	movw	r30, r18
    1d10:	e8 0f       	add	r30, r24
    1d12:	f9 1f       	adc	r31, r25
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	a2 81       	ldd	r26, Z+2	; 0x02
    1d1a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	a2 83       	std	Z+2, r26	; 0x02
    1d26:	b3 83       	std	Z+3, r27	; 0x03
}
    1d28:	26 96       	adiw	r28, 0x06	; 6
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <replacelist>:
void replacelist (int p,listentry e,plist pl)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	28 97       	sbiw	r28, 0x08	; 8
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	4b 83       	std	Y+3, r20	; 0x03
    1d54:	5c 83       	std	Y+4, r21	; 0x04
    1d56:	6d 83       	std	Y+5, r22	; 0x05
    1d58:	7e 83       	std	Y+6, r23	; 0x06
    1d5a:	38 87       	std	Y+8, r19	; 0x08
    1d5c:	2f 83       	std	Y+7, r18	; 0x07
	pl->entry[p]=e;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	2f 81       	ldd	r18, Y+7	; 0x07
    1d64:	38 85       	ldd	r19, Y+8	; 0x08
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	f9 01       	movw	r30, r18
    1d72:	e8 0f       	add	r30, r24
    1d74:	f9 1f       	adc	r31, r25
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1d7c:	be 81       	ldd	r27, Y+6	; 0x06
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
}
    1d86:	28 96       	adiw	r28, 0x08	; 8
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <destroylist>:
void destroylist (plist *ppl)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <destroylist+0x6>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	(*ppl)->size=0;
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	01 90       	ld	r0, Z+
    1dac:	f0 81       	ld	r31, Z
    1dae:	e0 2d       	mov	r30, r0
    1db0:	11 82       	std	Z+1, r1	; 0x01
    1db2:	10 82       	st	Z, r1
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <traverselist>:
void traverselist (plist pl,void (*pf) (listentry e))
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <traverselist+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <traverselist+0x8>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <traverselist+0xa>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	7e 83       	std	Y+6, r23	; 0x06
    1dd2:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<pl->size;i++)
    1dd4:	1a 82       	std	Y+2, r1	; 0x02
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	1a c0       	rjmp	.+52     	; 0x1e0e <traverselist+0x50>
		pf(pl->entry[i]);
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	2b 81       	ldd	r18, Y+3	; 0x03
    1de0:	3c 81       	ldd	r19, Y+4	; 0x04
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	f9 01       	movw	r30, r18
    1dee:	e8 0f       	add	r30, r24
    1df0:	f9 1f       	adc	r31, r25
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	a2 81       	ldd	r26, Z+2	; 0x02
    1df8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	09 95       	icall
{
	(*ppl)->size=0;
}
void traverselist (plist pl,void (*pf) (listentry e))
{
	for (int i=0;i<pl->size;i++)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e10:	fc 81       	ldd	r31, Y+4	; 0x04
    1e12:	20 81       	ld	r18, Z
    1e14:	31 81       	ldd	r19, Z+1	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	82 17       	cp	r24, r18
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	ec f2       	brlt	.-70     	; 0x1dda <traverselist+0x1c>
		pf(pl->entry[i]);
}
    1e20:	26 96       	adiw	r28, 0x06	; 6
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_enumInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "LCD_priv.h"
#include "LCD_config.h"

ES_T LCD_enumInit(void)
{
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	c8 54       	subi	r28, 0x48	; 72
    1e40:	d0 40       	sbci	r29, 0x00	; 0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
	ES_T Local_enumErrorState=ES_NOK;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e9 5b       	subi	r30, 0xB9	; 185
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	10 82       	st	Z, r1
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 5b       	subi	r30, 0xBD	; 189
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	ac e0       	ldi	r26, 0x0C	; 12
    1e60:	b2 e4       	ldi	r27, 0x42	; 66
    1e62:	80 83       	st	Z, r24
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	a2 83       	std	Z+2, r26	; 0x02
    1e68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	01 5c       	subi	r16, 0xC1	; 193
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	fe 01       	movw	r30, r28
    1e72:	ed 5b       	subi	r30, 0xBD	; 189
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a e7       	ldi	r20, 0x7A	; 122
    1e84:	53 e4       	ldi	r21, 0x43	; 67
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	f8 01       	movw	r30, r16
    1e90:	80 83       	st	Z, r24
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	a2 83       	std	Z+2, r26	; 0x02
    1e96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ff 96       	adiw	r30, 0x3f	; 63
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <LCD_enumInit+0x8c>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9e af       	std	Y+62, r25	; 0x3e
    1eba:	8d af       	std	Y+61, r24	; 0x3d
    1ebc:	46 c0       	rjmp	.+140    	; 0x1f4a <LCD_enumInit+0x118>
	else if (__tmp > 65535)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ff 96       	adiw	r30, 0x3f	; 63
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	64 f5       	brge	.+88     	; 0x1f32 <LCD_enumInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 5b       	subi	r30, 0xBD	; 189
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e af       	std	Y+62, r25	; 0x3e
    1f06:	8d af       	std	Y+61, r24	; 0x3d
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_enumInit+0xf6>
    1f0a:	89 e1       	ldi	r24, 0x19	; 25
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9c af       	std	Y+60, r25	; 0x3c
    1f10:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f12:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f14:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_enumInit+0xe4>
    1f1a:	9c af       	std	Y+60, r25	; 0x3c
    1f1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9e af       	std	Y+62, r25	; 0x3e
    1f26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <LCD_enumInit+0xd8>
    1f30:	16 c0       	rjmp	.+44     	; 0x1f5e <LCD_enumInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	fe 01       	movw	r30, r28
    1f34:	ff 96       	adiw	r30, 0x3f	; 63
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e af       	std	Y+62, r25	; 0x3e
    1f48:	8d af       	std	Y+61, r24	; 0x3d
    1f4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f4e:	9a af       	std	Y+58, r25	; 0x3a
    1f50:	89 af       	std	Y+57, r24	; 0x39
    1f52:	89 ad       	ldd	r24, Y+57	; 0x39
    1f54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_enumInit+0x124>
    1f5a:	9a af       	std	Y+58, r25	; 0x3a
    1f5c:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	66 e0       	ldi	r22, 0x06	; 6
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e9 5b       	subi	r30, 0xB9	; 185
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    1f70:	fe 01       	movw	r30, r28
    1f72:	e9 5b       	subi	r30, 0xB9	; 185
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	41 f0       	breq	.+16     	; 0x1f8c <LCD_enumInit+0x15a>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e9 5b       	subi	r30, 0xB9	; 185
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	29 96       	adiw	r28, 0x09	; 9
    1f86:	8f af       	std	Y+63, r24	; 0x3f
    1f88:	29 97       	sbiw	r28, 0x09	; 9
    1f8a:	23 c3       	rjmp	.+1606   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	65 e0       	ldi	r22, 0x05	; 5
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    1f96:	fe 01       	movw	r30, r28
    1f98:	e9 5b       	subi	r30, 0xB9	; 185
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e9 5b       	subi	r30, 0xB9	; 185
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	41 f0       	breq	.+16     	; 0x1fba <LCD_enumInit+0x188>
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 5b       	subi	r30, 0xB9	; 185
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	29 96       	adiw	r28, 0x09	; 9
    1fb4:	8f af       	std	Y+63, r24	; 0x3f
    1fb6:	29 97       	sbiw	r28, 0x09	; 9
    1fb8:	0c c3       	rjmp	.+1560   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	64 e0       	ldi	r22, 0x04	; 4
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e9 5b       	subi	r30, 0xB9	; 185
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e9 5b       	subi	r30, 0xB9	; 185
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	41 f0       	breq	.+16     	; 0x1fe8 <LCD_enumInit+0x1b6>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e9 5b       	subi	r30, 0xB9	; 185
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	29 96       	adiw	r28, 0x09	; 9
    1fe2:	8f af       	std	Y+63, r24	; 0x3f
    1fe4:	29 97       	sbiw	r28, 0x09	; 9
    1fe6:	f5 c2       	rjmp	.+1514   	; 0x25d2 <LCD_enumInit+0x7a0>

    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,OUTPUT);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e9 5b       	subi	r30, 0xB9	; 185
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e9 5b       	subi	r30, 0xB9	; 185
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	41 f0       	breq	.+16     	; 0x2016 <LCD_enumInit+0x1e4>
    2006:	fe 01       	movw	r30, r28
    2008:	e9 5b       	subi	r30, 0xB9	; 185
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	29 96       	adiw	r28, 0x09	; 9
    2010:	8f af       	std	Y+63, r24	; 0x3f
    2012:	29 97       	sbiw	r28, 0x09	; 9
    2014:	de c2       	rjmp	.+1468   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,OUTPUT);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    2020:	fe 01       	movw	r30, r28
    2022:	e9 5b       	subi	r30, 0xB9	; 185
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2028:	fe 01       	movw	r30, r28
    202a:	e9 5b       	subi	r30, 0xB9	; 185
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	41 f0       	breq	.+16     	; 0x2044 <LCD_enumInit+0x212>
    2034:	fe 01       	movw	r30, r28
    2036:	e9 5b       	subi	r30, 0xB9	; 185
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	29 96       	adiw	r28, 0x09	; 9
    203e:	8f af       	std	Y+63, r24	; 0x3f
    2040:	29 97       	sbiw	r28, 0x09	; 9
    2042:	c7 c2       	rjmp	.+1422   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,OUTPUT);
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    204e:	fe 01       	movw	r30, r28
    2050:	e9 5b       	subi	r30, 0xB9	; 185
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2056:	fe 01       	movw	r30, r28
    2058:	e9 5b       	subi	r30, 0xB9	; 185
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	41 f0       	breq	.+16     	; 0x2072 <LCD_enumInit+0x240>
    2062:	fe 01       	movw	r30, r28
    2064:	e9 5b       	subi	r30, 0xB9	; 185
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	29 96       	adiw	r28, 0x09	; 9
    206c:	8f af       	std	Y+63, r24	; 0x3f
    206e:	29 97       	sbiw	r28, 0x09	; 9
    2070:	b0 c2       	rjmp	.+1376   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,OUTPUT);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	63 e0       	ldi	r22, 0x03	; 3
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    207c:	fe 01       	movw	r30, r28
    207e:	e9 5b       	subi	r30, 0xB9	; 185
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2084:	fe 01       	movw	r30, r28
    2086:	e9 5b       	subi	r30, 0xB9	; 185
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	41 f0       	breq	.+16     	; 0x20a0 <LCD_enumInit+0x26e>
    2090:	fe 01       	movw	r30, r28
    2092:	e9 5b       	subi	r30, 0xB9	; 185
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	29 96       	adiw	r28, 0x09	; 9
    209a:	8f af       	std	Y+63, r24	; 0x3f
    209c:	29 97       	sbiw	r28, 0x09	; 9
    209e:	99 c2       	rjmp	.+1330   	; 0x25d2 <LCD_enumInit+0x7a0>

#if LCD_MODE == EIGHT_BIT

    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D3_PORT,LCD_D3_PIN,OUTPUT);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	64 e0       	ldi	r22, 0x04	; 4
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    20aa:	fe 01       	movw	r30, r28
    20ac:	e9 5b       	subi	r30, 0xB9	; 185
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    20b2:	fe 01       	movw	r30, r28
    20b4:	e9 5b       	subi	r30, 0xB9	; 185
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	41 f0       	breq	.+16     	; 0x20ce <LCD_enumInit+0x29c>
    20be:	fe 01       	movw	r30, r28
    20c0:	e9 5b       	subi	r30, 0xB9	; 185
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	29 96       	adiw	r28, 0x09	; 9
    20c8:	8f af       	std	Y+63, r24	; 0x3f
    20ca:	29 97       	sbiw	r28, 0x09	; 9
    20cc:	82 c2       	rjmp	.+1284   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D2_PORT,LCD_D2_PIN,OUTPUT);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	65 e0       	ldi	r22, 0x05	; 5
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    20d8:	fe 01       	movw	r30, r28
    20da:	e9 5b       	subi	r30, 0xB9	; 185
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    20e0:	fe 01       	movw	r30, r28
    20e2:	e9 5b       	subi	r30, 0xB9	; 185
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	41 f0       	breq	.+16     	; 0x20fc <LCD_enumInit+0x2ca>
    20ec:	fe 01       	movw	r30, r28
    20ee:	e9 5b       	subi	r30, 0xB9	; 185
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	29 96       	adiw	r28, 0x09	; 9
    20f6:	8f af       	std	Y+63, r24	; 0x3f
    20f8:	29 97       	sbiw	r28, 0x09	; 9
    20fa:	6b c2       	rjmp	.+1238   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D1_PORT,LCD_D1_PIN,OUTPUT);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	66 e0       	ldi	r22, 0x06	; 6
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    2106:	fe 01       	movw	r30, r28
    2108:	e9 5b       	subi	r30, 0xB9	; 185
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    210e:	fe 01       	movw	r30, r28
    2110:	e9 5b       	subi	r30, 0xB9	; 185
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	41 f0       	breq	.+16     	; 0x212a <LCD_enumInit+0x2f8>
    211a:	fe 01       	movw	r30, r28
    211c:	e9 5b       	subi	r30, 0xB9	; 185
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	29 96       	adiw	r28, 0x09	; 9
    2124:	8f af       	std	Y+63, r24	; 0x3f
    2126:	29 97       	sbiw	r28, 0x09	; 9
    2128:	54 c2       	rjmp	.+1192   	; 0x25d2 <LCD_enumInit+0x7a0>
    Local_enumErrorState=DIO_enumSetPinDirection(LCD_D0_PORT,LCD_D0_PIN,OUTPUT);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	67 e0       	ldi	r22, 0x07	; 7
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    2134:	fe 01       	movw	r30, r28
    2136:	e9 5b       	subi	r30, 0xB9	; 185
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    213c:	fe 01       	movw	r30, r28
    213e:	e9 5b       	subi	r30, 0xB9	; 185
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	41 f0       	breq	.+16     	; 0x2158 <LCD_enumInit+0x326>
    2148:	fe 01       	movw	r30, r28
    214a:	e9 5b       	subi	r30, 0xB9	; 185
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	29 96       	adiw	r28, 0x09	; 9
    2152:	8f af       	std	Y+63, r24	; 0x3f
    2154:	29 97       	sbiw	r28, 0x09	; 9
    2156:	3d c2       	rjmp	.+1146   	; 0x25d2 <LCD_enumInit+0x7a0>

    Local_enumErrorState=LCD_inlenumSendCommand(0x38);
    2158:	88 e3       	ldi	r24, 0x38	; 56
    215a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    215e:	fe 01       	movw	r30, r28
    2160:	e9 5b       	subi	r30, 0xB9	; 185
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2166:	fe 01       	movw	r30, r28
    2168:	e9 5b       	subi	r30, 0xB9	; 185
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	41 f0       	breq	.+16     	; 0x2182 <LCD_enumInit+0x350>
    2172:	fe 01       	movw	r30, r28
    2174:	e9 5b       	subi	r30, 0xB9	; 185
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 81       	ld	r24, Z
    217a:	29 96       	adiw	r28, 0x09	; 9
    217c:	8f af       	std	Y+63, r24	; 0x3f
    217e:	29 97       	sbiw	r28, 0x09	; 9
    2180:	28 c2       	rjmp	.+1104   	; 0x25d2 <LCD_enumInit+0x7a0>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8d ab       	std	Y+53, r24	; 0x35
    218c:	9e ab       	std	Y+54, r25	; 0x36
    218e:	af ab       	std	Y+55, r26	; 0x37
    2190:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6d a9       	ldd	r22, Y+53	; 0x35
    2194:	7e a9       	ldd	r23, Y+54	; 0x36
    2196:	8f a9       	ldd	r24, Y+55	; 0x37
    2198:	98 ad       	ldd	r25, Y+56	; 0x38
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	89 ab       	std	Y+49, r24	; 0x31
    21ac:	9a ab       	std	Y+50, r25	; 0x32
    21ae:	ab ab       	std	Y+51, r26	; 0x33
    21b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_enumInit+0x3a2>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_enumInit+0x420>
	else if (__tmp > 65535)
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_enumInit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6d a9       	ldd	r22, Y+53	; 0x35
    21ee:	7e a9       	ldd	r23, Y+54	; 0x36
    21f0:	8f a9       	ldd	r24, Y+55	; 0x37
    21f2:	98 ad       	ldd	r25, Y+56	; 0x38
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	98 ab       	std	Y+48, r25	; 0x30
    2212:	8f a7       	std	Y+47, r24	; 0x2f
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_enumInit+0x402>
    2216:	89 e1       	ldi	r24, 0x19	; 25
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e a7       	std	Y+46, r25	; 0x2e
    221c:	8d a7       	std	Y+45, r24	; 0x2d
    221e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2220:	9e a5       	ldd	r25, Y+46	; 0x2e
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_enumInit+0x3f0>
    2226:	9e a7       	std	Y+46, r25	; 0x2e
    2228:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8f a5       	ldd	r24, Y+47	; 0x2f
    222c:	98 a9       	ldd	r25, Y+48	; 0x30
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_enumInit+0x3e4>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <LCD_enumInit+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	9c a7       	std	Y+44, r25	; 0x2c
    2258:	8b a7       	std	Y+43, r24	; 0x2b
    225a:	8b a5       	ldd	r24, Y+43	; 0x2b
    225c:	9c a5       	ldd	r25, Y+44	; 0x2c
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_enumInit+0x42c>
    2262:	9c a7       	std	Y+44, r25	; 0x2c
    2264:	8b a7       	std	Y+43, r24	; 0x2b

#endif

    _delay_ms(1);

    Local_enumErrorState=LCD_inlenumSendCommand(0x0D);
    2266:	8d e0       	ldi	r24, 0x0D	; 13
    2268:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    226c:	fe 01       	movw	r30, r28
    226e:	e9 5b       	subi	r30, 0xB9	; 185
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2274:	fe 01       	movw	r30, r28
    2276:	e9 5b       	subi	r30, 0xB9	; 185
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	41 f0       	breq	.+16     	; 0x2290 <LCD_enumInit+0x45e>
    2280:	fe 01       	movw	r30, r28
    2282:	e9 5b       	subi	r30, 0xB9	; 185
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	29 96       	adiw	r28, 0x09	; 9
    228a:	8f af       	std	Y+63, r24	; 0x3f
    228c:	29 97       	sbiw	r28, 0x09	; 9
    228e:	a1 c1       	rjmp	.+834    	; 0x25d2 <LCD_enumInit+0x7a0>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	bf e3       	ldi	r27, 0x3F	; 63
    2298:	8f a3       	std	Y+39, r24	; 0x27
    229a:	98 a7       	std	Y+40, r25	; 0x28
    229c:	a9 a7       	std	Y+41, r26	; 0x29
    229e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	6f a1       	ldd	r22, Y+39	; 0x27
    22a2:	78 a5       	ldd	r23, Y+40	; 0x28
    22a4:	89 a5       	ldd	r24, Y+41	; 0x29
    22a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	53 e4       	ldi	r21, 0x43	; 67
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8b a3       	std	Y+35, r24	; 0x23
    22ba:	9c a3       	std	Y+36, r25	; 0x24
    22bc:	ad a3       	std	Y+37, r26	; 0x25
    22be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22c0:	6b a1       	ldd	r22, Y+35	; 0x23
    22c2:	7c a1       	ldd	r23, Y+36	; 0x24
    22c4:	8d a1       	ldd	r24, Y+37	; 0x25
    22c6:	9e a1       	ldd	r25, Y+38	; 0x26
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <LCD_enumInit+0x4b0>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <LCD_enumInit+0x52e>
	else if (__tmp > 65535)
    22e2:	6b a1       	ldd	r22, Y+35	; 0x23
    22e4:	7c a1       	ldd	r23, Y+36	; 0x24
    22e6:	8d a1       	ldd	r24, Y+37	; 0x25
    22e8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	4c f5       	brge	.+82     	; 0x234c <LCD_enumInit+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	6f a1       	ldd	r22, Y+39	; 0x27
    22fc:	78 a5       	ldd	r23, Y+40	; 0x28
    22fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2300:	9a a5       	ldd	r25, Y+42	; 0x2a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9a a3       	std	Y+34, r25	; 0x22
    2320:	89 a3       	std	Y+33, r24	; 0x21
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_enumInit+0x510>
    2324:	89 e1       	ldi	r24, 0x19	; 25
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	98 a3       	std	Y+32, r25	; 0x20
    232a:	8f 8f       	std	Y+31, r24	; 0x1f
    232c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232e:	98 a1       	ldd	r25, Y+32	; 0x20
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_enumInit+0x4fe>
    2334:	98 a3       	std	Y+32, r25	; 0x20
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	89 a1       	ldd	r24, Y+33	; 0x21
    233a:	9a a1       	ldd	r25, Y+34	; 0x22
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_enumInit+0x4f2>
    234a:	14 c0       	rjmp	.+40     	; 0x2374 <LCD_enumInit+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9a a3       	std	Y+34, r25	; 0x22
    235e:	89 a3       	std	Y+33, r24	; 0x21
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	9e 8f       	std	Y+30, r25	; 0x1e
    2366:	8d 8f       	std	Y+29, r24	; 0x1d
    2368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    236a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_enumInit+0x53a>
    2370:	9e 8f       	std	Y+30, r25	; 0x1e
    2372:	8d 8f       	std	Y+29, r24	; 0x1d

    _delay_ms(1);

    Local_enumErrorState=LCD_inlenumSendCommand(0x01);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    237a:	fe 01       	movw	r30, r28
    237c:	e9 5b       	subi	r30, 0xB9	; 185
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2382:	fe 01       	movw	r30, r28
    2384:	e9 5b       	subi	r30, 0xB9	; 185
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	41 f0       	breq	.+16     	; 0x239e <LCD_enumInit+0x56c>
    238e:	fe 01       	movw	r30, r28
    2390:	e9 5b       	subi	r30, 0xB9	; 185
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	29 96       	adiw	r28, 0x09	; 9
    2398:	8f af       	std	Y+63, r24	; 0x3f
    239a:	29 97       	sbiw	r28, 0x09	; 9
    239c:	1a c1       	rjmp	.+564    	; 0x25d2 <LCD_enumInit+0x7a0>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e4       	ldi	r26, 0x40	; 64
    23a4:	b0 e4       	ldi	r27, 0x40	; 64
    23a6:	89 8f       	std	Y+25, r24	; 0x19
    23a8:	9a 8f       	std	Y+26, r25	; 0x1a
    23aa:	ab 8f       	std	Y+27, r26	; 0x1b
    23ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	69 8d       	ldd	r22, Y+25	; 0x19
    23b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4a e7       	ldi	r20, 0x7A	; 122
    23bc:	53 e4       	ldi	r21, 0x43	; 67
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8d 8b       	std	Y+21, r24	; 0x15
    23c8:	9e 8b       	std	Y+22, r25	; 0x16
    23ca:	af 8b       	std	Y+23, r26	; 0x17
    23cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ce:	6d 89       	ldd	r22, Y+21	; 0x15
    23d0:	7e 89       	ldd	r23, Y+22	; 0x16
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <LCD_enumInit+0x5be>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <LCD_enumInit+0x63c>
	else if (__tmp > 65535)
    23f0:	6d 89       	ldd	r22, Y+21	; 0x15
    23f2:	7e 89       	ldd	r23, Y+22	; 0x16
    23f4:	8f 89       	ldd	r24, Y+23	; 0x17
    23f6:	98 8d       	ldd	r25, Y+24	; 0x18
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	3f ef       	ldi	r19, 0xFF	; 255
    23fc:	4f e7       	ldi	r20, 0x7F	; 127
    23fe:	57 e4       	ldi	r21, 0x47	; 71
    2400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <LCD_enumInit+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	69 8d       	ldd	r22, Y+25	; 0x19
    240a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9c 8b       	std	Y+20, r25	; 0x14
    242e:	8b 8b       	std	Y+19, r24	; 0x13
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <LCD_enumInit+0x61e>
    2432:	89 e1       	ldi	r24, 0x19	; 25
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9a 8b       	std	Y+18, r25	; 0x12
    2438:	89 8b       	std	Y+17, r24	; 0x11
    243a:	89 89       	ldd	r24, Y+17	; 0x11
    243c:	9a 89       	ldd	r25, Y+18	; 0x12
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_enumInit+0x60c>
    2442:	9a 8b       	std	Y+18, r25	; 0x12
    2444:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	8b 89       	ldd	r24, Y+19	; 0x13
    2448:	9c 89       	ldd	r25, Y+20	; 0x14
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	69 f7       	brne	.-38     	; 0x2432 <LCD_enumInit+0x600>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <LCD_enumInit+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9c 8b       	std	Y+20, r25	; 0x14
    246c:	8b 8b       	std	Y+19, r24	; 0x13
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	8f 87       	std	Y+15, r24	; 0x0f
    2476:	8f 85       	ldd	r24, Y+15	; 0x0f
    2478:	98 89       	ldd	r25, Y+16	; 0x10
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_enumInit+0x648>
    247e:	98 8b       	std	Y+16, r25	; 0x10
    2480:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(3);

    Local_enumErrorState=LCD_inlenumSendCommand(0x06);
    2482:	86 e0       	ldi	r24, 0x06	; 6
    2484:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    2488:	fe 01       	movw	r30, r28
    248a:	e9 5b       	subi	r30, 0xB9	; 185
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2490:	fe 01       	movw	r30, r28
    2492:	e9 5b       	subi	r30, 0xB9	; 185
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	41 f0       	breq	.+16     	; 0x24ac <LCD_enumInit+0x67a>
    249c:	fe 01       	movw	r30, r28
    249e:	e9 5b       	subi	r30, 0xB9	; 185
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	29 96       	adiw	r28, 0x09	; 9
    24a6:	8f af       	std	Y+63, r24	; 0x3f
    24a8:	29 97       	sbiw	r28, 0x09	; 9
    24aa:	93 c0       	rjmp	.+294    	; 0x25d2 <LCD_enumInit+0x7a0>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 e8       	ldi	r26, 0x80	; 128
    24b2:	bf e3       	ldi	r27, 0x3F	; 63
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a e7       	ldi	r20, 0x7A	; 122
    24ca:	53 e4       	ldi	r21, 0x43	; 67
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <LCD_enumInit+0x6cc>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <LCD_enumInit+0x74a>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <LCD_enumInit+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <LCD_enumInit+0x72c>
    2540:	89 e1       	ldi	r24, 0x19	; 25
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_enumInit+0x71a>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <LCD_enumInit+0x70e>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <LCD_enumInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD_enumInit+0x756>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(1);

    Local_enumErrorState=LCD_inlenumSendCommand(0x80);
    2590:	80 e8       	ldi	r24, 0x80	; 128
    2592:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    2596:	fe 01       	movw	r30, r28
    2598:	e9 5b       	subi	r30, 0xB9	; 185
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 83       	st	Z, r24
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    259e:	fe 01       	movw	r30, r28
    25a0:	e9 5b       	subi	r30, 0xB9	; 185
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	41 f0       	breq	.+16     	; 0x25ba <LCD_enumInit+0x788>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 5b       	subi	r30, 0xB9	; 185
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	29 96       	adiw	r28, 0x09	; 9
    25b4:	8f af       	std	Y+63, r24	; 0x3f
    25b6:	29 97       	sbiw	r28, 0x09	; 9
    25b8:	0c c0       	rjmp	.+24     	; 0x25d2 <LCD_enumInit+0x7a0>

    Local_enumErrorState=ES_OK;
    25ba:	fe 01       	movw	r30, r28
    25bc:	e9 5b       	subi	r30, 0xB9	; 185
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 83       	st	Z, r24

	return Local_enumErrorState;
    25c4:	fe 01       	movw	r30, r28
    25c6:	e9 5b       	subi	r30, 0xB9	; 185
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	29 96       	adiw	r28, 0x09	; 9
    25ce:	8f af       	std	Y+63, r24	; 0x3f
    25d0:	29 97       	sbiw	r28, 0x09	; 9
    25d2:	29 96       	adiw	r28, 0x09	; 9
    25d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    25d6:	29 97       	sbiw	r28, 0x09	; 9
}
    25d8:	c8 5b       	subi	r28, 0xB8	; 184
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <LCD_inlenumSendCommand>:

static inline ES_T LCD_inlenumSendCommand(u8 Copy_u8Command)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <LCD_inlenumSendCommand+0x6>
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    25fe:	19 82       	std	Y+1, r1	; 0x01

    Local_enumErrorState=DIO_enumSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	66 e0       	ldi	r22, 0x06	; 6
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    260a:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	19 f0       	breq	.+6      	; 0x2618 <LCD_inlenumSendCommand+0x28>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	8b 83       	std	Y+3, r24	; 0x03
    2616:	ae c0       	rjmp	.+348    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	64 e0       	ldi	r22, 0x04	; 4
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2622:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	19 f0       	breq	.+6      	; 0x2630 <LCD_inlenumSendCommand+0x40>
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	a2 c0       	rjmp	.+324    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	65 e0       	ldi	r22, 0x05	; 5
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    263a:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	19 f0       	breq	.+6      	; 0x2648 <LCD_inlenumSendCommand+0x58>
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	8b 83       	std	Y+3, r24	; 0x03
    2646:	96 c0       	rjmp	.+300    	; 0x2774 <LCD_inlenumSendCommand+0x184>

#if LCD_MODE == EIGHT_BIT

    Local_enumErrorState=DIO_enumSetPinValue(LCD_D7_PORT,LCD_D7_PIN,READ_BIT(Copy_u8Command,7));
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	98 2f       	mov	r25, r24
    264c:	99 1f       	adc	r25, r25
    264e:	99 27       	eor	r25, r25
    2650:	99 1f       	adc	r25, r25
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	49 2f       	mov	r20, r25
    2658:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    265c:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	19 f0       	breq	.+6      	; 0x266a <LCD_inlenumSendCommand+0x7a>
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	8b 83       	std	Y+3, r24	; 0x03
    2668:	85 c0       	rjmp	.+266    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D6_PORT,LCD_D6_PIN,READ_BIT(Copy_u8Command,6));
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	82 95       	swap	r24
    266e:	86 95       	lsr	r24
    2670:	86 95       	lsr	r24
    2672:	83 70       	andi	r24, 0x03	; 3
    2674:	98 2f       	mov	r25, r24
    2676:	91 70       	andi	r25, 0x01	; 1
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	49 2f       	mov	r20, r25
    267e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2682:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	19 f0       	breq	.+6      	; 0x2690 <LCD_inlenumSendCommand+0xa0>
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	8b 83       	std	Y+3, r24	; 0x03
    268e:	72 c0       	rjmp	.+228    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D5_PORT,LCD_D5_PIN,READ_BIT(Copy_u8Command,5));
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	82 95       	swap	r24
    2694:	86 95       	lsr	r24
    2696:	87 70       	andi	r24, 0x07	; 7
    2698:	98 2f       	mov	r25, r24
    269a:	91 70       	andi	r25, 0x01	; 1
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	62 e0       	ldi	r22, 0x02	; 2
    26a0:	49 2f       	mov	r20, r25
    26a2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    26a6:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	19 f0       	breq	.+6      	; 0x26b4 <LCD_inlenumSendCommand+0xc4>
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	60 c0       	rjmp	.+192    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D4_PORT,LCD_D4_PIN,READ_BIT(Copy_u8Command,4));
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	82 95       	swap	r24
    26b8:	8f 70       	andi	r24, 0x0F	; 15
    26ba:	98 2f       	mov	r25, r24
    26bc:	91 70       	andi	r25, 0x01	; 1
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	63 e0       	ldi	r22, 0x03	; 3
    26c2:	49 2f       	mov	r20, r25
    26c4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    26c8:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <LCD_inlenumSendCommand+0xe6>
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	4f c0       	rjmp	.+158    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D3_PORT,LCD_D3_PIN,READ_BIT(Copy_u8Command,3));
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	86 95       	lsr	r24
    26da:	86 95       	lsr	r24
    26dc:	86 95       	lsr	r24
    26de:	98 2f       	mov	r25, r24
    26e0:	91 70       	andi	r25, 0x01	; 1
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	64 e0       	ldi	r22, 0x04	; 4
    26e6:	49 2f       	mov	r20, r25
    26e8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    26ec:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	19 f0       	breq	.+6      	; 0x26fa <LCD_inlenumSendCommand+0x10a>
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	3d c0       	rjmp	.+122    	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D2_PORT,LCD_D2_PIN,READ_BIT(Copy_u8Command,2));
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	86 95       	lsr	r24
    26fe:	86 95       	lsr	r24
    2700:	98 2f       	mov	r25, r24
    2702:	91 70       	andi	r25, 0x01	; 1
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	65 e0       	ldi	r22, 0x05	; 5
    2708:	49 2f       	mov	r20, r25
    270a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    270e:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	19 f0       	breq	.+6      	; 0x271c <LCD_inlenumSendCommand+0x12c>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	2c c0       	rjmp	.+88     	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D1_PORT,LCD_D1_PIN,READ_BIT(Copy_u8Command,1));
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	86 95       	lsr	r24
    2720:	98 2f       	mov	r25, r24
    2722:	91 70       	andi	r25, 0x01	; 1
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	66 e0       	ldi	r22, 0x06	; 6
    2728:	49 2f       	mov	r20, r25
    272a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    272e:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	19 f0       	breq	.+6      	; 0x273c <LCD_inlenumSendCommand+0x14c>
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	8b 83       	std	Y+3, r24	; 0x03
    273a:	1c c0       	rjmp	.+56     	; 0x2774 <LCD_inlenumSendCommand+0x184>
    Local_enumErrorState=DIO_enumSetPinValue(LCD_D0_PORT,LCD_D0_PIN,READ_BIT(Copy_u8Command,0));
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	98 2f       	mov	r25, r24
    2740:	91 70       	andi	r25, 0x01	; 1
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	67 e0       	ldi	r22, 0x07	; 7
    2746:	49 2f       	mov	r20, r25
    2748:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    274c:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	19 f0       	breq	.+6      	; 0x275a <LCD_inlenumSendCommand+0x16a>
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	8b 83       	std	Y+3, r24	; 0x03
    2758:	0d c0       	rjmp	.+26     	; 0x2774 <LCD_inlenumSendCommand+0x184>

    Local_enumErrorState=LCD_inlenumLatch();
    275a:	0e 94 c1 13 	call	0x2782	; 0x2782 <LCD_inlenumLatch>
    275e:	89 83       	std	Y+1, r24	; 0x01
    if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	81 30       	cpi	r24, 0x01	; 1
    2764:	19 f0       	breq	.+6      	; 0x276c <LCD_inlenumSendCommand+0x17c>
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <LCD_inlenumSendCommand+0x184>

#error"wrong LCD_MODE"

#endif

	Local_enumErrorState=ES_OK;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <LCD_inlenumLatch>:

static inline ES_T LCD_inlenumLatch(void)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	6e 97       	sbiw	r28, 0x1e	; 30
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
	ES_T Local_enumErrorState=ES_NOK;
    2796:	1d 8e       	std	Y+29, r1	; 0x1d

	Local_enumErrorState=DIO_enumSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	64 e0       	ldi	r22, 0x04	; 4
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    27a2:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    27a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	19 f0       	breq	.+6      	; 0x27b0 <LCD_inlenumLatch+0x2e>
    27aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ac:	8e 8f       	std	Y+30, r24	; 0x1e
    27ae:	f4 c0       	rjmp	.+488    	; 0x2998 <LCD_inlenumLatch+0x216>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e4       	ldi	r27, 0x40	; 64
    27b8:	89 8f       	std	Y+25, r24	; 0x19
    27ba:	9a 8f       	std	Y+26, r25	; 0x1a
    27bc:	ab 8f       	std	Y+27, r26	; 0x1b
    27be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	69 8d       	ldd	r22, Y+25	; 0x19
    27c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	53 e4       	ldi	r21, 0x43	; 67
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8d 8b       	std	Y+21, r24	; 0x15
    27da:	9e 8b       	std	Y+22, r25	; 0x16
    27dc:	af 8b       	std	Y+23, r26	; 0x17
    27de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e0:	6d 89       	ldd	r22, Y+21	; 0x15
    27e2:	7e 89       	ldd	r23, Y+22	; 0x16
    27e4:	8f 89       	ldd	r24, Y+23	; 0x17
    27e6:	98 8d       	ldd	r25, Y+24	; 0x18
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <LCD_inlenumLatch+0x80>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9c 8b       	std	Y+20, r25	; 0x14
    27fe:	8b 8b       	std	Y+19, r24	; 0x13
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <LCD_inlenumLatch+0xfe>
	else if (__tmp > 65535)
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	4c f5       	brge	.+82     	; 0x286c <LCD_inlenumLatch+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281a:	69 8d       	ldd	r22, Y+25	; 0x19
    281c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9c 8b       	std	Y+20, r25	; 0x14
    2840:	8b 8b       	std	Y+19, r24	; 0x13
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <LCD_inlenumLatch+0xe0>
    2844:	89 e1       	ldi	r24, 0x19	; 25
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9a 8b       	std	Y+18, r25	; 0x12
    284a:	89 8b       	std	Y+17, r24	; 0x11
    284c:	89 89       	ldd	r24, Y+17	; 0x11
    284e:	9a 89       	ldd	r25, Y+18	; 0x12
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_inlenumLatch+0xce>
    2854:	9a 8b       	std	Y+18, r25	; 0x12
    2856:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	69 f7       	brne	.-38     	; 0x2844 <LCD_inlenumLatch+0xc2>
    286a:	14 c0       	rjmp	.+40     	; 0x2894 <LCD_inlenumLatch+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286c:	6d 89       	ldd	r22, Y+21	; 0x15
    286e:	7e 89       	ldd	r23, Y+22	; 0x16
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	8b 89       	ldd	r24, Y+19	; 0x13
    2882:	9c 89       	ldd	r25, Y+20	; 0x14
    2884:	98 8b       	std	Y+16, r25	; 0x10
    2886:	8f 87       	std	Y+15, r24	; 0x0f
    2888:	8f 85       	ldd	r24, Y+15	; 0x0f
    288a:	98 89       	ldd	r25, Y+16	; 0x10
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_inlenumLatch+0x10a>
    2890:	98 8b       	std	Y+16, r25	; 0x10
    2892:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Local_enumErrorState=DIO_enumSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	64 e0       	ldi	r22, 0x04	; 4
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    289e:	8d 8f       	std	Y+29, r24	; 0x1d
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    28a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	19 f0       	breq	.+6      	; 0x28ac <LCD_inlenumLatch+0x12a>
    28a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a8:	8e 8f       	std	Y+30, r24	; 0x1e
    28aa:	76 c0       	rjmp	.+236    	; 0x2998 <LCD_inlenumLatch+0x216>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 ea       	ldi	r26, 0xA0	; 160
    28b2:	b0 e4       	ldi	r27, 0x40	; 64
    28b4:	8b 87       	std	Y+11, r24	; 0x0b
    28b6:	9c 87       	std	Y+12, r25	; 0x0c
    28b8:	ad 87       	std	Y+13, r26	; 0x0d
    28ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a e7       	ldi	r20, 0x7A	; 122
    28ca:	53 e4       	ldi	r21, 0x43	; 67
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	8f 83       	std	Y+7, r24	; 0x07
    28d6:	98 87       	std	Y+8, r25	; 0x08
    28d8:	a9 87       	std	Y+9, r26	; 0x09
    28da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28dc:	6f 81       	ldd	r22, Y+7	; 0x07
    28de:	78 85       	ldd	r23, Y+8	; 0x08
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_inlenumLatch+0x17c>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_inlenumLatch+0x1fa>
	else if (__tmp > 65535)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_inlenumLatch+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	6b 85       	ldd	r22, Y+11	; 0x0b
    2918:	7c 85       	ldd	r23, Y+12	; 0x0c
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_inlenumLatch+0x1dc>
    2940:	89 e1       	ldi	r24, 0x19	; 25
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c 83       	std	Y+4, r25	; 0x04
    2946:	8b 83       	std	Y+3, r24	; 0x03
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_inlenumLatch+0x1ca>
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_inlenumLatch+0x1be>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_inlenumLatch+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	6f 81       	ldd	r22, Y+7	; 0x07
    296a:	78 85       	ldd	r23, Y+8	; 0x08
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_inlenumLatch+0x206>
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	Local_enumErrorState=ES_OK;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_enumErrorState;
    2994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2996:	8e 8f       	std	Y+30, r24	; 0x1e
    2998:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    299a:	6e 96       	adiw	r28, 0x1e	; 30
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <LCD_enumSendChar>:

ES_T LCD_enumSendChar(u8 Copy_u8Char)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <LCD_enumSendChar+0x6>
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    29b8:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=LCD_inlenumSendChar(Copy_u8Char);
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    29c0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_inlenumSendChar>:

static inline ES_T LCD_inlenumSendChar(u8 Copy_u8Char)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <LCD_inlenumSendChar+0x6>
    29d4:	0f 92       	push	r0
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    29dc:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=DIO_enumSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	66 e0       	ldi	r22, 0x06	; 6
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    29e8:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <LCD_inlenumSendChar+0x28>
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	8b 83       	std	Y+3, r24	; 0x03
    29f4:	ac c0       	rjmp	.+344    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	64 e0       	ldi	r22, 0x04	; 4
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2a00:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <LCD_inlenumSendChar+0x40>
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	a0 c0       	rjmp	.+320    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	65 e0       	ldi	r22, 0x05	; 5
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2a18:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <LCD_inlenumSendChar+0x58>
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	8b 83       	std	Y+3, r24	; 0x03
    2a24:	94 c0       	rjmp	.+296    	; 0x2b4e <LCD_inlenumSendChar+0x180>

#if LCD_MODE == EIGHT_BIT

	Local_enumErrorState=DIO_enumSetPinValue(LCD_D7_PORT,LCD_D7_PIN,READ_BIT(Copy_u8Char,7));
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	98 2f       	mov	r25, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	99 27       	eor	r25, r25
    2a2e:	99 1f       	adc	r25, r25
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	49 2f       	mov	r20, r25
    2a36:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	19 f0       	breq	.+6      	; 0x2a48 <LCD_inlenumSendChar+0x7a>
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	83 c0       	rjmp	.+262    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D6_PORT,LCD_D6_PIN,READ_BIT(Copy_u8Char,6));
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	82 95       	swap	r24
    2a4c:	86 95       	lsr	r24
    2a4e:	86 95       	lsr	r24
    2a50:	83 70       	andi	r24, 0x03	; 3
    2a52:	98 2f       	mov	r25, r24
    2a54:	91 70       	andi	r25, 0x01	; 1
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	49 2f       	mov	r20, r25
    2a5c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2a60:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <LCD_inlenumSendChar+0xa0>
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	70 c0       	rjmp	.+224    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D5_PORT,LCD_D5_PIN,READ_BIT(Copy_u8Char,5));
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	82 95       	swap	r24
    2a72:	86 95       	lsr	r24
    2a74:	87 70       	andi	r24, 0x07	; 7
    2a76:	98 2f       	mov	r25, r24
    2a78:	91 70       	andi	r25, 0x01	; 1
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	49 2f       	mov	r20, r25
    2a80:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2a84:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	19 f0       	breq	.+6      	; 0x2a92 <LCD_inlenumSendChar+0xc4>
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
    2a90:	5e c0       	rjmp	.+188    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D4_PORT,LCD_D4_PIN,READ_BIT(Copy_u8Char,4));
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	82 95       	swap	r24
    2a96:	8f 70       	andi	r24, 0x0F	; 15
    2a98:	98 2f       	mov	r25, r24
    2a9a:	91 70       	andi	r25, 0x01	; 1
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	63 e0       	ldi	r22, 0x03	; 3
    2aa0:	49 2f       	mov	r20, r25
    2aa2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <LCD_inlenumSendChar+0xe6>
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
    2ab2:	4d c0       	rjmp	.+154    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D3_PORT,LCD_D3_PIN,READ_BIT(Copy_u8Char,3));
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	86 95       	lsr	r24
    2ab8:	86 95       	lsr	r24
    2aba:	86 95       	lsr	r24
    2abc:	98 2f       	mov	r25, r24
    2abe:	91 70       	andi	r25, 0x01	; 1
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	64 e0       	ldi	r22, 0x04	; 4
    2ac4:	49 2f       	mov	r20, r25
    2ac6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2aca:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	81 30       	cpi	r24, 0x01	; 1
    2ad0:	19 f0       	breq	.+6      	; 0x2ad8 <LCD_inlenumSendChar+0x10a>
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	3b c0       	rjmp	.+118    	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D2_PORT,LCD_D2_PIN,READ_BIT(Copy_u8Char,2));
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	86 95       	lsr	r24
    2adc:	86 95       	lsr	r24
    2ade:	98 2f       	mov	r25, r24
    2ae0:	91 70       	andi	r25, 0x01	; 1
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	65 e0       	ldi	r22, 0x05	; 5
    2ae6:	49 2f       	mov	r20, r25
    2ae8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2aec:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	19 f0       	breq	.+6      	; 0x2afa <LCD_inlenumSendChar+0x12c>
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    2af8:	2a c0       	rjmp	.+84     	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D1_PORT,LCD_D1_PIN,READ_BIT(Copy_u8Char,1));
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	86 95       	lsr	r24
    2afe:	98 2f       	mov	r25, r24
    2b00:	91 70       	andi	r25, 0x01	; 1
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	66 e0       	ldi	r22, 0x06	; 6
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	19 f0       	breq	.+6      	; 0x2b1a <LCD_inlenumSendChar+0x14c>
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	8b 83       	std	Y+3, r24	; 0x03
    2b18:	1a c0       	rjmp	.+52     	; 0x2b4e <LCD_inlenumSendChar+0x180>
	Local_enumErrorState=DIO_enumSetPinValue(LCD_D0_PORT,LCD_D0_PIN,READ_BIT(Copy_u8Char,0));
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	91 70       	andi	r25, 0x01	; 1
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	67 e0       	ldi	r22, 0x07	; 7
    2b24:	49 2f       	mov	r20, r25
    2b26:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    2b2a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	19 f0       	breq	.+6      	; 0x2b38 <LCD_inlenumSendChar+0x16a>
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	0b c0       	rjmp	.+22     	; 0x2b4e <LCD_inlenumSendChar+0x180>

	Local_enumErrorState=LCD_inlenumLatch();
    2b38:	0e 94 c1 13 	call	0x2782	; 0x2782 <LCD_inlenumLatch>
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <LCD_inlenumSendChar+0x17c>
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	8b 83       	std	Y+3, r24	; 0x03
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <LCD_inlenumSendChar+0x180>

#error"wrong LCD_MODE"

#endif

	return Local_enumErrorState;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	8b 83       	std	Y+3, r24	; 0x03
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <LCD_enumSendCommand>:

ES_T LCD_enumSendCommand(u8 Copy_u8Command)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <LCD_enumSendCommand+0x6>
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    2b68:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=LCD_inlenumSendCommand(Copy_u8Command);
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    2b70:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <LCD_enumSendString>:

ES_T LCD_enumSendString(u8* Copy_pu8String)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <LCD_enumSendString+0x6>
    2b84:	0f 92       	push	r0
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	9b 83       	std	Y+3, r25	; 0x03
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    2b8e:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=LCD_inlenumSendString(Copy_pu8String);
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_inlenumSendString>
    2b98:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <LCD_inlenumSendString>:

static inline ES_T LCD_inlenumSendString(u8* Copy_pu8String)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <LCD_inlenumSendString+0x6>
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <LCD_inlenumSendString+0x8>
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
    2bb8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8String!=NULL)
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	d1 f0       	breq	.+52     	; 0x2bf6 <LCD_inlenumSendString+0x4e>
	{
		for(;;Copy_pu8String++)
		{
			if(*Copy_pu8String!=0)
    2bc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 23       	and	r24, r24
    2bca:	91 f0       	breq	.+36     	; 0x2bf0 <LCD_inlenumSendString+0x48>
			{
				Local_enumErrorState=LCD_inlenumSendChar(*Copy_pu8String);
    2bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bce:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd0:	80 81       	ld	r24, Z
    2bd2:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2bd6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <LCD_inlenumSendString+0x3c>
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	8c 83       	std	Y+4, r24	; 0x04
    2be2:	0d c0       	rjmp	.+26     	; 0x2bfe <LCD_inlenumSendString+0x56>
{
	ES_T Local_enumErrorState=ES_NOK;

	if (Copy_pu8String!=NULL)
	{
		for(;;Copy_pu8String++)
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	e9 cf       	rjmp	.-46     	; 0x2bc2 <LCD_inlenumSendString+0x1a>
			else
			{
				break;
			}
		}
		Local_enumErrorState=ES_OK;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <LCD_inlenumSendString+0x52>
	}
	else
	{
		Local_enumErrorState=ES_NULL_POINTER;
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	8c 83       	std	Y+4, r24	; 0x04
    2bfe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <LCD_enumGoTOPosition>:

ES_T LCD_enumGoTOPosition(u8 Copy_u8Row,u8 Copy_u8Col)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <LCD_enumGoTOPosition+0x6>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <LCD_enumGoTOPosition+0x8>
    2c16:	0f 92       	push	r0
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
    2c1e:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
    2c20:	1a 82       	std	Y+2, r1	; 0x02

	if ((Copy_u8Row<=2&&Copy_u8Row>=1)&&(Copy_u8Col<=16&&Copy_u8Col>=1))
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	83 30       	cpi	r24, 0x03	; 3
    2c26:	70 f5       	brcc	.+92     	; 0x2c84 <LCD_enumGoTOPosition+0x76>
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	88 23       	and	r24, r24
    2c2c:	59 f1       	breq	.+86     	; 0x2c84 <LCD_enumGoTOPosition+0x76>
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	81 31       	cpi	r24, 0x11	; 17
    2c32:	40 f5       	brcc	.+80     	; 0x2c84 <LCD_enumGoTOPosition+0x76>
    2c34:	8c 81       	ldd	r24, Y+4	; 0x04
    2c36:	88 23       	and	r24, r24
    2c38:	29 f1       	breq	.+74     	; 0x2c84 <LCD_enumGoTOPosition+0x76>
	{
		u8 Local_u8Position=0;
    2c3a:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8Row==1)
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	79 f4       	brne	.+30     	; 0x2c60 <LCD_enumGoTOPosition+0x52>
		{
			Local_u8Position=0x80;
    2c42:	80 e8       	ldi	r24, 0x80	; 128
    2c44:	89 83       	std	Y+1, r24	; 0x01
			Local_enumErrorState=LCD_inlenumSendCommand(Local_u8Position+Copy_u8Col-1);
    2c46:	99 81       	ldd	r25, Y+1	; 0x01
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	89 0f       	add	r24, r25
    2c4c:	81 50       	subi	r24, 0x01	; 1
    2c4e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    2c52:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	b9 f0       	breq	.+46     	; 0x2c88 <LCD_enumGoTOPosition+0x7a>
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
    2c5e:	16 c0       	rjmp	.+44     	; 0x2c8c <LCD_enumGoTOPosition+0x7e>
		}
		else if (Copy_u8Row==2)
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	89 f4       	brne	.+34     	; 0x2c88 <LCD_enumGoTOPosition+0x7a>
		{
			Local_u8Position=0xC0;
    2c66:	80 ec       	ldi	r24, 0xC0	; 192
    2c68:	89 83       	std	Y+1, r24	; 0x01
			Local_enumErrorState=LCD_inlenumSendCommand(Local_u8Position+Copy_u8Col-1);
    2c6a:	99 81       	ldd	r25, Y+1	; 0x01
    2c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6e:	89 0f       	add	r24, r25
    2c70:	81 50       	subi	r24, 0x01	; 1
    2c72:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    2c76:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	29 f0       	breq	.+10     	; 0x2c88 <LCD_enumGoTOPosition+0x7a>
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <LCD_enumGoTOPosition+0x7e>
		}
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enumErrorState;
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <LCD_enumDisplayIntNum>:

ES_T LCD_enumDisplayIntNum(s64 Copy_s64Num)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	29 97       	sbiw	r28, 0x09	; 9
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	2a 83       	std	Y+2, r18	; 0x02
    2cb4:	3b 83       	std	Y+3, r19	; 0x03
    2cb6:	4c 83       	std	Y+4, r20	; 0x04
    2cb8:	5d 83       	std	Y+5, r21	; 0x05
    2cba:	6e 83       	std	Y+6, r22	; 0x06
    2cbc:	7f 83       	std	Y+7, r23	; 0x07
    2cbe:	88 87       	std	Y+8, r24	; 0x08
    2cc0:	99 87       	std	Y+9, r25	; 0x09
	ES_T Local_enumErrorState=ES_NOK;
    2cc2:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=LCD_inlenumDisplayIntNum(Copy_s64Num);
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	ac 81       	ldd	r26, Y+4	; 0x04
    2cca:	bd 81       	ldd	r27, Y+5	; 0x05
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 75 16 	call	0x2cea	; 0x2cea <LCD_inlenumDisplayIntNum>
    2cd4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd8:	29 96       	adiw	r28, 0x09	; 9
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <LCD_inlenumDisplayIntNum>:

static inline ES_T LCD_inlenumDisplayIntNum(s32 Copy_s64Num)
{
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	61 97       	sbiw	r28, 0x11	; 17
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	6d 87       	std	Y+13, r22	; 0x0d
    2d04:	7e 87       	std	Y+14, r23	; 0x0e
    2d06:	8f 87       	std	Y+15, r24	; 0x0f
    2d08:	98 8b       	std	Y+16, r25	; 0x10
	ES_T Local_enumErrorState=ES_NOK;
    2d0a:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_s64Num < 0)
    2d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d10:	af 85       	ldd	r26, Y+15	; 0x0f
    2d12:	b8 89       	ldd	r27, Y+16	; 0x10
    2d14:	bb 23       	and	r27, r27
    2d16:	cc f4       	brge	.+50     	; 0x2d4a <LCD_inlenumDisplayIntNum+0x60>
	{
		Local_enumErrorState=LCD_inlenumSendChar('-');
    2d18:	8d e2       	ldi	r24, 0x2D	; 45
    2d1a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <LCD_inlenumDisplayIntNum+0x42>
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	89 8b       	std	Y+17, r24	; 0x11
    2d2a:	77 c0       	rjmp	.+238    	; 0x2e1a <LCD_inlenumDisplayIntNum+0x130>
		Copy_s64Num *= -1;
    2d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d30:	af 85       	ldd	r26, Y+15	; 0x0f
    2d32:	b8 89       	ldd	r27, Y+16	; 0x10
    2d34:	b0 95       	com	r27
    2d36:	a0 95       	com	r26
    2d38:	90 95       	com	r25
    2d3a:	81 95       	neg	r24
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	af 4f       	sbci	r26, 0xFF	; 255
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	8d 87       	std	Y+13, r24	; 0x0d
    2d44:	9e 87       	std	Y+14, r25	; 0x0e
    2d46:	af 87       	std	Y+15, r26	; 0x0f
    2d48:	b8 8b       	std	Y+16, r27	; 0x10
	}

	u8 Local_Au8Buffer[10];
	u8 Local_u8Index = 0;
    2d4a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s64Num == 0)
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	af 85       	ldd	r26, Y+15	; 0x0f
    2d52:	b8 89       	ldd	r27, Y+16	; 0x10
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	a1 05       	cpc	r26, r1
    2d58:	b1 05       	cpc	r27, r1
    2d5a:	c9 f5       	brne	.+114    	; 0x2dce <LCD_inlenumDisplayIntNum+0xe4>
	{
		Local_enumErrorState=LCD_inlenumSendChar('0');
    2d5c:	80 e3       	ldi	r24, 0x30	; 48
    2d5e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2d62:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <LCD_inlenumDisplayIntNum+0x82>
    2d6a:	53 c0       	rjmp	.+166    	; 0x2e12 <LCD_inlenumDisplayIntNum+0x128>
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	89 8b       	std	Y+17, r24	; 0x11
    2d70:	54 c0       	rjmp	.+168    	; 0x2e1a <LCD_inlenumDisplayIntNum+0x130>
	}
	else
	{
		while(Copy_s64Num > 0)
		{
			Local_Au8Buffer[Local_u8Index++] = (Copy_s64Num % 10) + '0';
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	08 2f       	mov	r16, r24
    2d76:	10 e0       	ldi	r17, 0x00	; 0
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	af 85       	ldd	r26, Y+15	; 0x0f
    2d7e:	b8 89       	ldd	r27, Y+16	; 0x10
    2d80:	2a e0       	ldi	r18, 0x0A	; 10
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	50 e0       	ldi	r21, 0x00	; 0
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__divmodsi4>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	28 2f       	mov	r18, r24
    2d96:	20 5d       	subi	r18, 0xD0	; 208
    2d98:	ce 01       	movw	r24, r28
    2d9a:	03 96       	adiw	r24, 0x03	; 3
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	e0 0f       	add	r30, r16
    2da0:	f1 1f       	adc	r31, r17
    2da2:	20 83       	st	Z, r18
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	89 83       	std	Y+1, r24	; 0x01
			Copy_s64Num /= 10;
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	af 85       	ldd	r26, Y+15	; 0x0f
    2db0:	b8 89       	ldd	r27, Y+16	; 0x10
    2db2:	2a e0       	ldi	r18, 0x0A	; 10
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__divmodsi4>
    2dc2:	da 01       	movw	r26, r20
    2dc4:	c9 01       	movw	r24, r18
    2dc6:	8d 87       	std	Y+13, r24	; 0x0d
    2dc8:	9e 87       	std	Y+14, r25	; 0x0e
    2dca:	af 87       	std	Y+15, r26	; 0x0f
    2dcc:	b8 8b       	std	Y+16, r27	; 0x10
		Local_enumErrorState=LCD_inlenumSendChar('0');
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
	}
	else
	{
		while(Copy_s64Num > 0)
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	af 85       	ldd	r26, Y+15	; 0x0f
    2dd4:	b8 89       	ldd	r27, Y+16	; 0x10
    2dd6:	18 16       	cp	r1, r24
    2dd8:	19 06       	cpc	r1, r25
    2dda:	1a 06       	cpc	r1, r26
    2ddc:	1b 06       	cpc	r1, r27
    2dde:	4c f2       	brlt	.-110    	; 0x2d72 <LCD_inlenumDisplayIntNum+0x88>
    2de0:	15 c0       	rjmp	.+42     	; 0x2e0c <LCD_inlenumDisplayIntNum+0x122>
			Copy_s64Num /= 10;
		}

		while(Local_u8Index > 0)
		{
			Local_enumErrorState=LCD_inlenumSendChar(Local_Au8Buffer[--Local_u8Index]);
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	81 50       	subi	r24, 0x01	; 1
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	ce 01       	movw	r24, r28
    2df0:	03 96       	adiw	r24, 0x03	; 3
    2df2:	fc 01       	movw	r30, r24
    2df4:	e2 0f       	add	r30, r18
    2df6:	f3 1f       	adc	r31, r19
    2df8:	80 81       	ld	r24, Z
    2dfa:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	19 f0       	breq	.+6      	; 0x2e0c <LCD_inlenumDisplayIntNum+0x122>
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	89 8b       	std	Y+17, r24	; 0x11
    2e0a:	07 c0       	rjmp	.+14     	; 0x2e1a <LCD_inlenumDisplayIntNum+0x130>
		{
			Local_Au8Buffer[Local_u8Index++] = (Copy_s64Num % 10) + '0';
			Copy_s64Num /= 10;
		}

		while(Local_u8Index > 0)
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	88 23       	and	r24, r24
    2e10:	41 f7       	brne	.-48     	; 0x2de2 <LCD_inlenumDisplayIntNum+0xf8>
			Local_enumErrorState=LCD_inlenumSendChar(Local_Au8Buffer[--Local_u8Index]);
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
		}
	}

	Local_enumErrorState=ES_OK;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enumErrorState;
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	89 8b       	std	Y+17, r24	; 0x11
    2e1a:	89 89       	ldd	r24, Y+17	; 0x11
}
    2e1c:	61 96       	adiw	r28, 0x11	; 17
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	08 95       	ret

00002e32 <LCD_enumDisplayFloatNum>:

ES_T LCD_enumDisplayFloatNum(f32 Copy_f32Num)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	2f 97       	sbiw	r28, 0x0f	; 15
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	6b 87       	std	Y+11, r22	; 0x0b
    2e48:	7c 87       	std	Y+12, r23	; 0x0c
    2e4a:	8d 87       	std	Y+13, r24	; 0x0d
    2e4c:	9e 87       	std	Y+14, r25	; 0x0e
	ES_T Local_enumErrorState=ES_NOK;
    2e4e:	1a 86       	std	Y+10, r1	; 0x0a

	if(Copy_f32Num<0)
    2e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e64:	88 23       	and	r24, r24
    2e66:	9c f4       	brge	.+38     	; 0x2e8e <LCD_enumDisplayFloatNum+0x5c>
	{
		Local_enumErrorState=LCD_inlenumSendChar('-');
    2e68:	8d e2       	ldi	r24, 0x2D	; 45
    2e6a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2e6e:	8a 87       	std	Y+10, r24	; 0x0a
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	19 f0       	breq	.+6      	; 0x2e7c <LCD_enumDisplayFloatNum+0x4a>
    2e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e78:	8f 87       	std	Y+15, r24	; 0x0f
    2e7a:	9b c0       	rjmp	.+310    	; 0x2fb2 <LCD_enumDisplayFloatNum+0x180>
		Copy_f32Num*=-1;
    2e7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e80:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e82:	be 85       	ldd	r27, Y+14	; 0x0e
    2e84:	b0 58       	subi	r27, 0x80	; 128
    2e86:	8b 87       	std	Y+11, r24	; 0x0b
    2e88:	9c 87       	std	Y+12, r25	; 0x0c
    2e8a:	ad 87       	std	Y+13, r26	; 0x0d
    2e8c:	be 87       	std	Y+14, r27	; 0x0e
	}

	u16 Local_u16Left = (u16)Copy_f32Num;
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	99 87       	std	Y+9, r25	; 0x09
    2ea0:	88 87       	std	Y+8, r24	; 0x08

	Local_enumErrorState=LCD_inlenumDisplayIntNum(Local_u16Left);
    2ea2:	88 85       	ldd	r24, Y+8	; 0x08
    2ea4:	99 85       	ldd	r25, Y+9	; 0x09
    2ea6:	cc 01       	movw	r24, r24
    2ea8:	a0 e0       	ldi	r26, 0x00	; 0
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 75 16 	call	0x2cea	; 0x2cea <LCD_inlenumDisplayIntNum>
    2eb4:	8a 87       	std	Y+10, r24	; 0x0a
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	19 f0       	breq	.+6      	; 0x2ec2 <LCD_enumDisplayFloatNum+0x90>
    2ebc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ebe:	8f 87       	std	Y+15, r24	; 0x0f
    2ec0:	78 c0       	rjmp	.+240    	; 0x2fb2 <LCD_enumDisplayFloatNum+0x180>
	Local_enumErrorState=LCD_inlenumSendChar('.');
    2ec2:	8e e2       	ldi	r24, 0x2E	; 46
    2ec4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2ec8:	8a 87       	std	Y+10, r24	; 0x0a
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	19 f0       	breq	.+6      	; 0x2ed6 <LCD_enumDisplayFloatNum+0xa4>
    2ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed2:	8f 87       	std	Y+15, r24	; 0x0f
    2ed4:	6e c0       	rjmp	.+220    	; 0x2fb2 <LCD_enumDisplayFloatNum+0x180>

	f32 Local_f32Fraction=Copy_f32Num-(f32)Local_u16Left+.00005;
    2ed6:	88 85       	ldd	r24, Y+8	; 0x08
    2ed8:	99 85       	ldd	r25, Y+9	; 0x09
    2eda:	cc 01       	movw	r24, r24
    2edc:	a0 e0       	ldi	r26, 0x00	; 0
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2ee8:	9b 01       	movw	r18, r22
    2eea:	ac 01       	movw	r20, r24
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	27 e1       	ldi	r18, 0x17	; 23
    2f02:	37 eb       	ldi	r19, 0xB7	; 183
    2f04:	41 e5       	ldi	r20, 0x51	; 81
    2f06:	58 e3       	ldi	r21, 0x38	; 56
    2f08:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	8c 83       	std	Y+4, r24	; 0x04
    2f12:	9d 83       	std	Y+5, r25	; 0x05
    2f14:	ae 83       	std	Y+6, r26	; 0x06
    2f16:	bf 83       	std	Y+7, r27	; 0x07
	for (int i=0;i<4;i++)
    2f18:	1b 82       	std	Y+3, r1	; 0x03
    2f1a:	1a 82       	std	Y+2, r1	; 0x02
    2f1c:	42 c0       	rjmp	.+132    	; 0x2fa2 <LCD_enumDisplayFloatNum+0x170>
	{
		Local_f32Fraction *= 10;
    2f1e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f20:	7d 81       	ldd	r23, Y+5	; 0x05
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	9f 81       	ldd	r25, Y+7	; 0x07
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8c 83       	std	Y+4, r24	; 0x04
    2f38:	9d 83       	std	Y+5, r25	; 0x05
    2f3a:	ae 83       	std	Y+6, r26	; 0x06
    2f3c:	bf 83       	std	Y+7, r27	; 0x07
		u8 Local_u8Digit = (u8)Local_f32Fraction;
    2f3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f40:	7d 81       	ldd	r23, Y+5	; 0x05
    2f42:	8e 81       	ldd	r24, Y+6	; 0x06
    2f44:	9f 81       	ldd	r25, Y+7	; 0x07
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	89 83       	std	Y+1, r24	; 0x01
		Local_enumErrorState=LCD_inlenumSendChar(Local_u8Digit + '0');
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	80 5d       	subi	r24, 0xD0	; 208
    2f54:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    2f58:	8a 87       	std	Y+10, r24	; 0x0a
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    2f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	19 f0       	breq	.+6      	; 0x2f66 <LCD_enumDisplayFloatNum+0x134>
    2f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f62:	8f 87       	std	Y+15, r24	; 0x0f
    2f64:	26 c0       	rjmp	.+76     	; 0x2fb2 <LCD_enumDisplayFloatNum+0x180>
		Local_f32Fraction -= Local_u8Digit;
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	aa 27       	eor	r26, r26
    2f6e:	97 fd       	sbrc	r25, 7
    2f70:	a0 95       	com	r26
    2f72:	ba 2f       	mov	r27, r26
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2f7c:	9b 01       	movw	r18, r22
    2f7e:	ac 01       	movw	r20, r24
    2f80:	6c 81       	ldd	r22, Y+4	; 0x04
    2f82:	7d 81       	ldd	r23, Y+5	; 0x05
    2f84:	8e 81       	ldd	r24, Y+6	; 0x06
    2f86:	9f 81       	ldd	r25, Y+7	; 0x07
    2f88:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8c 83       	std	Y+4, r24	; 0x04
    2f92:	9d 83       	std	Y+5, r25	; 0x05
    2f94:	ae 83       	std	Y+6, r26	; 0x06
    2f96:	bf 83       	std	Y+7, r27	; 0x07
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
	Local_enumErrorState=LCD_inlenumSendChar('.');
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;

	f32 Local_f32Fraction=Copy_f32Num-(f32)Local_u16Left+.00005;
	for (int i=0;i<4;i++)
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa6:	84 30       	cpi	r24, 0x04	; 4
    2fa8:	91 05       	cpc	r25, r1
    2faa:	0c f4       	brge	.+2      	; 0x2fae <LCD_enumDisplayFloatNum+0x17c>
    2fac:	b8 cf       	rjmp	.-144    	; 0x2f1e <LCD_enumDisplayFloatNum+0xec>
		Local_enumErrorState=LCD_inlenumSendChar(Local_u8Digit + '0');
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
		Local_f32Fraction -= Local_u8Digit;
	}

	return Local_enumErrorState;
    2fae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fb0:	8f 87       	std	Y+15, r24	; 0x0f
    2fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2fb4:	2f 96       	adiw	r28, 0x0f	; 15
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <LCD_enumSendCustomChar>:

ES_T LCD_enumSendCustomChar(u8 Copy_u8Pos,u8* Copy_pu8Char)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <LCD_enumSendCustomChar+0x6>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <LCD_enumSendCustomChar+0x8>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <LCD_enumSendCustomChar+0xa>
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
    2fd6:	7d 83       	std	Y+5, r23	; 0x05
    2fd8:	6c 83       	std	Y+4, r22	; 0x04

	ES_T Local_enumErrorState=ES_NOK;
    2fda:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pu8Char!=NULL)
    2fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2fde:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <LCD_enumSendCustomChar+0x20>
    2fe4:	3e c0       	rjmp	.+124    	; 0x3062 <LCD_enumSendCustomChar+0x9c>
	{
		if(Copy_u8Pos<=7&&Copy_u8Pos>=0)
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	88 30       	cpi	r24, 0x08	; 8
    2fea:	c0 f5       	brcc	.+112    	; 0x305c <LCD_enumSendCustomChar+0x96>
		{
			u8 Local_u8Counter=0;
    2fec:	19 82       	std	Y+1, r1	; 0x01

			Local_enumErrorState=LCD_inlenumSendCommand(0x40+Copy_u8Pos*8);
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	08 96       	adiw	r24, 0x08	; 8
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    3006:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	19 f0       	breq	.+6      	; 0x3014 <LCD_enumSendCustomChar+0x4e>
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	8e 83       	std	Y+6, r24	; 0x06
    3012:	2b c0       	rjmp	.+86     	; 0x306a <LCD_enumSendCustomChar+0xa4>

			for (Local_u8Counter=0;Local_u8Counter< 8;Local_u8Counter++)
    3014:	19 82       	std	Y+1, r1	; 0x01
    3016:	15 c0       	rjmp	.+42     	; 0x3042 <LCD_enumSendCustomChar+0x7c>
			{
				Local_enumErrorState=LCD_inlenumSendChar(Copy_pu8Char[Local_u8Counter]);
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8c 81       	ldd	r24, Y+4	; 0x04
    3020:	9d 81       	ldd	r25, Y+5	; 0x05
    3022:	fc 01       	movw	r30, r24
    3024:	e2 0f       	add	r30, r18
    3026:	f3 1f       	adc	r31, r19
    3028:	80 81       	ld	r24, Z
    302a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_inlenumSendChar>
    302e:	8a 83       	std	Y+2, r24	; 0x02
				if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	19 f0       	breq	.+6      	; 0x303c <LCD_enumSendCustomChar+0x76>
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	8e 83       	std	Y+6, r24	; 0x06
    303a:	17 c0       	rjmp	.+46     	; 0x306a <LCD_enumSendCustomChar+0xa4>
			u8 Local_u8Counter=0;

			Local_enumErrorState=LCD_inlenumSendCommand(0x40+Copy_u8Pos*8);
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;

			for (Local_u8Counter=0;Local_u8Counter< 8;Local_u8Counter++)
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	89 83       	std	Y+1, r24	; 0x01
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	88 30       	cpi	r24, 0x08	; 8
    3046:	40 f3       	brcs	.-48     	; 0x3018 <LCD_enumSendCustomChar+0x52>
			{
				Local_enumErrorState=LCD_inlenumSendChar(Copy_pu8Char[Local_u8Counter]);
				if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
			}

			Local_enumErrorState=LCD_inlenumSendCommand(0x80);
    3048:	80 e8       	ldi	r24, 0x80	; 128
    304a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    304e:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	81 30       	cpi	r24, 0x01	; 1
    3054:	41 f0       	breq	.+16     	; 0x3066 <LCD_enumSendCustomChar+0xa0>
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	8e 83       	std	Y+6, r24	; 0x06
    305a:	07 c0       	rjmp	.+14     	; 0x306a <LCD_enumSendCustomChar+0xa4>
		}
		else
		{
			Local_enumErrorState=ES_OUT_OF_RANGE;
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <LCD_enumSendCustomChar+0xa0>
		}
	}
	else
	{
		Local_enumErrorState=ES_NULL_POINTER;
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enumErrorState;
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	8e 83       	std	Y+6, r24	; 0x06
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    306c:	26 96       	adiw	r28, 0x06	; 6
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LCD_enumClear>:

ES_T LCD_enumClear(void)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	0f 92       	push	r0
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enumErrorState=ES_NOK;
    3088:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=LCD_inlenumSendCommand(0x01);
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_inlenumSendCommand>
    3090:	89 83       	std	Y+1, r24	; 0x01

	return Local_enumErrorState;
    3092:	89 81       	ldd	r24, Y+1	; 0x01
}
    3094:	0f 90       	pop	r0
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <KEYPAD_enumInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "KEYPAD_priv.h"
#include "KEYPAD_config.h"

ES_T KEYPAD_enumInit(void)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <KEYPAD_enumInit+0x6>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enumErrorState=ES_NOK;
    30a6:	19 82       	std	Y+1, r1	; 0x01

	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_C0_PORT,KEYPAD_C0_PIN,OUTPUT);
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	41 e0       	ldi	r20, 0x01	; 1
    30ae:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    30b2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	19 f0       	breq	.+6      	; 0x30c0 <KEYPAD_enumInit+0x24>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8a 83       	std	Y+2, r24	; 0x02
    30be:	b6 c0       	rjmp	.+364    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_C1_PORT,KEYPAD_C1_PIN,OUTPUT);
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    30ca:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <KEYPAD_enumInit+0x3c>
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	8a 83       	std	Y+2, r24	; 0x02
    30d6:	aa c0       	rjmp	.+340    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_C2_PORT,KEYPAD_C2_PIN,OUTPUT);
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	62 e0       	ldi	r22, 0x02	; 2
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    30e2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	81 30       	cpi	r24, 0x01	; 1
    30e8:	19 f0       	breq	.+6      	; 0x30f0 <KEYPAD_enumInit+0x54>
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	8a 83       	std	Y+2, r24	; 0x02
    30ee:	9e c0       	rjmp	.+316    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_C3_PORT,KEYPAD_C3_PIN,OUTPUT);
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	63 e0       	ldi	r22, 0x03	; 3
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    30fa:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	19 f0       	breq	.+6      	; 0x3108 <KEYPAD_enumInit+0x6c>
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	8a 83       	std	Y+2, r24	; 0x02
    3106:	92 c0       	rjmp	.+292    	; 0x322c <KEYPAD_enumInit+0x190>

	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,HIGH);
    3108:	83 e0       	ldi	r24, 0x03	; 3
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    3112:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	19 f0       	breq	.+6      	; 0x3120 <KEYPAD_enumInit+0x84>
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	8a 83       	std	Y+2, r24	; 0x02
    311e:	86 c0       	rjmp	.+268    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,HIGH);
    3120:	83 e0       	ldi	r24, 0x03	; 3
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	41 e0       	ldi	r20, 0x01	; 1
    3126:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    312a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	81 30       	cpi	r24, 0x01	; 1
    3130:	19 f0       	breq	.+6      	; 0x3138 <KEYPAD_enumInit+0x9c>
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	8a 83       	std	Y+2, r24	; 0x02
    3136:	7a c0       	rjmp	.+244    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,HIGH);
    3138:	83 e0       	ldi	r24, 0x03	; 3
    313a:	62 e0       	ldi	r22, 0x02	; 2
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    3142:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	19 f0       	breq	.+6      	; 0x3150 <KEYPAD_enumInit+0xb4>
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	8a 83       	std	Y+2, r24	; 0x02
    314e:	6e c0       	rjmp	.+220    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,HIGH);
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	63 e0       	ldi	r22, 0x03	; 3
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    315a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	19 f0       	breq	.+6      	; 0x3168 <KEYPAD_enumInit+0xcc>
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	8a 83       	std	Y+2, r24	; 0x02
    3166:	62 c0       	rjmp	.+196    	; 0x322c <KEYPAD_enumInit+0x190>

	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_R0_PORT,KEYPAD_R0_PIN,INPUT);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    3172:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	19 f0       	breq	.+6      	; 0x3180 <KEYPAD_enumInit+0xe4>
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8a 83       	std	Y+2, r24	; 0x02
    317e:	56 c0       	rjmp	.+172    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_R1_PORT,KEYPAD_R1_PIN,INPUT);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	61 e0       	ldi	r22, 0x01	; 1
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    318a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	19 f0       	breq	.+6      	; 0x3198 <KEYPAD_enumInit+0xfc>
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	8a 83       	std	Y+2, r24	; 0x02
    3196:	4a c0       	rjmp	.+148    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_R2_PORT,KEYPAD_R2_PIN,INPUT);
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	62 e0       	ldi	r22, 0x02	; 2
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    31a2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	19 f0       	breq	.+6      	; 0x31b0 <KEYPAD_enumInit+0x114>
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	8a 83       	std	Y+2, r24	; 0x02
    31ae:	3e c0       	rjmp	.+124    	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinDirection(KEYPAD_R3_PORT,KEYPAD_R3_PIN,INPUT);
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	63 e0       	ldi	r22, 0x03	; 3
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_enumSetPinDirection>
    31ba:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	19 f0       	breq	.+6      	; 0x31c8 <KEYPAD_enumInit+0x12c>
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	8a 83       	std	Y+2, r24	; 0x02
    31c6:	32 c0       	rjmp	.+100    	; 0x322c <KEYPAD_enumInit+0x190>

	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,PULL_UP);
    31c8:	82 e0       	ldi	r24, 0x02	; 2
    31ca:	60 e0       	ldi	r22, 0x00	; 0
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    31d2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	19 f0       	breq	.+6      	; 0x31e0 <KEYPAD_enumInit+0x144>
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	8a 83       	std	Y+2, r24	; 0x02
    31de:	26 c0       	rjmp	.+76     	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,PULL_UP);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	61 e0       	ldi	r22, 0x01	; 1
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    31ea:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	19 f0       	breq	.+6      	; 0x31f8 <KEYPAD_enumInit+0x15c>
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	8a 83       	std	Y+2, r24	; 0x02
    31f6:	1a c0       	rjmp	.+52     	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,PULL_UP);
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	62 e0       	ldi	r22, 0x02	; 2
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    3202:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	19 f0       	breq	.+6      	; 0x3210 <KEYPAD_enumInit+0x174>
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	8a 83       	std	Y+2, r24	; 0x02
    320e:	0e c0       	rjmp	.+28     	; 0x322c <KEYPAD_enumInit+0x190>
	Local_enumErrorState=DIO_enumSetPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,PULL_UP);
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	63 e0       	ldi	r22, 0x03	; 3
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    321a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	19 f0       	breq	.+6      	; 0x3228 <KEYPAD_enumInit+0x18c>
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	8a 83       	std	Y+2, r24	; 0x02
    3226:	02 c0       	rjmp	.+4      	; 0x322c <KEYPAD_enumInit+0x190>

	return Local_enumErrorState;
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	8a 83       	std	Y+2, r24	; 0x02
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <KEYPAD_enumGetPressedKey>:

ES_T KEYPAD_enumGetPressedKey(u8* Copy_pu8PressedKey)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	27 97       	sbiw	r28, 0x07	; 7
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
	ES_T Local_enumErrorState=ES_NOK;
    3250:	1b 82       	std	Y+3, r1	; 0x03
	static u8 Local_Au8RowPorts[KEYPAD_ROW_NUM]={KEYPAD_R0_PORT,KEYPAD_R1_PORT,KEYPAD_R2_PORT,KEYPAD_R3_PORT};
	static u8 Local_Au8RowPins[KEYPAD_ROW_NUM]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};

	static u8 Local_Au8KeysVal[KEYPAD_ROW_NUM][KEYPAD_COL_NUM]=KEYPAD_KEYS_VAL;

	*Copy_pu8PressedKey=KEYPAD_NO_KEY_PRESSED;
    3252:	ed 81       	ldd	r30, Y+5	; 0x05
    3254:	fe 81       	ldd	r31, Y+6	; 0x06
    3256:	8f ef       	ldi	r24, 0xFF	; 255
    3258:	80 83       	st	Z, r24

	u8 Local_u8ColCounter=0,Local_u8RowCounter=0,Local_u8PinVal;
    325a:	1a 82       	std	Y+2, r1	; 0x02
    325c:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8ColCounter=0;Local_u8ColCounter<KEYPAD_COL_NUM;Local_u8ColCounter++)
    325e:	1a 82       	std	Y+2, r1	; 0x02
    3260:	98 c0       	rjmp	.+304    	; 0x3392 <KEYPAD_enumGetPressedKey+0x15a>
	{
		Local_enumErrorState=DIO_enumSetPinValue (Local_Au8ColPorts[Local_u8ColCounter],Local_Au8ColPins[Local_u8ColCounter],LOW);
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	fc 01       	movw	r30, r24
    326a:	e6 55       	subi	r30, 0x56	; 86
    326c:	fe 4f       	sbci	r31, 0xFE	; 254
    326e:	20 81       	ld	r18, Z
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	fc 01       	movw	r30, r24
    3278:	ea 55       	subi	r30, 0x5A	; 90
    327a:	fe 4f       	sbci	r31, 0xFE	; 254
    327c:	90 81       	ld	r25, Z
    327e:	82 2f       	mov	r24, r18
    3280:	69 2f       	mov	r22, r25
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    3288:	8b 83       	std	Y+3, r24	; 0x03
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	81 30       	cpi	r24, 0x01	; 1
    328e:	19 f0       	breq	.+6      	; 0x3296 <KEYPAD_enumGetPressedKey+0x5e>
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	8f 83       	std	Y+7, r24	; 0x07
    3294:	84 c0       	rjmp	.+264    	; 0x339e <KEYPAD_enumGetPressedKey+0x166>

		for(Local_u8RowCounter=0;Local_u8RowCounter<KEYPAD_ROW_NUM;Local_u8RowCounter++)
    3296:	19 82       	std	Y+1, r1	; 0x01
    3298:	5b c0       	rjmp	.+182    	; 0x3350 <KEYPAD_enumGetPressedKey+0x118>
		{
			Local_enumErrorState=DIO_enumGetPinValue (Local_Au8RowPorts[Local_u8RowCounter],Local_Au8RowPins[Local_u8RowCounter],&Local_u8PinVal);
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	88 2f       	mov	r24, r24
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	fc 01       	movw	r30, r24
    32a2:	ee 55       	subi	r30, 0x5E	; 94
    32a4:	fe 4f       	sbci	r31, 0xFE	; 254
    32a6:	40 81       	ld	r20, Z
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	fc 01       	movw	r30, r24
    32b0:	e2 56       	subi	r30, 0x62	; 98
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	90 81       	ld	r25, Z
    32b6:	9e 01       	movw	r18, r28
    32b8:	2c 5f       	subi	r18, 0xFC	; 252
    32ba:	3f 4f       	sbci	r19, 0xFF	; 255
    32bc:	84 2f       	mov	r24, r20
    32be:	69 2f       	mov	r22, r25
    32c0:	a9 01       	movw	r20, r18
    32c2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_enumGetPinValue>
    32c6:	8b 83       	std	Y+3, r24	; 0x03
			if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    32c8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ca:	81 30       	cpi	r24, 0x01	; 1
    32cc:	19 f0       	breq	.+6      	; 0x32d4 <KEYPAD_enumGetPressedKey+0x9c>
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	8f 83       	std	Y+7, r24	; 0x07
    32d2:	65 c0       	rjmp	.+202    	; 0x339e <KEYPAD_enumGetPressedKey+0x166>

			if(LOW==Local_u8PinVal)
    32d4:	8c 81       	ldd	r24, Y+4	; 0x04
    32d6:	88 23       	and	r24, r24
    32d8:	c1 f5       	brne	.+112    	; 0x334a <KEYPAD_enumGetPressedKey+0x112>
			{
				*Copy_pu8PressedKey=Local_Au8KeysVal[Local_u8RowCounter][Local_u8ColCounter];
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	48 2f       	mov	r20, r24
    32de:	50 e0       	ldi	r21, 0x00	; 0
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	ca 01       	movw	r24, r20
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	82 0f       	add	r24, r18
    32f2:	93 1f       	adc	r25, r19
    32f4:	fc 01       	movw	r30, r24
    32f6:	e2 57       	subi	r30, 0x72	; 114
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	80 81       	ld	r24, Z
    32fc:	ed 81       	ldd	r30, Y+5	; 0x05
    32fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3300:	80 83       	st	Z, r24
    3302:	1d c0       	rjmp	.+58     	; 0x333e <KEYPAD_enumGetPressedKey+0x106>

				while(LOW==Local_u8PinVal)
				{
					Local_enumErrorState=DIO_enumGetPinValue (Local_Au8RowPorts[Local_u8RowCounter],Local_Au8RowPins[Local_u8RowCounter],&Local_u8PinVal);
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	88 2f       	mov	r24, r24
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	fc 01       	movw	r30, r24
    330c:	ee 55       	subi	r30, 0x5E	; 94
    330e:	fe 4f       	sbci	r31, 0xFE	; 254
    3310:	40 81       	ld	r20, Z
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	88 2f       	mov	r24, r24
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	fc 01       	movw	r30, r24
    331a:	e2 56       	subi	r30, 0x62	; 98
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	90 81       	ld	r25, Z
    3320:	9e 01       	movw	r18, r28
    3322:	2c 5f       	subi	r18, 0xFC	; 252
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	84 2f       	mov	r24, r20
    3328:	69 2f       	mov	r22, r25
    332a:	a9 01       	movw	r20, r18
    332c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <DIO_enumGetPinValue>
    3330:	8b 83       	std	Y+3, r24	; 0x03
					if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	19 f0       	breq	.+6      	; 0x333e <KEYPAD_enumGetPressedKey+0x106>
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	8f 83       	std	Y+7, r24	; 0x07
    333c:	30 c0       	rjmp	.+96     	; 0x339e <KEYPAD_enumGetPressedKey+0x166>

			if(LOW==Local_u8PinVal)
			{
				*Copy_pu8PressedKey=Local_Au8KeysVal[Local_u8RowCounter][Local_u8ColCounter];

				while(LOW==Local_u8PinVal)
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	88 23       	and	r24, r24
    3342:	01 f3       	breq	.-64     	; 0x3304 <KEYPAD_enumGetPressedKey+0xcc>
				{
					Local_enumErrorState=DIO_enumGetPinValue (Local_Au8RowPorts[Local_u8RowCounter],Local_Au8RowPins[Local_u8RowCounter],&Local_u8PinVal);
					if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
				}

				return Local_enumErrorState;
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	8f 83       	std	Y+7, r24	; 0x07
    3348:	2a c0       	rjmp	.+84     	; 0x339e <KEYPAD_enumGetPressedKey+0x166>
	for(Local_u8ColCounter=0;Local_u8ColCounter<KEYPAD_COL_NUM;Local_u8ColCounter++)
	{
		Local_enumErrorState=DIO_enumSetPinValue (Local_Au8ColPorts[Local_u8ColCounter],Local_Au8ColPins[Local_u8ColCounter],LOW);
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;

		for(Local_u8RowCounter=0;Local_u8RowCounter<KEYPAD_ROW_NUM;Local_u8RowCounter++)
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	84 30       	cpi	r24, 0x04	; 4
    3354:	08 f4       	brcc	.+2      	; 0x3358 <KEYPAD_enumGetPressedKey+0x120>
    3356:	a1 cf       	rjmp	.-190    	; 0x329a <KEYPAD_enumGetPressedKey+0x62>

				return Local_enumErrorState;
			}
		}

		Local_enumErrorState=DIO_enumSetPinValue (Local_Au8ColPorts[Local_u8ColCounter],Local_Au8ColPins[Local_u8ColCounter],HIGH);
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	fc 01       	movw	r30, r24
    3360:	e6 55       	subi	r30, 0x56	; 86
    3362:	fe 4f       	sbci	r31, 0xFE	; 254
    3364:	20 81       	ld	r18, Z
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	88 2f       	mov	r24, r24
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	fc 01       	movw	r30, r24
    336e:	ea 55       	subi	r30, 0x5A	; 90
    3370:	fe 4f       	sbci	r31, 0xFE	; 254
    3372:	90 81       	ld	r25, Z
    3374:	82 2f       	mov	r24, r18
    3376:	69 2f       	mov	r22, r25
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_enumSetPinValue>
    337e:	8b 83       	std	Y+3, r24	; 0x03
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	81 30       	cpi	r24, 0x01	; 1
    3384:	19 f0       	breq	.+6      	; 0x338c <KEYPAD_enumGetPressedKey+0x154>
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	8f 83       	std	Y+7, r24	; 0x07
    338a:	09 c0       	rjmp	.+18     	; 0x339e <KEYPAD_enumGetPressedKey+0x166>

	*Copy_pu8PressedKey=KEYPAD_NO_KEY_PRESSED;

	u8 Local_u8ColCounter=0,Local_u8RowCounter=0,Local_u8PinVal;

	for(Local_u8ColCounter=0;Local_u8ColCounter<KEYPAD_COL_NUM;Local_u8ColCounter++)
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	8f 5f       	subi	r24, 0xFF	; 255
    3390:	8a 83       	std	Y+2, r24	; 0x02
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	84 30       	cpi	r24, 0x04	; 4
    3396:	08 f4       	brcc	.+2      	; 0x339a <KEYPAD_enumGetPressedKey+0x162>
    3398:	64 cf       	rjmp	.-312    	; 0x3262 <KEYPAD_enumGetPressedKey+0x2a>

		Local_enumErrorState=DIO_enumSetPinValue (Local_Au8ColPorts[Local_u8ColCounter],Local_Au8ColPins[Local_u8ColCounter],HIGH);
		if(Local_enumErrorState!=ES_OK)return Local_enumErrorState;
	}

	return Local_enumErrorState;
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	8f 83       	std	Y+7, r24	; 0x07
    339e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    33a0:	27 96       	adiw	r28, 0x07	; 7
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <Calculator_voidStart>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/KEYPAD/KEYPAD_config.h"
#include "../HAL/KEYPAD/KEYPAD_int.h"

void Calculator_voidStart (void)
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	2f 97       	sbiw	r28, 0x0f	; 15
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
	KEYPAD_enumInit();
    33c6:	0e 94 4e 18 	call	0x309c	; 0x309c <KEYPAD_enumInit>
	u8 Local_u8OnOff=KEYPAD_NO_KEY_PRESSED;
    33ca:	8f ef       	ldi	r24, 0xFF	; 255
    33cc:	8f 87       	std	Y+15, r24	; 0x0f
	do
	{
		KEYPAD_enumGetPressedKey(&Local_u8OnOff);
    33ce:	ce 01       	movw	r24, r28
    33d0:	0f 96       	adiw	r24, 0x0f	; 15
    33d2:	0e 94 1c 19 	call	0x3238	; 0x3238 <KEYPAD_enumGetPressedKey>
	}while(Local_u8OnOff!='c');
    33d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d8:	83 36       	cpi	r24, 0x63	; 99
    33da:	c9 f7       	brne	.-14     	; 0x33ce <Calculator_voidStart+0x1c>

	LCD_enumInit();
    33dc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_enumInit>
	LCD_enumGoTOPosition(1,4);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	64 e0       	ldi	r22, 0x04	; 4
    33e4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_enumGoTOPosition>
	LCD_enumSendString("WELCOME!");
    33e8:	80 e6       	ldi	r24, 0x60	; 96
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enumSendString>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	aa e7       	ldi	r26, 0x7A	; 122
    33f6:	b4 e4       	ldi	r27, 0x44	; 68
    33f8:	8b 87       	std	Y+11, r24	; 0x0b
    33fa:	9c 87       	std	Y+12, r25	; 0x0c
    33fc:	ad 87       	std	Y+13, r26	; 0x0d
    33fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3400:	6b 85       	ldd	r22, Y+11	; 0x0b
    3402:	7c 85       	ldd	r23, Y+12	; 0x0c
    3404:	8d 85       	ldd	r24, Y+13	; 0x0d
    3406:	9e 85       	ldd	r25, Y+14	; 0x0e
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	4a e7       	ldi	r20, 0x7A	; 122
    340e:	53 e4       	ldi	r21, 0x43	; 67
    3410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8f 83       	std	Y+7, r24	; 0x07
    341a:	98 87       	std	Y+8, r25	; 0x08
    341c:	a9 87       	std	Y+9, r26	; 0x09
    341e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3420:	6f 81       	ldd	r22, Y+7	; 0x07
    3422:	78 85       	ldd	r23, Y+8	; 0x08
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e8       	ldi	r20, 0x80	; 128
    342e:	5f e3       	ldi	r21, 0x3F	; 63
    3430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3434:	88 23       	and	r24, r24
    3436:	2c f4       	brge	.+10     	; 0x3442 <Calculator_voidStart+0x90>
		__ticks = 1;
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9e 83       	std	Y+6, r25	; 0x06
    343e:	8d 83       	std	Y+5, r24	; 0x05
    3440:	3f c0       	rjmp	.+126    	; 0x34c0 <Calculator_voidStart+0x10e>
	else if (__tmp > 65535)
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3456:	18 16       	cp	r1, r24
    3458:	4c f5       	brge	.+82     	; 0x34ac <Calculator_voidStart+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345a:	6b 85       	ldd	r22, Y+11	; 0x0b
    345c:	7c 85       	ldd	r23, Y+12	; 0x0c
    345e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3460:	9e 85       	ldd	r25, Y+14	; 0x0e
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e2       	ldi	r20, 0x20	; 32
    3468:	51 e4       	ldi	r21, 0x41	; 65
    346a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	9e 83       	std	Y+6, r25	; 0x06
    3480:	8d 83       	std	Y+5, r24	; 0x05
    3482:	0f c0       	rjmp	.+30     	; 0x34a2 <Calculator_voidStart+0xf0>
    3484:	89 e1       	ldi	r24, 0x19	; 25
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9c 83       	std	Y+4, r25	; 0x04
    348a:	8b 83       	std	Y+3, r24	; 0x03
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <Calculator_voidStart+0xde>
    3494:	9c 83       	std	Y+4, r25	; 0x04
    3496:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3498:	8d 81       	ldd	r24, Y+5	; 0x05
    349a:	9e 81       	ldd	r25, Y+6	; 0x06
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	9e 83       	std	Y+6, r25	; 0x06
    34a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a2:	8d 81       	ldd	r24, Y+5	; 0x05
    34a4:	9e 81       	ldd	r25, Y+6	; 0x06
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	69 f7       	brne	.-38     	; 0x3484 <Calculator_voidStart+0xd2>
    34aa:	14 c0       	rjmp	.+40     	; 0x34d4 <Calculator_voidStart+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	9a 81       	ldd	r25, Y+2	; 0x02
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <Calculator_voidStart+0x11a>
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_enumClear();
    34d4:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_enumClear>
}
    34d8:	2f 96       	adiw	r28, 0x0f	; 15
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	08 95       	ret

000034ea <Calculator_pu8EnterExpression>:

u8* Calculator_pu8EnterExpression(void)
{
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <Calculator_pu8EnterExpression+0x6>
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <Calculator_pu8EnterExpression+0x8>
    34f2:	0f 92       	push	r0
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_Au8Expression[16];
	u8 Local_u8Counter=0;
    34f8:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		u8 Local_u8PressedKey=KEYPAD_NO_KEY_PRESSED;
    34fa:	8f ef       	ldi	r24, 0xFF	; 255
    34fc:	8a 83       	std	Y+2, r24	; 0x02
		do
		{
			KEYPAD_enumGetPressedKey(&Local_u8PressedKey);
    34fe:	ce 01       	movw	r24, r28
    3500:	02 96       	adiw	r24, 0x02	; 2
    3502:	0e 94 1c 19 	call	0x3238	; 0x3238 <KEYPAD_enumGetPressedKey>
		}while(Local_u8PressedKey==KEYPAD_NO_KEY_PRESSED);
    3506:	8a 81       	ldd	r24, Y+2	; 0x02
    3508:	8f 3f       	cpi	r24, 0xFF	; 255
    350a:	c9 f3       	breq	.-14     	; 0x34fe <Calculator_pu8EnterExpression+0x14>

		if(Local_u8PressedKey=='=')
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	8d 33       	cpi	r24, 0x3D	; 61
    3510:	29 f4       	brne	.+10     	; 0x351c <Calculator_pu8EnterExpression+0x32>
		{
			return Local_Au8Expression;
    3512:	8e ea       	ldi	r24, 0xAE	; 174
    3514:	91 e0       	ldi	r25, 0x01	; 1
    3516:	9d 83       	std	Y+5, r25	; 0x05
    3518:	8c 83       	std	Y+4, r24	; 0x04
    351a:	21 c0       	rjmp	.+66     	; 0x355e <Calculator_pu8EnterExpression+0x74>
		}

		LCD_enumSendChar(Local_u8PressedKey);
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <LCD_enumSendChar>

		Local_Au8Expression[Local_u8Counter]=Local_u8PressedKey;
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	2a 81       	ldd	r18, Y+2	; 0x02
    352a:	fc 01       	movw	r30, r24
    352c:	e2 55       	subi	r30, 0x52	; 82
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	20 83       	st	Z, r18
		Local_u8Counter++;
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	8f 5f       	subi	r24, 0xFF	; 255
    3536:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8Counter==16)
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	80 31       	cpi	r24, 0x10	; 16
    353c:	f1 f6       	brne	.-68     	; 0x34fa <Calculator_pu8EnterExpression+0x10>
		}
	}

	while (1)
	{
		u8 Local_u8PressedKey=KEYPAD_NO_KEY_PRESSED;
    353e:	8f ef       	ldi	r24, 0xFF	; 255
    3540:	8b 83       	std	Y+3, r24	; 0x03
		do
		{
			KEYPAD_enumGetPressedKey(&Local_u8PressedKey);
    3542:	ce 01       	movw	r24, r28
    3544:	03 96       	adiw	r24, 0x03	; 3
    3546:	0e 94 1c 19 	call	0x3238	; 0x3238 <KEYPAD_enumGetPressedKey>
		}while(Local_u8PressedKey==KEYPAD_NO_KEY_PRESSED);
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	8f 3f       	cpi	r24, 0xFF	; 255
    354e:	c9 f3       	breq	.-14     	; 0x3542 <Calculator_pu8EnterExpression+0x58>

		if(Local_u8PressedKey=='=')
    3550:	8b 81       	ldd	r24, Y+3	; 0x03
    3552:	8d 33       	cpi	r24, 0x3D	; 61
    3554:	a1 f7       	brne	.-24     	; 0x353e <Calculator_pu8EnterExpression+0x54>
		{
			return Local_Au8Expression;
    3556:	8e ea       	ldi	r24, 0xAE	; 174
    3558:	91 e0       	ldi	r25, 0x01	; 1
    355a:	9d 83       	std	Y+5, r25	; 0x05
    355c:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	9d 81       	ldd	r25, Y+5	; 0x05
}
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	cf 91       	pop	r28
    356e:	df 91       	pop	r29
    3570:	08 95       	ret

00003572 <Calculator_pu8SloveExpression>:

void Calculator_pu8SloveExpression(u8* Copy_pu8Expression)
{
    3572:	af 92       	push	r10
    3574:	bf 92       	push	r11
    3576:	cf 92       	push	r12
    3578:	df 92       	push	r13
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	e0 97       	sbiw	r28, 0x30	; 48
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	9c a7       	std	Y+44, r25	; 0x2c
    3598:	8b a7       	std	Y+43, r24	; 0x2b
	listentry Local_leTerm;
	Local_leTerm.Term=0;
    359a:	1b 82       	std	Y+3, r1	; 0x03
    359c:	1c 82       	std	Y+4, r1	; 0x04
    359e:	1d 82       	std	Y+5, r1	; 0x05
    35a0:	1e 82       	std	Y+6, r1	; 0x06
	listentry Local_leOP;
	u8 Local_u8IsNeg=0,Local_u8Counter=0;
    35a2:	1a 82       	std	Y+2, r1	; 0x02
    35a4:	19 82       	std	Y+1, r1	; 0x01
	plist Local_listTerms;
	createlist (&Local_listTerms);
    35a6:	ce 01       	movw	r24, r28
    35a8:	0b 96       	adiw	r24, 0x0b	; 11
    35aa:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <createlist>
	plist Local_listOPs;
	createlist (&Local_listOPs);
    35ae:	ce 01       	movw	r24, r28
    35b0:	0d 96       	adiw	r24, 0x0d	; 13
    35b2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <createlist>
	if(*Copy_pu8Expression=='-')
    35b6:	eb a5       	ldd	r30, Y+43	; 0x2b
    35b8:	fc a5       	ldd	r31, Y+44	; 0x2c
    35ba:	80 81       	ld	r24, Z
    35bc:	8d 32       	cpi	r24, 0x2D	; 45
    35be:	09 f0       	breq	.+2      	; 0x35c2 <Calculator_pu8SloveExpression+0x50>
    35c0:	ae c0       	rjmp	.+348    	; 0x371e <Calculator_pu8SloveExpression+0x1ac>
	{
		Local_u8IsNeg=1;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	8a 83       	std	Y+2, r24	; 0x02
		Copy_pu8Expression++;
    35c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	9c a7       	std	Y+44, r25	; 0x2c
    35ce:	8b a7       	std	Y+43, r24	; 0x2b
    35d0:	a6 c0       	rjmp	.+332    	; 0x371e <Calculator_pu8SloveExpression+0x1ac>
	}
	for(;*Copy_pu8Expression!=0;Copy_pu8Expression++)
	{
		if(*Copy_pu8Expression>='0'&&*Copy_pu8Expression<='9')
    35d2:	eb a5       	ldd	r30, Y+43	; 0x2b
    35d4:	fc a5       	ldd	r31, Y+44	; 0x2c
    35d6:	80 81       	ld	r24, Z
    35d8:	80 33       	cpi	r24, 0x30	; 48
    35da:	28 f1       	brcs	.+74     	; 0x3626 <Calculator_pu8SloveExpression+0xb4>
    35dc:	eb a5       	ldd	r30, Y+43	; 0x2b
    35de:	fc a5       	ldd	r31, Y+44	; 0x2c
    35e0:	80 81       	ld	r24, Z
    35e2:	8a 33       	cpi	r24, 0x3A	; 58
    35e4:	00 f5       	brcc	.+64     	; 0x3626 <Calculator_pu8SloveExpression+0xb4>
		{
			Local_leTerm.Term=Local_leTerm.Term*10+(*Copy_pu8Expression-'0');
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	ad 81       	ldd	r26, Y+5	; 0x05
    35ec:	be 81       	ldd	r27, Y+6	; 0x06
    35ee:	2a e0       	ldi	r18, 0x0A	; 10
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    35fe:	9b 01       	movw	r18, r22
    3600:	ac 01       	movw	r20, r24
    3602:	eb a5       	ldd	r30, Y+43	; 0x2b
    3604:	fc a5       	ldd	r31, Y+44	; 0x2c
    3606:	80 81       	ld	r24, Z
    3608:	88 2f       	mov	r24, r24
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	c0 97       	sbiw	r24, 0x30	; 48
    360e:	aa 27       	eor	r26, r26
    3610:	97 fd       	sbrc	r25, 7
    3612:	a0 95       	com	r26
    3614:	ba 2f       	mov	r27, r26
    3616:	82 0f       	add	r24, r18
    3618:	93 1f       	adc	r25, r19
    361a:	a4 1f       	adc	r26, r20
    361c:	b5 1f       	adc	r27, r21
    361e:	8b 83       	std	Y+3, r24	; 0x03
    3620:	9c 83       	std	Y+4, r25	; 0x04
    3622:	ad 83       	std	Y+5, r26	; 0x05
    3624:	be 83       	std	Y+6, r27	; 0x06
		}
		if(*Copy_pu8Expression=='-'&&(*(Copy_pu8Expression-1)=='+'||*(Copy_pu8Expression-1)=='-'||*(Copy_pu8Expression-1)=='*'||*(Copy_pu8Expression-1)=='/'))
    3626:	eb a5       	ldd	r30, Y+43	; 0x2b
    3628:	fc a5       	ldd	r31, Y+44	; 0x2c
    362a:	80 81       	ld	r24, Z
    362c:	8d 32       	cpi	r24, 0x2D	; 45
    362e:	19 f5       	brne	.+70     	; 0x3676 <Calculator_pu8SloveExpression+0x104>
    3630:	8b a5       	ldd	r24, Y+43	; 0x2b
    3632:	9c a5       	ldd	r25, Y+44	; 0x2c
    3634:	fc 01       	movw	r30, r24
    3636:	31 97       	sbiw	r30, 0x01	; 1
    3638:	80 81       	ld	r24, Z
    363a:	8b 32       	cpi	r24, 0x2B	; 43
    363c:	a9 f0       	breq	.+42     	; 0x3668 <Calculator_pu8SloveExpression+0xf6>
    363e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3640:	9c a5       	ldd	r25, Y+44	; 0x2c
    3642:	fc 01       	movw	r30, r24
    3644:	31 97       	sbiw	r30, 0x01	; 1
    3646:	80 81       	ld	r24, Z
    3648:	8d 32       	cpi	r24, 0x2D	; 45
    364a:	71 f0       	breq	.+28     	; 0x3668 <Calculator_pu8SloveExpression+0xf6>
    364c:	8b a5       	ldd	r24, Y+43	; 0x2b
    364e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3650:	fc 01       	movw	r30, r24
    3652:	31 97       	sbiw	r30, 0x01	; 1
    3654:	80 81       	ld	r24, Z
    3656:	8a 32       	cpi	r24, 0x2A	; 42
    3658:	39 f0       	breq	.+14     	; 0x3668 <Calculator_pu8SloveExpression+0xf6>
    365a:	8b a5       	ldd	r24, Y+43	; 0x2b
    365c:	9c a5       	ldd	r25, Y+44	; 0x2c
    365e:	fc 01       	movw	r30, r24
    3660:	31 97       	sbiw	r30, 0x01	; 1
    3662:	80 81       	ld	r24, Z
    3664:	8f 32       	cpi	r24, 0x2F	; 47
    3666:	39 f4       	brne	.+14     	; 0x3676 <Calculator_pu8SloveExpression+0x104>
		{
			Local_u8IsNeg=1;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	8a 83       	std	Y+2, r24	; 0x02
			Copy_pu8Expression++;
    366c:	8b a5       	ldd	r24, Y+43	; 0x2b
    366e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3670:	01 96       	adiw	r24, 0x01	; 1
    3672:	9c a7       	std	Y+44, r25	; 0x2c
    3674:	8b a7       	std	Y+43, r24	; 0x2b
		}
		if(*Copy_pu8Expression=='+'||*Copy_pu8Expression=='-'||*Copy_pu8Expression=='*'||*Copy_pu8Expression=='/')
    3676:	eb a5       	ldd	r30, Y+43	; 0x2b
    3678:	fc a5       	ldd	r31, Y+44	; 0x2c
    367a:	80 81       	ld	r24, Z
    367c:	8b 32       	cpi	r24, 0x2B	; 43
    367e:	79 f0       	breq	.+30     	; 0x369e <Calculator_pu8SloveExpression+0x12c>
    3680:	eb a5       	ldd	r30, Y+43	; 0x2b
    3682:	fc a5       	ldd	r31, Y+44	; 0x2c
    3684:	80 81       	ld	r24, Z
    3686:	8d 32       	cpi	r24, 0x2D	; 45
    3688:	51 f0       	breq	.+20     	; 0x369e <Calculator_pu8SloveExpression+0x12c>
    368a:	eb a5       	ldd	r30, Y+43	; 0x2b
    368c:	fc a5       	ldd	r31, Y+44	; 0x2c
    368e:	80 81       	ld	r24, Z
    3690:	8a 32       	cpi	r24, 0x2A	; 42
    3692:	29 f0       	breq	.+10     	; 0x369e <Calculator_pu8SloveExpression+0x12c>
    3694:	eb a5       	ldd	r30, Y+43	; 0x2b
    3696:	fc a5       	ldd	r31, Y+44	; 0x2c
    3698:	80 81       	ld	r24, Z
    369a:	8f 32       	cpi	r24, 0x2F	; 47
    369c:	d9 f5       	brne	.+118    	; 0x3714 <Calculator_pu8SloveExpression+0x1a2>
		{
			if(Local_u8IsNeg)
    369e:	8a 81       	ldd	r24, Y+2	; 0x02
    36a0:	88 23       	and	r24, r24
    36a2:	81 f0       	breq	.+32     	; 0x36c4 <Calculator_pu8SloveExpression+0x152>
			{
				Local_leTerm.Term*=-1;
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	ad 81       	ldd	r26, Y+5	; 0x05
    36aa:	be 81       	ldd	r27, Y+6	; 0x06
    36ac:	b0 95       	com	r27
    36ae:	a0 95       	com	r26
    36b0:	90 95       	com	r25
    36b2:	81 95       	neg	r24
    36b4:	9f 4f       	sbci	r25, 0xFF	; 255
    36b6:	af 4f       	sbci	r26, 0xFF	; 255
    36b8:	bf 4f       	sbci	r27, 0xFF	; 255
    36ba:	8b 83       	std	Y+3, r24	; 0x03
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	ad 83       	std	Y+5, r26	; 0x05
    36c0:	be 83       	std	Y+6, r27	; 0x06
				Local_u8IsNeg=0;
    36c2:	1a 82       	std	Y+2, r1	; 0x02
			}
			insertlist (Local_u8Counter,Local_leTerm,Local_listTerms);
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	88 2f       	mov	r24, r24
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    36cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    36ce:	2b 81       	ldd	r18, Y+3	; 0x03
    36d0:	3c 81       	ldd	r19, Y+4	; 0x04
    36d2:	4d 81       	ldd	r20, Y+5	; 0x05
    36d4:	5e 81       	ldd	r21, Y+6	; 0x06
    36d6:	ba 01       	movw	r22, r20
    36d8:	a9 01       	movw	r20, r18
    36da:	9f 01       	movw	r18, r30
    36dc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <insertlist>
			Local_leOP.OP=*Copy_pu8Expression;
    36e0:	eb a5       	ldd	r30, Y+43	; 0x2b
    36e2:	fc a5       	ldd	r31, Y+44	; 0x2c
    36e4:	80 81       	ld	r24, Z
    36e6:	8f 83       	std	Y+7, r24	; 0x07
			insertlist (Local_u8Counter++,Local_leOP,Local_listOPs);
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	68 2f       	mov	r22, r24
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	8f 5f       	subi	r24, 0xFF	; 255
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	ed 85       	ldd	r30, Y+13	; 0x0d
    36f6:	fe 85       	ldd	r31, Y+14	; 0x0e
    36f8:	2f 81       	ldd	r18, Y+7	; 0x07
    36fa:	38 85       	ldd	r19, Y+8	; 0x08
    36fc:	49 85       	ldd	r20, Y+9	; 0x09
    36fe:	5a 85       	ldd	r21, Y+10	; 0x0a
    3700:	cb 01       	movw	r24, r22
    3702:	ba 01       	movw	r22, r20
    3704:	a9 01       	movw	r20, r18
    3706:	9f 01       	movw	r18, r30
    3708:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <insertlist>
			Local_leTerm.Term=0;
    370c:	1b 82       	std	Y+3, r1	; 0x03
    370e:	1c 82       	std	Y+4, r1	; 0x04
    3710:	1d 82       	std	Y+5, r1	; 0x05
    3712:	1e 82       	std	Y+6, r1	; 0x06
	if(*Copy_pu8Expression=='-')
	{
		Local_u8IsNeg=1;
		Copy_pu8Expression++;
	}
	for(;*Copy_pu8Expression!=0;Copy_pu8Expression++)
    3714:	8b a5       	ldd	r24, Y+43	; 0x2b
    3716:	9c a5       	ldd	r25, Y+44	; 0x2c
    3718:	01 96       	adiw	r24, 0x01	; 1
    371a:	9c a7       	std	Y+44, r25	; 0x2c
    371c:	8b a7       	std	Y+43, r24	; 0x2b
    371e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3720:	fc a5       	ldd	r31, Y+44	; 0x2c
    3722:	80 81       	ld	r24, Z
    3724:	88 23       	and	r24, r24
    3726:	09 f0       	breq	.+2      	; 0x372a <Calculator_pu8SloveExpression+0x1b8>
    3728:	54 cf       	rjmp	.-344    	; 0x35d2 <Calculator_pu8SloveExpression+0x60>
			Local_leOP.OP=*Copy_pu8Expression;
			insertlist (Local_u8Counter++,Local_leOP,Local_listOPs);
			Local_leTerm.Term=0;
		}
	}
	for(Local_u8Counter=0;;Local_u8Counter++)
    372a:	19 82       	std	Y+1, r1	; 0x01
	{
		listentry Local_leOP,Local_leTerm1,Local_leTerm2;
		retrievelist (Local_u8Counter,&Local_leOP,Local_listOPs);
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	88 2f       	mov	r24, r24
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	4d 85       	ldd	r20, Y+13	; 0x0d
    3734:	5e 85       	ldd	r21, Y+14	; 0x0e
    3736:	9e 01       	movw	r18, r28
    3738:	2d 5e       	subi	r18, 0xED	; 237
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	b9 01       	movw	r22, r18
    373e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
		if(Local_leOP.OP==0)
    3742:	8b 89       	ldd	r24, Y+19	; 0x13
    3744:	88 23       	and	r24, r24
    3746:	09 f4       	brne	.+2      	; 0x374a <Calculator_pu8SloveExpression+0x1d8>
    3748:	b8 c0       	rjmp	.+368    	; 0x38ba <Calculator_pu8SloveExpression+0x348>
		{
			break;
		}
		switch(Local_leOP.OP)
    374a:	8b 89       	ldd	r24, Y+19	; 0x13
    374c:	e8 2e       	mov	r14, r24
    374e:	ff 24       	eor	r15, r15
    3750:	f8 aa       	std	Y+48, r15	; 0x30
    3752:	ef a6       	std	Y+47, r14	; 0x2f
    3754:	0f a5       	ldd	r16, Y+47	; 0x2f
    3756:	18 a9       	ldd	r17, Y+48	; 0x30
    3758:	0a 32       	cpi	r16, 0x2A	; 42
    375a:	11 05       	cpc	r17, r1
    375c:	39 f0       	breq	.+14     	; 0x376c <Calculator_pu8SloveExpression+0x1fa>
    375e:	2f a5       	ldd	r18, Y+47	; 0x2f
    3760:	38 a9       	ldd	r19, Y+48	; 0x30
    3762:	2f 32       	cpi	r18, 0x2F	; 47
    3764:	31 05       	cpc	r19, r1
    3766:	09 f4       	brne	.+2      	; 0x376a <Calculator_pu8SloveExpression+0x1f8>
    3768:	53 c0       	rjmp	.+166    	; 0x3810 <Calculator_pu8SloveExpression+0x29e>
    376a:	a3 c0       	rjmp	.+326    	; 0x38b2 <Calculator_pu8SloveExpression+0x340>
		{
		case '*':
			retrievelist (Local_u8Counter,&Local_leTerm1,Local_listTerms);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	4b 85       	ldd	r20, Y+11	; 0x0b
    3774:	5c 85       	ldd	r21, Y+12	; 0x0c
    3776:	9e 01       	movw	r18, r28
    3778:	29 5e       	subi	r18, 0xE9	; 233
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	b9 01       	movw	r22, r18
    377e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			retrievelist (Local_u8Counter+1,&Local_leTerm2,Local_listTerms);
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	4b 85       	ldd	r20, Y+11	; 0x0b
    378c:	5c 85       	ldd	r21, Y+12	; 0x0c
    378e:	9e 01       	movw	r18, r28
    3790:	25 5e       	subi	r18, 0xE5	; 229
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	b9 01       	movw	r22, r18
    3796:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			Local_leTerm1.Term=Local_leTerm1.Term*Local_leTerm2.Term;
    379a:	8f 89       	ldd	r24, Y+23	; 0x17
    379c:	98 8d       	ldd	r25, Y+24	; 0x18
    379e:	a9 8d       	ldd	r26, Y+25	; 0x19
    37a0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    37a2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    37a4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    37a6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    37a8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    37aa:	bc 01       	movw	r22, r24
    37ac:	cd 01       	movw	r24, r26
    37ae:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	8f 8b       	std	Y+23, r24	; 0x17
    37b8:	98 8f       	std	Y+24, r25	; 0x18
    37ba:	a9 8f       	std	Y+25, r26	; 0x19
    37bc:	ba 8f       	std	Y+26, r27	; 0x1a
			replacelist (Local_u8Counter,Local_leTerm1,Local_listTerms);
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    37c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    37c8:	2f 89       	ldd	r18, Y+23	; 0x17
    37ca:	38 8d       	ldd	r19, Y+24	; 0x18
    37cc:	49 8d       	ldd	r20, Y+25	; 0x19
    37ce:	5a 8d       	ldd	r21, Y+26	; 0x1a
    37d0:	ba 01       	movw	r22, r20
    37d2:	a9 01       	movw	r20, r18
    37d4:	9f 01       	movw	r18, r30
    37d6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <replacelist>
			deletlist (Local_u8Counter+1,&Local_leTerm1,Local_listTerms);
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	88 2f       	mov	r24, r24
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	01 96       	adiw	r24, 0x01	; 1
    37e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    37e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    37e6:	9e 01       	movw	r18, r28
    37e8:	29 5e       	subi	r18, 0xE9	; 233
    37ea:	3f 4f       	sbci	r19, 0xFF	; 255
    37ec:	b9 01       	movw	r22, r18
    37ee:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	88 2f       	mov	r24, r24
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	4d 85       	ldd	r20, Y+13	; 0x0d
    37fa:	5e 85       	ldd	r21, Y+14	; 0x0e
    37fc:	9e 01       	movw	r18, r28
    37fe:	2d 5e       	subi	r18, 0xED	; 237
    3800:	3f 4f       	sbci	r19, 0xFF	; 255
    3802:	b9 01       	movw	r22, r18
    3804:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			Local_u8Counter--;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	81 50       	subi	r24, 0x01	; 1
    380c:	89 83       	std	Y+1, r24	; 0x01
    380e:	51 c0       	rjmp	.+162    	; 0x38b2 <Calculator_pu8SloveExpression+0x340>
			break;
		case '/':
			retrievelist (Local_u8Counter,&Local_leTerm1,Local_listTerms);
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	4b 85       	ldd	r20, Y+11	; 0x0b
    3818:	5c 85       	ldd	r21, Y+12	; 0x0c
    381a:	9e 01       	movw	r18, r28
    381c:	29 5e       	subi	r18, 0xE9	; 233
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    3820:	b9 01       	movw	r22, r18
    3822:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			retrievelist (Local_u8Counter+1,&Local_leTerm2,Local_listTerms);
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	01 96       	adiw	r24, 0x01	; 1
    382e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3830:	5c 85       	ldd	r21, Y+12	; 0x0c
    3832:	9e 01       	movw	r18, r28
    3834:	25 5e       	subi	r18, 0xE5	; 229
    3836:	3f 4f       	sbci	r19, 0xFF	; 255
    3838:	b9 01       	movw	r22, r18
    383a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			Local_leTerm1.Term=Local_leTerm1.Term/Local_leTerm2.Term;
    383e:	8f 89       	ldd	r24, Y+23	; 0x17
    3840:	98 8d       	ldd	r25, Y+24	; 0x18
    3842:	a9 8d       	ldd	r26, Y+25	; 0x19
    3844:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3846:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3848:	3c 8d       	ldd	r19, Y+28	; 0x1c
    384a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    384c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__divmodsi4>
    3856:	da 01       	movw	r26, r20
    3858:	c9 01       	movw	r24, r18
    385a:	8f 8b       	std	Y+23, r24	; 0x17
    385c:	98 8f       	std	Y+24, r25	; 0x18
    385e:	a9 8f       	std	Y+25, r26	; 0x19
    3860:	ba 8f       	std	Y+26, r27	; 0x1a
			replacelist (Local_u8Counter,Local_leTerm1,Local_listTerms);
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	eb 85       	ldd	r30, Y+11	; 0x0b
    386a:	fc 85       	ldd	r31, Y+12	; 0x0c
    386c:	2f 89       	ldd	r18, Y+23	; 0x17
    386e:	38 8d       	ldd	r19, Y+24	; 0x18
    3870:	49 8d       	ldd	r20, Y+25	; 0x19
    3872:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3874:	ba 01       	movw	r22, r20
    3876:	a9 01       	movw	r20, r18
    3878:	9f 01       	movw	r18, r30
    387a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <replacelist>
			deletlist (Local_u8Counter+1,&Local_leTerm1,Local_listTerms);
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	88 2f       	mov	r24, r24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	01 96       	adiw	r24, 0x01	; 1
    3886:	4b 85       	ldd	r20, Y+11	; 0x0b
    3888:	5c 85       	ldd	r21, Y+12	; 0x0c
    388a:	9e 01       	movw	r18, r28
    388c:	29 5e       	subi	r18, 0xE9	; 233
    388e:	3f 4f       	sbci	r19, 0xFF	; 255
    3890:	b9 01       	movw	r22, r18
    3892:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	4d 85       	ldd	r20, Y+13	; 0x0d
    389e:	5e 85       	ldd	r21, Y+14	; 0x0e
    38a0:	9e 01       	movw	r18, r28
    38a2:	2d 5e       	subi	r18, 0xED	; 237
    38a4:	3f 4f       	sbci	r19, 0xFF	; 255
    38a6:	b9 01       	movw	r22, r18
    38a8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			Local_u8Counter--;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	81 50       	subi	r24, 0x01	; 1
    38b0:	89 83       	std	Y+1, r24	; 0x01
			Local_leOP.OP=*Copy_pu8Expression;
			insertlist (Local_u8Counter++,Local_leOP,Local_listOPs);
			Local_leTerm.Term=0;
		}
	}
	for(Local_u8Counter=0;;Local_u8Counter++)
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	89 83       	std	Y+1, r24	; 0x01
    38b8:	39 cf       	rjmp	.-398    	; 0x372c <Calculator_pu8SloveExpression+0x1ba>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
			Local_u8Counter--;
			break;
		}
	}
	for(Local_u8Counter=0;;Local_u8Counter++)
    38ba:	19 82       	std	Y+1, r1	; 0x01
	{
		listentry Local_leOP,Local_leTerm1,Local_leTerm2;
		retrievelist (Local_u8Counter,&Local_leOP,Local_listOPs);
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	88 2f       	mov	r24, r24
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	4d 85       	ldd	r20, Y+13	; 0x0d
    38c4:	5e 85       	ldd	r21, Y+14	; 0x0e
    38c6:	9e 01       	movw	r18, r28
    38c8:	21 5e       	subi	r18, 0xE1	; 225
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	b9 01       	movw	r22, r18
    38ce:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
		if(Local_leOP.OP==0)
    38d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38d4:	88 23       	and	r24, r24
    38d6:	09 f4       	brne	.+2      	; 0x38da <Calculator_pu8SloveExpression+0x368>
    38d8:	b8 c0       	rjmp	.+368    	; 0x3a4a <Calculator_pu8SloveExpression+0x4d8>
		{
			break;
		}
		switch(Local_leOP.OP)
    38da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38dc:	e8 2e       	mov	r14, r24
    38de:	ff 24       	eor	r15, r15
    38e0:	fe a6       	std	Y+46, r15	; 0x2e
    38e2:	ed a6       	std	Y+45, r14	; 0x2d
    38e4:	0d a5       	ldd	r16, Y+45	; 0x2d
    38e6:	1e a5       	ldd	r17, Y+46	; 0x2e
    38e8:	0b 32       	cpi	r16, 0x2B	; 43
    38ea:	11 05       	cpc	r17, r1
    38ec:	39 f0       	breq	.+14     	; 0x38fc <Calculator_pu8SloveExpression+0x38a>
    38ee:	2d a5       	ldd	r18, Y+45	; 0x2d
    38f0:	3e a5       	ldd	r19, Y+46	; 0x2e
    38f2:	2d 32       	cpi	r18, 0x2D	; 45
    38f4:	31 05       	cpc	r19, r1
    38f6:	09 f4       	brne	.+2      	; 0x38fa <Calculator_pu8SloveExpression+0x388>
    38f8:	51 c0       	rjmp	.+162    	; 0x399c <Calculator_pu8SloveExpression+0x42a>
    38fa:	a3 c0       	rjmp	.+326    	; 0x3a42 <Calculator_pu8SloveExpression+0x4d0>
		{
		case '+':
			retrievelist (Local_u8Counter,&Local_leTerm1,Local_listTerms);
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	88 2f       	mov	r24, r24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	4b 85       	ldd	r20, Y+11	; 0x0b
    3904:	5c 85       	ldd	r21, Y+12	; 0x0c
    3906:	9e 01       	movw	r18, r28
    3908:	2d 5d       	subi	r18, 0xDD	; 221
    390a:	3f 4f       	sbci	r19, 0xFF	; 255
    390c:	b9 01       	movw	r22, r18
    390e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			retrievelist (Local_u8Counter+1,&Local_leTerm2,Local_listTerms);
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	88 2f       	mov	r24, r24
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	01 96       	adiw	r24, 0x01	; 1
    391a:	4b 85       	ldd	r20, Y+11	; 0x0b
    391c:	5c 85       	ldd	r21, Y+12	; 0x0c
    391e:	9e 01       	movw	r18, r28
    3920:	29 5d       	subi	r18, 0xD9	; 217
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	b9 01       	movw	r22, r18
    3926:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			Local_leTerm1.Term=Local_leTerm1.Term+Local_leTerm2.Term;
    392a:	2b a1       	ldd	r18, Y+35	; 0x23
    392c:	3c a1       	ldd	r19, Y+36	; 0x24
    392e:	4d a1       	ldd	r20, Y+37	; 0x25
    3930:	5e a1       	ldd	r21, Y+38	; 0x26
    3932:	8f a1       	ldd	r24, Y+39	; 0x27
    3934:	98 a5       	ldd	r25, Y+40	; 0x28
    3936:	a9 a5       	ldd	r26, Y+41	; 0x29
    3938:	ba a5       	ldd	r27, Y+42	; 0x2a
    393a:	82 0f       	add	r24, r18
    393c:	93 1f       	adc	r25, r19
    393e:	a4 1f       	adc	r26, r20
    3940:	b5 1f       	adc	r27, r21
    3942:	8b a3       	std	Y+35, r24	; 0x23
    3944:	9c a3       	std	Y+36, r25	; 0x24
    3946:	ad a3       	std	Y+37, r26	; 0x25
    3948:	be a3       	std	Y+38, r27	; 0x26
			replacelist (Local_u8Counter,Local_leTerm1,Local_listTerms);
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	88 2f       	mov	r24, r24
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	eb 85       	ldd	r30, Y+11	; 0x0b
    3952:	fc 85       	ldd	r31, Y+12	; 0x0c
    3954:	2b a1       	ldd	r18, Y+35	; 0x23
    3956:	3c a1       	ldd	r19, Y+36	; 0x24
    3958:	4d a1       	ldd	r20, Y+37	; 0x25
    395a:	5e a1       	ldd	r21, Y+38	; 0x26
    395c:	ba 01       	movw	r22, r20
    395e:	a9 01       	movw	r20, r18
    3960:	9f 01       	movw	r18, r30
    3962:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <replacelist>
			deletlist (Local_u8Counter+1,&Local_leTerm1,Local_listTerms);
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	88 2f       	mov	r24, r24
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	01 96       	adiw	r24, 0x01	; 1
    396e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3970:	5c 85       	ldd	r21, Y+12	; 0x0c
    3972:	9e 01       	movw	r18, r28
    3974:	2d 5d       	subi	r18, 0xDD	; 221
    3976:	3f 4f       	sbci	r19, 0xFF	; 255
    3978:	b9 01       	movw	r22, r18
    397a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	88 2f       	mov	r24, r24
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	4d 85       	ldd	r20, Y+13	; 0x0d
    3986:	5e 85       	ldd	r21, Y+14	; 0x0e
    3988:	9e 01       	movw	r18, r28
    398a:	21 5e       	subi	r18, 0xE1	; 225
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	b9 01       	movw	r22, r18
    3990:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			Local_u8Counter--;
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	81 50       	subi	r24, 0x01	; 1
    3998:	89 83       	std	Y+1, r24	; 0x01
    399a:	53 c0       	rjmp	.+166    	; 0x3a42 <Calculator_pu8SloveExpression+0x4d0>
			break;
		case '-':
			retrievelist (Local_u8Counter,&Local_leTerm1,Local_listTerms);
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    39a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    39a6:	9e 01       	movw	r18, r28
    39a8:	2d 5d       	subi	r18, 0xDD	; 221
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	b9 01       	movw	r22, r18
    39ae:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			retrievelist (Local_u8Counter+1,&Local_leTerm2,Local_listTerms);
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    39bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    39be:	9e 01       	movw	r18, r28
    39c0:	29 5d       	subi	r18, 0xD9	; 217
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	b9 01       	movw	r22, r18
    39c6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
			Local_leTerm1.Term=Local_leTerm1.Term-Local_leTerm2.Term;
    39ca:	2b a1       	ldd	r18, Y+35	; 0x23
    39cc:	3c a1       	ldd	r19, Y+36	; 0x24
    39ce:	4d a1       	ldd	r20, Y+37	; 0x25
    39d0:	5e a1       	ldd	r21, Y+38	; 0x26
    39d2:	8f a1       	ldd	r24, Y+39	; 0x27
    39d4:	98 a5       	ldd	r25, Y+40	; 0x28
    39d6:	a9 a5       	ldd	r26, Y+41	; 0x29
    39d8:	ba a5       	ldd	r27, Y+42	; 0x2a
    39da:	79 01       	movw	r14, r18
    39dc:	8a 01       	movw	r16, r20
    39de:	e8 1a       	sub	r14, r24
    39e0:	f9 0a       	sbc	r15, r25
    39e2:	0a 0b       	sbc	r16, r26
    39e4:	1b 0b       	sbc	r17, r27
    39e6:	d8 01       	movw	r26, r16
    39e8:	c7 01       	movw	r24, r14
    39ea:	8b a3       	std	Y+35, r24	; 0x23
    39ec:	9c a3       	std	Y+36, r25	; 0x24
    39ee:	ad a3       	std	Y+37, r26	; 0x25
    39f0:	be a3       	std	Y+38, r27	; 0x26
			replacelist (Local_u8Counter,Local_leTerm1,Local_listTerms);
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	eb 85       	ldd	r30, Y+11	; 0x0b
    39fa:	fc 85       	ldd	r31, Y+12	; 0x0c
    39fc:	2b a1       	ldd	r18, Y+35	; 0x23
    39fe:	3c a1       	ldd	r19, Y+36	; 0x24
    3a00:	4d a1       	ldd	r20, Y+37	; 0x25
    3a02:	5e a1       	ldd	r21, Y+38	; 0x26
    3a04:	ba 01       	movw	r22, r20
    3a06:	a9 01       	movw	r20, r18
    3a08:	9f 01       	movw	r18, r30
    3a0a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <replacelist>
			deletlist (Local_u8Counter+1,&Local_leTerm1,Local_listTerms);
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	88 2f       	mov	r24, r24
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	01 96       	adiw	r24, 0x01	; 1
    3a16:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a18:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a1a:	9e 01       	movw	r18, r28
    3a1c:	2d 5d       	subi	r18, 0xDD	; 221
    3a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a20:	b9 01       	movw	r22, r18
    3a22:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	88 2f       	mov	r24, r24
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a2e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a30:	9e 01       	movw	r18, r28
    3a32:	21 5e       	subi	r18, 0xE1	; 225
    3a34:	3f 4f       	sbci	r19, 0xFF	; 255
    3a36:	b9 01       	movw	r22, r18
    3a38:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <deletlist>
			Local_u8Counter--;
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	81 50       	subi	r24, 0x01	; 1
    3a40:	89 83       	std	Y+1, r24	; 0x01
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
			Local_u8Counter--;
			break;
		}
	}
	for(Local_u8Counter=0;;Local_u8Counter++)
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	8f 5f       	subi	r24, 0xFF	; 255
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	39 cf       	rjmp	.-398    	; 0x38bc <Calculator_pu8SloveExpression+0x34a>
			deletlist (Local_u8Counter,&Local_leOP,Local_listOPs);
			Local_u8Counter--;
			break;
		}
	}
	LCD_enumGoTOPosition(2,1);
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_enumGoTOPosition>
	listentry Local_leResult;
	retrievelist (0,&Local_leResult,Local_listTerms);
    3a52:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a54:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a56:	9e 01       	movw	r18, r28
    3a58:	21 5f       	subi	r18, 0xF1	; 241
    3a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	b9 01       	movw	r22, r18
    3a62:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <retrievelist>
	LCD_enumDisplayIntNum(Local_leResult.Term);
    3a66:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a68:	38 89       	ldd	r19, Y+16	; 0x10
    3a6a:	49 89       	ldd	r20, Y+17	; 0x11
    3a6c:	5a 89       	ldd	r21, Y+18	; 0x12
    3a6e:	da 01       	movw	r26, r20
    3a70:	c9 01       	movw	r24, r18
    3a72:	bb 0f       	add	r27, r27
    3a74:	88 0b       	sbc	r24, r24
    3a76:	98 2f       	mov	r25, r24
    3a78:	dc 01       	movw	r26, r24
    3a7a:	59 01       	movw	r10, r18
    3a7c:	6a 01       	movw	r12, r20
    3a7e:	e8 2e       	mov	r14, r24
    3a80:	f8 2e       	mov	r15, r24
    3a82:	08 2f       	mov	r16, r24
    3a84:	18 2f       	mov	r17, r24
    3a86:	2a 2d       	mov	r18, r10
    3a88:	3b 2d       	mov	r19, r11
    3a8a:	4c 2d       	mov	r20, r12
    3a8c:	5d 2d       	mov	r21, r13
    3a8e:	6e 2d       	mov	r22, r14
    3a90:	7f 2d       	mov	r23, r15
    3a92:	80 2f       	mov	r24, r16
    3a94:	91 2f       	mov	r25, r17
    3a96:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_enumDisplayIntNum>
}
    3a9a:	e0 96       	adiw	r28, 0x30	; 48
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	df 90       	pop	r13
    3ab4:	cf 90       	pop	r12
    3ab6:	bf 90       	pop	r11
    3ab8:	af 90       	pop	r10
    3aba:	08 95       	ret

00003abc <main>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/KEYPAD/KEYPAD_config.h"
#include "../HAL/KEYPAD/KEYPAD_int.h"
#include "../APP/Calculator_int.h"

int main() {
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	ac 97       	sbiw	r28, 0x2c	; 44
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	cd bf       	out	0x3d, r28	; 61
    char input[16];
    char operator;
    int num1 = 0, num2 = 0, result = 0;
    3ad0:	1e 8a       	std	Y+22, r1	; 0x16
    3ad2:	1d 8a       	std	Y+21, r1	; 0x15
    3ad4:	1c 8a       	std	Y+20, r1	; 0x14
    3ad6:	1b 8a       	std	Y+19, r1	; 0x13
    3ad8:	1a 8a       	std	Y+18, r1	; 0x12
    3ada:	19 8a       	std	Y+17, r1	; 0x11
    int index = 0;
    3adc:	18 8a       	std	Y+16, r1	; 0x10
    3ade:	1f 86       	std	Y+15, r1	; 0x0f

    LCD_enumInit();
    3ae0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_enumInit>
    KEYPAD_enumInit();
    3ae4:	0e 94 4e 18 	call	0x309c	; 0x309c <KEYPAD_enumInit>
    LCD_enumClear();
    3ae8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_enumClear>
    LCD_enumSendString("Simple Calc");
    3aec:	89 e6       	ldi	r24, 0x69	; 105
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enumSendString>

    while (1)
    {
        char key;
        KEYPAD_enumGetPressedKey(&key);
    3af4:	ce 01       	movw	r24, r28
    3af6:	88 96       	adiw	r24, 0x28	; 40
    3af8:	0e 94 1c 19 	call	0x3238	; 0x3238 <KEYPAD_enumGetPressedKey>

        // If a number is pressed
        if (key >= '0' && key <= '9') {
    3afc:	88 a5       	ldd	r24, Y+40	; 0x28
    3afe:	80 33       	cpi	r24, 0x30	; 48
    3b00:	28 f1       	brcs	.+74     	; 0x3b4c <main+0x90>
    3b02:	88 a5       	ldd	r24, Y+40	; 0x28
    3b04:	8a 33       	cpi	r24, 0x3A	; 58
    3b06:	10 f5       	brcc	.+68     	; 0x3b4c <main+0x90>
            if (index < 16 - 1) {
    3b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b0a:	98 89       	ldd	r25, Y+16	; 0x10
    3b0c:	8f 30       	cpi	r24, 0x0F	; 15
    3b0e:	91 05       	cpc	r25, r1
    3b10:	8c f7       	brge	.-30     	; 0x3af4 <main+0x38>
                input[index++] = key;
    3b12:	2f 85       	ldd	r18, Y+15	; 0x0f
    3b14:	38 89       	ldd	r19, Y+16	; 0x10
    3b16:	48 a5       	ldd	r20, Y+40	; 0x28
    3b18:	ce 01       	movw	r24, r28
    3b1a:	48 96       	adiw	r24, 0x18	; 24
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	40 83       	st	Z, r20
    3b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b26:	98 89       	ldd	r25, Y+16	; 0x10
    3b28:	01 96       	adiw	r24, 0x01	; 1
    3b2a:	98 8b       	std	Y+16, r25	; 0x10
    3b2c:	8f 87       	std	Y+15, r24	; 0x0f
                input[index] = '\0'; // Null-terminate the string
    3b2e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3b30:	38 89       	ldd	r19, Y+16	; 0x10
    3b32:	ce 01       	movw	r24, r28
    3b34:	48 96       	adiw	r24, 0x18	; 24
    3b36:	fc 01       	movw	r30, r24
    3b38:	e2 0f       	add	r30, r18
    3b3a:	f3 1f       	adc	r31, r19
    3b3c:	10 82       	st	Z, r1
                LCD_enumClear();
    3b3e:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_enumClear>
                LCD_enumSendString(input);
    3b42:	ce 01       	movw	r24, r28
    3b44:	48 96       	adiw	r24, 0x18	; 24
    3b46:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enumSendString>
    3b4a:	d4 cf       	rjmp	.-88     	; 0x3af4 <main+0x38>
            }
        }

        // If an operator is pressed
        else if (key == '+' || key == '-' || key == '*' || key == '/') {
    3b4c:	88 a5       	ldd	r24, Y+40	; 0x28
    3b4e:	8b 32       	cpi	r24, 0x2B	; 43
    3b50:	49 f0       	breq	.+18     	; 0x3b64 <main+0xa8>
    3b52:	88 a5       	ldd	r24, Y+40	; 0x28
    3b54:	8d 32       	cpi	r24, 0x2D	; 45
    3b56:	31 f0       	breq	.+12     	; 0x3b64 <main+0xa8>
    3b58:	88 a5       	ldd	r24, Y+40	; 0x28
    3b5a:	8a 32       	cpi	r24, 0x2A	; 42
    3b5c:	19 f0       	breq	.+6      	; 0x3b64 <main+0xa8>
    3b5e:	88 a5       	ldd	r24, Y+40	; 0x28
    3b60:	8f 32       	cpi	r24, 0x2F	; 47
    3b62:	61 f4       	brne	.+24     	; 0x3b7c <main+0xc0>
            num1 = atoi(input);
    3b64:	ce 01       	movw	r24, r28
    3b66:	48 96       	adiw	r24, 0x18	; 24
    3b68:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <atoi>
    3b6c:	9e 8b       	std	Y+22, r25	; 0x16
    3b6e:	8d 8b       	std	Y+21, r24	; 0x15
            operator = key;
    3b70:	88 a5       	ldd	r24, Y+40	; 0x28
    3b72:	8f 8b       	std	Y+23, r24	; 0x17
            index = 0; // Reset input for second number
    3b74:	18 8a       	std	Y+16, r1	; 0x10
    3b76:	1f 86       	std	Y+15, r1	; 0x0f
            input[0] = '\0'; // Clear input string
    3b78:	18 8e       	std	Y+24, r1	; 0x18
    3b7a:	bc cf       	rjmp	.-136    	; 0x3af4 <main+0x38>
        }

        // If '=' is pressed
        else if (key == '=') {
    3b7c:	88 a5       	ldd	r24, Y+40	; 0x28
    3b7e:	8d 33       	cpi	r24, 0x3D	; 61
    3b80:	09 f0       	breq	.+2      	; 0x3b84 <main+0xc8>
    3b82:	b8 cf       	rjmp	.-144    	; 0x3af4 <main+0x38>
            num2 = atoi(input);
    3b84:	ce 01       	movw	r24, r28
    3b86:	48 96       	adiw	r24, 0x18	; 24
    3b88:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <atoi>
    3b8c:	9c 8b       	std	Y+20, r25	; 0x14
    3b8e:	8b 8b       	std	Y+19, r24	; 0x13
            switch (operator) {
    3b90:	8f 89       	ldd	r24, Y+23	; 0x17
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	3c a7       	std	Y+44, r19	; 0x2c
    3b98:	2b a7       	std	Y+43, r18	; 0x2b
    3b9a:	4b a5       	ldd	r20, Y+43	; 0x2b
    3b9c:	5c a5       	ldd	r21, Y+44	; 0x2c
    3b9e:	4b 32       	cpi	r20, 0x2B	; 43
    3ba0:	51 05       	cpc	r21, r1
    3ba2:	b1 f0       	breq	.+44     	; 0x3bd0 <main+0x114>
    3ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ba8:	8c 32       	cpi	r24, 0x2C	; 44
    3baa:	91 05       	cpc	r25, r1
    3bac:	34 f4       	brge	.+12     	; 0x3bba <main+0xfe>
    3bae:	2b a5       	ldd	r18, Y+43	; 0x2b
    3bb0:	3c a5       	ldd	r19, Y+44	; 0x2c
    3bb2:	2a 32       	cpi	r18, 0x2A	; 42
    3bb4:	31 05       	cpc	r19, r1
    3bb6:	f1 f0       	breq	.+60     	; 0x3bf4 <main+0x138>
    3bb8:	41 c0       	rjmp	.+130    	; 0x3c3c <main+0x180>
    3bba:	4b a5       	ldd	r20, Y+43	; 0x2b
    3bbc:	5c a5       	ldd	r21, Y+44	; 0x2c
    3bbe:	4d 32       	cpi	r20, 0x2D	; 45
    3bc0:	51 05       	cpc	r21, r1
    3bc2:	79 f0       	breq	.+30     	; 0x3be2 <main+0x126>
    3bc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bc8:	8f 32       	cpi	r24, 0x2F	; 47
    3bca:	91 05       	cpc	r25, r1
    3bcc:	11 f1       	breq	.+68     	; 0x3c12 <main+0x156>
    3bce:	36 c0       	rjmp	.+108    	; 0x3c3c <main+0x180>
                case '+': result = num1 + num2; break;
    3bd0:	8d 89       	ldd	r24, Y+21	; 0x15
    3bd2:	9e 89       	ldd	r25, Y+22	; 0x16
    3bd4:	2b 89       	ldd	r18, Y+19	; 0x13
    3bd6:	3c 89       	ldd	r19, Y+20	; 0x14
    3bd8:	82 0f       	add	r24, r18
    3bda:	93 1f       	adc	r25, r19
    3bdc:	9a 8b       	std	Y+18, r25	; 0x12
    3bde:	89 8b       	std	Y+17, r24	; 0x11
    3be0:	2d c0       	rjmp	.+90     	; 0x3c3c <main+0x180>
                case '-': result = num1 - num2; break;
    3be2:	8d 89       	ldd	r24, Y+21	; 0x15
    3be4:	9e 89       	ldd	r25, Y+22	; 0x16
    3be6:	2b 89       	ldd	r18, Y+19	; 0x13
    3be8:	3c 89       	ldd	r19, Y+20	; 0x14
    3bea:	82 1b       	sub	r24, r18
    3bec:	93 0b       	sbc	r25, r19
    3bee:	9a 8b       	std	Y+18, r25	; 0x12
    3bf0:	89 8b       	std	Y+17, r24	; 0x11
    3bf2:	24 c0       	rjmp	.+72     	; 0x3c3c <main+0x180>
                case '*': result = num1 * num2; break;
    3bf4:	8d 89       	ldd	r24, Y+21	; 0x15
    3bf6:	9e 89       	ldd	r25, Y+22	; 0x16
    3bf8:	2b 89       	ldd	r18, Y+19	; 0x13
    3bfa:	3c 89       	ldd	r19, Y+20	; 0x14
    3bfc:	ac 01       	movw	r20, r24
    3bfe:	42 9f       	mul	r20, r18
    3c00:	c0 01       	movw	r24, r0
    3c02:	43 9f       	mul	r20, r19
    3c04:	90 0d       	add	r25, r0
    3c06:	52 9f       	mul	r21, r18
    3c08:	90 0d       	add	r25, r0
    3c0a:	11 24       	eor	r1, r1
    3c0c:	9a 8b       	std	Y+18, r25	; 0x12
    3c0e:	89 8b       	std	Y+17, r24	; 0x11
    3c10:	15 c0       	rjmp	.+42     	; 0x3c3c <main+0x180>
                case '/': result = (num2 != 0) ? num1 / num2 : 0; break;
    3c12:	8b 89       	ldd	r24, Y+19	; 0x13
    3c14:	9c 89       	ldd	r25, Y+20	; 0x14
    3c16:	00 97       	sbiw	r24, 0x00	; 0
    3c18:	59 f0       	breq	.+22     	; 0x3c30 <main+0x174>
    3c1a:	8d 89       	ldd	r24, Y+21	; 0x15
    3c1c:	9e 89       	ldd	r25, Y+22	; 0x16
    3c1e:	2b 89       	ldd	r18, Y+19	; 0x13
    3c20:	3c 89       	ldd	r19, Y+20	; 0x14
    3c22:	b9 01       	movw	r22, r18
    3c24:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__divmodhi4>
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9a a7       	std	Y+42, r25	; 0x2a
    3c2c:	89 a7       	std	Y+41, r24	; 0x29
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <main+0x178>
    3c30:	1a a6       	std	Y+42, r1	; 0x2a
    3c32:	19 a6       	std	Y+41, r1	; 0x29
    3c34:	89 a5       	ldd	r24, Y+41	; 0x29
    3c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c38:	9a 8b       	std	Y+18, r25	; 0x12
    3c3a:	89 8b       	std	Y+17, r24	; 0x11
            }
            LCD_enumClear();
    3c3c:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_enumClear>
            sprintf(input, "Result: %d", result);
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <main+0x186>
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <main+0x188>
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <main+0x18a>
    3c46:	ed b7       	in	r30, 0x3d	; 61
    3c48:	fe b7       	in	r31, 0x3e	; 62
    3c4a:	31 96       	adiw	r30, 0x01	; 1
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	48 96       	adiw	r24, 0x18	; 24
    3c50:	91 83       	std	Z+1, r25	; 0x01
    3c52:	80 83       	st	Z, r24
    3c54:	85 e7       	ldi	r24, 0x75	; 117
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	93 83       	std	Z+3, r25	; 0x03
    3c5a:	82 83       	std	Z+2, r24	; 0x02
    3c5c:	89 89       	ldd	r24, Y+17	; 0x11
    3c5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c60:	95 83       	std	Z+5, r25	; 0x05
    3c62:	84 83       	std	Z+4, r24	; 0x04
    3c64:	0e 94 a2 20 	call	0x4144	; 0x4144 <sprintf>
    3c68:	2d b7       	in	r18, 0x3d	; 61
    3c6a:	3e b7       	in	r19, 0x3e	; 62
    3c6c:	2a 5f       	subi	r18, 0xFA	; 250
    3c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	3e bf       	out	0x3e, r19	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	2d bf       	out	0x3d, r18	; 61
            LCD_enumSendString(input);
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	48 96       	adiw	r24, 0x18	; 24
    3c7e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enumSendString>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	aa ef       	ldi	r26, 0xFA	; 250
    3c88:	b4 e4       	ldi	r27, 0x44	; 68
    3c8a:	8b 87       	std	Y+11, r24	; 0x0b
    3c8c:	9c 87       	std	Y+12, r25	; 0x0c
    3c8e:	ad 87       	std	Y+13, r26	; 0x0d
    3c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	4a e7       	ldi	r20, 0x7A	; 122
    3ca0:	53 e4       	ldi	r21, 0x43	; 67
    3ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	8f 83       	std	Y+7, r24	; 0x07
    3cac:	98 87       	std	Y+8, r25	; 0x08
    3cae:	a9 87       	std	Y+9, r26	; 0x09
    3cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb4:	78 85       	ldd	r23, Y+8	; 0x08
    3cb6:	89 85       	ldd	r24, Y+9	; 0x09
    3cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e8       	ldi	r20, 0x80	; 128
    3cc0:	5f e3       	ldi	r21, 0x3F	; 63
    3cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cc6:	88 23       	and	r24, r24
    3cc8:	2c f4       	brge	.+10     	; 0x3cd4 <main+0x218>
		__ticks = 1;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	9e 83       	std	Y+6, r25	; 0x06
    3cd0:	8d 83       	std	Y+5, r24	; 0x05
    3cd2:	3f c0       	rjmp	.+126    	; 0x3d52 <main+0x296>
	else if (__tmp > 65535)
    3cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd6:	78 85       	ldd	r23, Y+8	; 0x08
    3cd8:	89 85       	ldd	r24, Y+9	; 0x09
    3cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	3f ef       	ldi	r19, 0xFF	; 255
    3ce0:	4f e7       	ldi	r20, 0x7F	; 127
    3ce2:	57 e4       	ldi	r21, 0x47	; 71
    3ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce8:	18 16       	cp	r1, r24
    3cea:	4c f5       	brge	.+82     	; 0x3d3e <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e2       	ldi	r20, 0x20	; 32
    3cfa:	51 e4       	ldi	r21, 0x41	; 65
    3cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	bc 01       	movw	r22, r24
    3d06:	cd 01       	movw	r24, r26
    3d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	8d 83       	std	Y+5, r24	; 0x05
    3d14:	0f c0       	rjmp	.+30     	; 0x3d34 <main+0x278>
    3d16:	89 e1       	ldi	r24, 0x19	; 25
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9c 83       	std	Y+4, r25	; 0x04
    3d1c:	8b 83       	std	Y+3, r24	; 0x03
    3d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d20:	9c 81       	ldd	r25, Y+4	; 0x04
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	f1 f7       	brne	.-4      	; 0x3d22 <main+0x266>
    3d26:	9c 83       	std	Y+4, r25	; 0x04
    3d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	9e 83       	std	Y+6, r25	; 0x06
    3d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	9e 81       	ldd	r25, Y+6	; 0x06
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	69 f7       	brne	.-38     	; 0x3d16 <main+0x25a>
    3d3c:	14 c0       	rjmp	.+40     	; 0x3d66 <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d40:	78 85       	ldd	r23, Y+8	; 0x08
    3d42:	89 85       	ldd	r24, Y+9	; 0x09
    3d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	9e 83       	std	Y+6, r25	; 0x06
    3d50:	8d 83       	std	Y+5, r24	; 0x05
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	f1 f7       	brne	.-4      	; 0x3d5e <main+0x2a2>
    3d62:	9a 83       	std	Y+2, r25	; 0x02
    3d64:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(2000); // Display result for a while
            LCD_enumClear();
    3d66:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_enumClear>
            LCD_enumSendString("Simple Calc");
    3d6a:	89 e6       	ldi	r24, 0x69	; 105
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enumSendString>
            index = 0; // Reset input for new calculation
    3d72:	18 8a       	std	Y+16, r1	; 0x10
    3d74:	1f 86       	std	Y+15, r1	; 0x0f
            input[0] = '\0'; // Clear input string
    3d76:	18 8e       	std	Y+24, r1	; 0x18
    3d78:	bd ce       	rjmp	.-646    	; 0x3af4 <main+0x38>

00003d7a <__mulsi3>:
    3d7a:	62 9f       	mul	r22, r18
    3d7c:	d0 01       	movw	r26, r0
    3d7e:	73 9f       	mul	r23, r19
    3d80:	f0 01       	movw	r30, r0
    3d82:	82 9f       	mul	r24, r18
    3d84:	e0 0d       	add	r30, r0
    3d86:	f1 1d       	adc	r31, r1
    3d88:	64 9f       	mul	r22, r20
    3d8a:	e0 0d       	add	r30, r0
    3d8c:	f1 1d       	adc	r31, r1
    3d8e:	92 9f       	mul	r25, r18
    3d90:	f0 0d       	add	r31, r0
    3d92:	83 9f       	mul	r24, r19
    3d94:	f0 0d       	add	r31, r0
    3d96:	74 9f       	mul	r23, r20
    3d98:	f0 0d       	add	r31, r0
    3d9a:	65 9f       	mul	r22, r21
    3d9c:	f0 0d       	add	r31, r0
    3d9e:	99 27       	eor	r25, r25
    3da0:	72 9f       	mul	r23, r18
    3da2:	b0 0d       	add	r27, r0
    3da4:	e1 1d       	adc	r30, r1
    3da6:	f9 1f       	adc	r31, r25
    3da8:	63 9f       	mul	r22, r19
    3daa:	b0 0d       	add	r27, r0
    3dac:	e1 1d       	adc	r30, r1
    3dae:	f9 1f       	adc	r31, r25
    3db0:	bd 01       	movw	r22, r26
    3db2:	cf 01       	movw	r24, r30
    3db4:	11 24       	eor	r1, r1
    3db6:	08 95       	ret

00003db8 <__divmodhi4>:
    3db8:	97 fb       	bst	r25, 7
    3dba:	09 2e       	mov	r0, r25
    3dbc:	07 26       	eor	r0, r23
    3dbe:	0a d0       	rcall	.+20     	; 0x3dd4 <__divmodhi4_neg1>
    3dc0:	77 fd       	sbrc	r23, 7
    3dc2:	04 d0       	rcall	.+8      	; 0x3dcc <__divmodhi4_neg2>
    3dc4:	27 d0       	rcall	.+78     	; 0x3e14 <__udivmodhi4>
    3dc6:	06 d0       	rcall	.+12     	; 0x3dd4 <__divmodhi4_neg1>
    3dc8:	00 20       	and	r0, r0
    3dca:	1a f4       	brpl	.+6      	; 0x3dd2 <__divmodhi4_exit>

00003dcc <__divmodhi4_neg2>:
    3dcc:	70 95       	com	r23
    3dce:	61 95       	neg	r22
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255

00003dd2 <__divmodhi4_exit>:
    3dd2:	08 95       	ret

00003dd4 <__divmodhi4_neg1>:
    3dd4:	f6 f7       	brtc	.-4      	; 0x3dd2 <__divmodhi4_exit>
    3dd6:	90 95       	com	r25
    3dd8:	81 95       	neg	r24
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	08 95       	ret

00003dde <__divmodsi4>:
    3dde:	97 fb       	bst	r25, 7
    3de0:	09 2e       	mov	r0, r25
    3de2:	05 26       	eor	r0, r21
    3de4:	0e d0       	rcall	.+28     	; 0x3e02 <__divmodsi4_neg1>
    3de6:	57 fd       	sbrc	r21, 7
    3de8:	04 d0       	rcall	.+8      	; 0x3df2 <__divmodsi4_neg2>
    3dea:	28 d0       	rcall	.+80     	; 0x3e3c <__udivmodsi4>
    3dec:	0a d0       	rcall	.+20     	; 0x3e02 <__divmodsi4_neg1>
    3dee:	00 1c       	adc	r0, r0
    3df0:	38 f4       	brcc	.+14     	; 0x3e00 <__divmodsi4_exit>

00003df2 <__divmodsi4_neg2>:
    3df2:	50 95       	com	r21
    3df4:	40 95       	com	r20
    3df6:	30 95       	com	r19
    3df8:	21 95       	neg	r18
    3dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfc:	4f 4f       	sbci	r20, 0xFF	; 255
    3dfe:	5f 4f       	sbci	r21, 0xFF	; 255

00003e00 <__divmodsi4_exit>:
    3e00:	08 95       	ret

00003e02 <__divmodsi4_neg1>:
    3e02:	f6 f7       	brtc	.-4      	; 0x3e00 <__divmodsi4_exit>
    3e04:	90 95       	com	r25
    3e06:	80 95       	com	r24
    3e08:	70 95       	com	r23
    3e0a:	61 95       	neg	r22
    3e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e10:	9f 4f       	sbci	r25, 0xFF	; 255
    3e12:	08 95       	ret

00003e14 <__udivmodhi4>:
    3e14:	aa 1b       	sub	r26, r26
    3e16:	bb 1b       	sub	r27, r27
    3e18:	51 e1       	ldi	r21, 0x11	; 17
    3e1a:	07 c0       	rjmp	.+14     	; 0x3e2a <__udivmodhi4_ep>

00003e1c <__udivmodhi4_loop>:
    3e1c:	aa 1f       	adc	r26, r26
    3e1e:	bb 1f       	adc	r27, r27
    3e20:	a6 17       	cp	r26, r22
    3e22:	b7 07       	cpc	r27, r23
    3e24:	10 f0       	brcs	.+4      	; 0x3e2a <__udivmodhi4_ep>
    3e26:	a6 1b       	sub	r26, r22
    3e28:	b7 0b       	sbc	r27, r23

00003e2a <__udivmodhi4_ep>:
    3e2a:	88 1f       	adc	r24, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	5a 95       	dec	r21
    3e30:	a9 f7       	brne	.-22     	; 0x3e1c <__udivmodhi4_loop>
    3e32:	80 95       	com	r24
    3e34:	90 95       	com	r25
    3e36:	bc 01       	movw	r22, r24
    3e38:	cd 01       	movw	r24, r26
    3e3a:	08 95       	ret

00003e3c <__udivmodsi4>:
    3e3c:	a1 e2       	ldi	r26, 0x21	; 33
    3e3e:	1a 2e       	mov	r1, r26
    3e40:	aa 1b       	sub	r26, r26
    3e42:	bb 1b       	sub	r27, r27
    3e44:	fd 01       	movw	r30, r26
    3e46:	0d c0       	rjmp	.+26     	; 0x3e62 <__udivmodsi4_ep>

00003e48 <__udivmodsi4_loop>:
    3e48:	aa 1f       	adc	r26, r26
    3e4a:	bb 1f       	adc	r27, r27
    3e4c:	ee 1f       	adc	r30, r30
    3e4e:	ff 1f       	adc	r31, r31
    3e50:	a2 17       	cp	r26, r18
    3e52:	b3 07       	cpc	r27, r19
    3e54:	e4 07       	cpc	r30, r20
    3e56:	f5 07       	cpc	r31, r21
    3e58:	20 f0       	brcs	.+8      	; 0x3e62 <__udivmodsi4_ep>
    3e5a:	a2 1b       	sub	r26, r18
    3e5c:	b3 0b       	sbc	r27, r19
    3e5e:	e4 0b       	sbc	r30, r20
    3e60:	f5 0b       	sbc	r31, r21

00003e62 <__udivmodsi4_ep>:
    3e62:	66 1f       	adc	r22, r22
    3e64:	77 1f       	adc	r23, r23
    3e66:	88 1f       	adc	r24, r24
    3e68:	99 1f       	adc	r25, r25
    3e6a:	1a 94       	dec	r1
    3e6c:	69 f7       	brne	.-38     	; 0x3e48 <__udivmodsi4_loop>
    3e6e:	60 95       	com	r22
    3e70:	70 95       	com	r23
    3e72:	80 95       	com	r24
    3e74:	90 95       	com	r25
    3e76:	9b 01       	movw	r18, r22
    3e78:	ac 01       	movw	r20, r24
    3e7a:	bd 01       	movw	r22, r26
    3e7c:	cf 01       	movw	r24, r30
    3e7e:	08 95       	ret

00003e80 <__prologue_saves__>:
    3e80:	2f 92       	push	r2
    3e82:	3f 92       	push	r3
    3e84:	4f 92       	push	r4
    3e86:	5f 92       	push	r5
    3e88:	6f 92       	push	r6
    3e8a:	7f 92       	push	r7
    3e8c:	8f 92       	push	r8
    3e8e:	9f 92       	push	r9
    3e90:	af 92       	push	r10
    3e92:	bf 92       	push	r11
    3e94:	cf 92       	push	r12
    3e96:	df 92       	push	r13
    3e98:	ef 92       	push	r14
    3e9a:	ff 92       	push	r15
    3e9c:	0f 93       	push	r16
    3e9e:	1f 93       	push	r17
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	ca 1b       	sub	r28, r26
    3eaa:	db 0b       	sbc	r29, r27
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	09 94       	ijmp

00003eb8 <__epilogue_restores__>:
    3eb8:	2a 88       	ldd	r2, Y+18	; 0x12
    3eba:	39 88       	ldd	r3, Y+17	; 0x11
    3ebc:	48 88       	ldd	r4, Y+16	; 0x10
    3ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eca:	b9 84       	ldd	r11, Y+9	; 0x09
    3ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    3ece:	df 80       	ldd	r13, Y+7	; 0x07
    3ed0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ed2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ed6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ed8:	aa 81       	ldd	r26, Y+2	; 0x02
    3eda:	b9 81       	ldd	r27, Y+1	; 0x01
    3edc:	ce 0f       	add	r28, r30
    3ede:	d1 1d       	adc	r29, r1
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61
    3eea:	ed 01       	movw	r28, r26
    3eec:	08 95       	ret

00003eee <malloc>:
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	bc 01       	movw	r22, r24
    3ef4:	82 30       	cpi	r24, 0x02	; 2
    3ef6:	91 05       	cpc	r25, r1
    3ef8:	10 f4       	brcc	.+4      	; 0x3efe <malloc+0x10>
    3efa:	62 e0       	ldi	r22, 0x02	; 2
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	a0 91 c0 01 	lds	r26, 0x01C0
    3f02:	b0 91 c1 01 	lds	r27, 0x01C1
    3f06:	ed 01       	movw	r28, r26
    3f08:	e0 e0       	ldi	r30, 0x00	; 0
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	40 e0       	ldi	r20, 0x00	; 0
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	21 c0       	rjmp	.+66     	; 0x3f54 <malloc+0x66>
    3f12:	88 81       	ld	r24, Y
    3f14:	99 81       	ldd	r25, Y+1	; 0x01
    3f16:	86 17       	cp	r24, r22
    3f18:	97 07       	cpc	r25, r23
    3f1a:	69 f4       	brne	.+26     	; 0x3f36 <malloc+0x48>
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f20:	30 97       	sbiw	r30, 0x00	; 0
    3f22:	19 f0       	breq	.+6      	; 0x3f2a <malloc+0x3c>
    3f24:	93 83       	std	Z+3, r25	; 0x03
    3f26:	82 83       	std	Z+2, r24	; 0x02
    3f28:	04 c0       	rjmp	.+8      	; 0x3f32 <malloc+0x44>
    3f2a:	90 93 c1 01 	sts	0x01C1, r25
    3f2e:	80 93 c0 01 	sts	0x01C0, r24
    3f32:	fe 01       	movw	r30, r28
    3f34:	34 c0       	rjmp	.+104    	; 0x3f9e <malloc+0xb0>
    3f36:	68 17       	cp	r22, r24
    3f38:	79 07       	cpc	r23, r25
    3f3a:	38 f4       	brcc	.+14     	; 0x3f4a <malloc+0x5c>
    3f3c:	41 15       	cp	r20, r1
    3f3e:	51 05       	cpc	r21, r1
    3f40:	19 f0       	breq	.+6      	; 0x3f48 <malloc+0x5a>
    3f42:	84 17       	cp	r24, r20
    3f44:	95 07       	cpc	r25, r21
    3f46:	08 f4       	brcc	.+2      	; 0x3f4a <malloc+0x5c>
    3f48:	ac 01       	movw	r20, r24
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f50:	9c 01       	movw	r18, r24
    3f52:	e9 01       	movw	r28, r18
    3f54:	20 97       	sbiw	r28, 0x00	; 0
    3f56:	e9 f6       	brne	.-70     	; 0x3f12 <malloc+0x24>
    3f58:	41 15       	cp	r20, r1
    3f5a:	51 05       	cpc	r21, r1
    3f5c:	a9 f1       	breq	.+106    	; 0x3fc8 <malloc+0xda>
    3f5e:	ca 01       	movw	r24, r20
    3f60:	86 1b       	sub	r24, r22
    3f62:	97 0b       	sbc	r25, r23
    3f64:	04 97       	sbiw	r24, 0x04	; 4
    3f66:	08 f4       	brcc	.+2      	; 0x3f6a <malloc+0x7c>
    3f68:	ba 01       	movw	r22, r20
    3f6a:	e0 e0       	ldi	r30, 0x00	; 0
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	2a c0       	rjmp	.+84     	; 0x3fc4 <malloc+0xd6>
    3f70:	8d 91       	ld	r24, X+
    3f72:	9c 91       	ld	r25, X
    3f74:	11 97       	sbiw	r26, 0x01	; 1
    3f76:	84 17       	cp	r24, r20
    3f78:	95 07       	cpc	r25, r21
    3f7a:	f9 f4       	brne	.+62     	; 0x3fba <malloc+0xcc>
    3f7c:	64 17       	cp	r22, r20
    3f7e:	75 07       	cpc	r23, r21
    3f80:	81 f4       	brne	.+32     	; 0x3fa2 <malloc+0xb4>
    3f82:	12 96       	adiw	r26, 0x02	; 2
    3f84:	8d 91       	ld	r24, X+
    3f86:	9c 91       	ld	r25, X
    3f88:	13 97       	sbiw	r26, 0x03	; 3
    3f8a:	30 97       	sbiw	r30, 0x00	; 0
    3f8c:	19 f0       	breq	.+6      	; 0x3f94 <malloc+0xa6>
    3f8e:	93 83       	std	Z+3, r25	; 0x03
    3f90:	82 83       	std	Z+2, r24	; 0x02
    3f92:	04 c0       	rjmp	.+8      	; 0x3f9c <malloc+0xae>
    3f94:	90 93 c1 01 	sts	0x01C1, r25
    3f98:	80 93 c0 01 	sts	0x01C0, r24
    3f9c:	fd 01       	movw	r30, r26
    3f9e:	32 96       	adiw	r30, 0x02	; 2
    3fa0:	4f c0       	rjmp	.+158    	; 0x4040 <malloc+0x152>
    3fa2:	ca 01       	movw	r24, r20
    3fa4:	86 1b       	sub	r24, r22
    3fa6:	97 0b       	sbc	r25, r23
    3fa8:	fd 01       	movw	r30, r26
    3faa:	e8 0f       	add	r30, r24
    3fac:	f9 1f       	adc	r31, r25
    3fae:	61 93       	st	Z+, r22
    3fb0:	71 93       	st	Z+, r23
    3fb2:	02 97       	sbiw	r24, 0x02	; 2
    3fb4:	8d 93       	st	X+, r24
    3fb6:	9c 93       	st	X, r25
    3fb8:	43 c0       	rjmp	.+134    	; 0x4040 <malloc+0x152>
    3fba:	fd 01       	movw	r30, r26
    3fbc:	82 81       	ldd	r24, Z+2	; 0x02
    3fbe:	93 81       	ldd	r25, Z+3	; 0x03
    3fc0:	9c 01       	movw	r18, r24
    3fc2:	d9 01       	movw	r26, r18
    3fc4:	10 97       	sbiw	r26, 0x00	; 0
    3fc6:	a1 f6       	brne	.-88     	; 0x3f70 <malloc+0x82>
    3fc8:	80 91 be 01 	lds	r24, 0x01BE
    3fcc:	90 91 bf 01 	lds	r25, 0x01BF
    3fd0:	89 2b       	or	r24, r25
    3fd2:	41 f4       	brne	.+16     	; 0x3fe4 <malloc+0xf6>
    3fd4:	80 91 8a 01 	lds	r24, 0x018A
    3fd8:	90 91 8b 01 	lds	r25, 0x018B
    3fdc:	90 93 bf 01 	sts	0x01BF, r25
    3fe0:	80 93 be 01 	sts	0x01BE, r24
    3fe4:	40 91 8c 01 	lds	r20, 0x018C
    3fe8:	50 91 8d 01 	lds	r21, 0x018D
    3fec:	41 15       	cp	r20, r1
    3fee:	51 05       	cpc	r21, r1
    3ff0:	41 f4       	brne	.+16     	; 0x4002 <malloc+0x114>
    3ff2:	4d b7       	in	r20, 0x3d	; 61
    3ff4:	5e b7       	in	r21, 0x3e	; 62
    3ff6:	80 91 88 01 	lds	r24, 0x0188
    3ffa:	90 91 89 01 	lds	r25, 0x0189
    3ffe:	48 1b       	sub	r20, r24
    4000:	59 0b       	sbc	r21, r25
    4002:	20 91 be 01 	lds	r18, 0x01BE
    4006:	30 91 bf 01 	lds	r19, 0x01BF
    400a:	24 17       	cp	r18, r20
    400c:	35 07       	cpc	r19, r21
    400e:	b0 f4       	brcc	.+44     	; 0x403c <malloc+0x14e>
    4010:	ca 01       	movw	r24, r20
    4012:	82 1b       	sub	r24, r18
    4014:	93 0b       	sbc	r25, r19
    4016:	86 17       	cp	r24, r22
    4018:	97 07       	cpc	r25, r23
    401a:	80 f0       	brcs	.+32     	; 0x403c <malloc+0x14e>
    401c:	ab 01       	movw	r20, r22
    401e:	4e 5f       	subi	r20, 0xFE	; 254
    4020:	5f 4f       	sbci	r21, 0xFF	; 255
    4022:	84 17       	cp	r24, r20
    4024:	95 07       	cpc	r25, r21
    4026:	50 f0       	brcs	.+20     	; 0x403c <malloc+0x14e>
    4028:	42 0f       	add	r20, r18
    402a:	53 1f       	adc	r21, r19
    402c:	50 93 bf 01 	sts	0x01BF, r21
    4030:	40 93 be 01 	sts	0x01BE, r20
    4034:	f9 01       	movw	r30, r18
    4036:	61 93       	st	Z+, r22
    4038:	71 93       	st	Z+, r23
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <malloc+0x152>
    403c:	e0 e0       	ldi	r30, 0x00	; 0
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	cf 01       	movw	r24, r30
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	08 95       	ret

00004048 <free>:
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	09 f4       	brne	.+2      	; 0x4052 <free+0xa>
    4050:	50 c0       	rjmp	.+160    	; 0x40f2 <free+0xaa>
    4052:	ec 01       	movw	r28, r24
    4054:	22 97       	sbiw	r28, 0x02	; 2
    4056:	1b 82       	std	Y+3, r1	; 0x03
    4058:	1a 82       	std	Y+2, r1	; 0x02
    405a:	a0 91 c0 01 	lds	r26, 0x01C0
    405e:	b0 91 c1 01 	lds	r27, 0x01C1
    4062:	10 97       	sbiw	r26, 0x00	; 0
    4064:	09 f1       	breq	.+66     	; 0x40a8 <free+0x60>
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	ac 17       	cp	r26, r28
    406c:	bd 07       	cpc	r27, r29
    406e:	08 f1       	brcs	.+66     	; 0x40b2 <free+0x6a>
    4070:	bb 83       	std	Y+3, r27	; 0x03
    4072:	aa 83       	std	Y+2, r26	; 0x02
    4074:	fe 01       	movw	r30, r28
    4076:	21 91       	ld	r18, Z+
    4078:	31 91       	ld	r19, Z+
    407a:	e2 0f       	add	r30, r18
    407c:	f3 1f       	adc	r31, r19
    407e:	ae 17       	cp	r26, r30
    4080:	bf 07       	cpc	r27, r31
    4082:	79 f4       	brne	.+30     	; 0x40a2 <free+0x5a>
    4084:	8d 91       	ld	r24, X+
    4086:	9c 91       	ld	r25, X
    4088:	11 97       	sbiw	r26, 0x01	; 1
    408a:	28 0f       	add	r18, r24
    408c:	39 1f       	adc	r19, r25
    408e:	2e 5f       	subi	r18, 0xFE	; 254
    4090:	3f 4f       	sbci	r19, 0xFF	; 255
    4092:	39 83       	std	Y+1, r19	; 0x01
    4094:	28 83       	st	Y, r18
    4096:	12 96       	adiw	r26, 0x02	; 2
    4098:	8d 91       	ld	r24, X+
    409a:	9c 91       	ld	r25, X
    409c:	13 97       	sbiw	r26, 0x03	; 3
    409e:	9b 83       	std	Y+3, r25	; 0x03
    40a0:	8a 83       	std	Y+2, r24	; 0x02
    40a2:	41 15       	cp	r20, r1
    40a4:	51 05       	cpc	r21, r1
    40a6:	71 f4       	brne	.+28     	; 0x40c4 <free+0x7c>
    40a8:	d0 93 c1 01 	sts	0x01C1, r29
    40ac:	c0 93 c0 01 	sts	0x01C0, r28
    40b0:	20 c0       	rjmp	.+64     	; 0x40f2 <free+0xaa>
    40b2:	12 96       	adiw	r26, 0x02	; 2
    40b4:	8d 91       	ld	r24, X+
    40b6:	9c 91       	ld	r25, X
    40b8:	13 97       	sbiw	r26, 0x03	; 3
    40ba:	ad 01       	movw	r20, r26
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	11 f0       	breq	.+4      	; 0x40c4 <free+0x7c>
    40c0:	dc 01       	movw	r26, r24
    40c2:	d3 cf       	rjmp	.-90     	; 0x406a <free+0x22>
    40c4:	fa 01       	movw	r30, r20
    40c6:	d3 83       	std	Z+3, r29	; 0x03
    40c8:	c2 83       	std	Z+2, r28	; 0x02
    40ca:	21 91       	ld	r18, Z+
    40cc:	31 91       	ld	r19, Z+
    40ce:	e2 0f       	add	r30, r18
    40d0:	f3 1f       	adc	r31, r19
    40d2:	ce 17       	cp	r28, r30
    40d4:	df 07       	cpc	r29, r31
    40d6:	69 f4       	brne	.+26     	; 0x40f2 <free+0xaa>
    40d8:	88 81       	ld	r24, Y
    40da:	99 81       	ldd	r25, Y+1	; 0x01
    40dc:	28 0f       	add	r18, r24
    40de:	39 1f       	adc	r19, r25
    40e0:	2e 5f       	subi	r18, 0xFE	; 254
    40e2:	3f 4f       	sbci	r19, 0xFF	; 255
    40e4:	fa 01       	movw	r30, r20
    40e6:	31 83       	std	Z+1, r19	; 0x01
    40e8:	20 83       	st	Z, r18
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	9b 81       	ldd	r25, Y+3	; 0x03
    40ee:	93 83       	std	Z+3, r25	; 0x03
    40f0:	82 83       	std	Z+2, r24	; 0x02
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	08 95       	ret

000040f8 <atoi>:
    40f8:	fc 01       	movw	r30, r24
    40fa:	88 27       	eor	r24, r24
    40fc:	99 27       	eor	r25, r25
    40fe:	e8 94       	clt
    4100:	21 91       	ld	r18, Z+
    4102:	20 32       	cpi	r18, 0x20	; 32
    4104:	e9 f3       	breq	.-6      	; 0x4100 <atoi+0x8>
    4106:	29 30       	cpi	r18, 0x09	; 9
    4108:	10 f0       	brcs	.+4      	; 0x410e <atoi+0x16>
    410a:	2e 30       	cpi	r18, 0x0E	; 14
    410c:	c8 f3       	brcs	.-14     	; 0x4100 <atoi+0x8>
    410e:	2b 32       	cpi	r18, 0x2B	; 43
    4110:	41 f0       	breq	.+16     	; 0x4122 <atoi+0x2a>
    4112:	2d 32       	cpi	r18, 0x2D	; 45
    4114:	39 f4       	brne	.+14     	; 0x4124 <atoi+0x2c>
    4116:	68 94       	set
    4118:	04 c0       	rjmp	.+8      	; 0x4122 <atoi+0x2a>
    411a:	0e 94 9a 20 	call	0x4134	; 0x4134 <__mulhi_const_10>
    411e:	82 0f       	add	r24, r18
    4120:	91 1d       	adc	r25, r1
    4122:	21 91       	ld	r18, Z+
    4124:	20 53       	subi	r18, 0x30	; 48
    4126:	2a 30       	cpi	r18, 0x0A	; 10
    4128:	c0 f3       	brcs	.-16     	; 0x411a <atoi+0x22>
    412a:	1e f4       	brtc	.+6      	; 0x4132 <atoi+0x3a>
    412c:	90 95       	com	r25
    412e:	81 95       	neg	r24
    4130:	9f 4f       	sbci	r25, 0xFF	; 255
    4132:	08 95       	ret

00004134 <__mulhi_const_10>:
    4134:	7a e0       	ldi	r23, 0x0A	; 10
    4136:	97 9f       	mul	r25, r23
    4138:	90 2d       	mov	r25, r0
    413a:	87 9f       	mul	r24, r23
    413c:	80 2d       	mov	r24, r0
    413e:	91 0d       	add	r25, r1
    4140:	11 24       	eor	r1, r1
    4142:	08 95       	ret

00004144 <sprintf>:
    4144:	ae e0       	ldi	r26, 0x0E	; 14
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	e8 ea       	ldi	r30, 0xA8	; 168
    414a:	f0 e2       	ldi	r31, 0x20	; 32
    414c:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x1c>
    4150:	0d 89       	ldd	r16, Y+21	; 0x15
    4152:	1e 89       	ldd	r17, Y+22	; 0x16
    4154:	86 e0       	ldi	r24, 0x06	; 6
    4156:	8c 83       	std	Y+4, r24	; 0x04
    4158:	1a 83       	std	Y+2, r17	; 0x02
    415a:	09 83       	std	Y+1, r16	; 0x01
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	9f e7       	ldi	r25, 0x7F	; 127
    4160:	9e 83       	std	Y+6, r25	; 0x06
    4162:	8d 83       	std	Y+5, r24	; 0x05
    4164:	9e 01       	movw	r18, r28
    4166:	27 5e       	subi	r18, 0xE7	; 231
    4168:	3f 4f       	sbci	r19, 0xFF	; 255
    416a:	ce 01       	movw	r24, r28
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	6f 89       	ldd	r22, Y+23	; 0x17
    4170:	78 8d       	ldd	r23, Y+24	; 0x18
    4172:	a9 01       	movw	r20, r18
    4174:	0e 94 c6 20 	call	0x418c	; 0x418c <vfprintf>
    4178:	2f 81       	ldd	r18, Y+7	; 0x07
    417a:	38 85       	ldd	r19, Y+8	; 0x08
    417c:	02 0f       	add	r16, r18
    417e:	13 1f       	adc	r17, r19
    4180:	f8 01       	movw	r30, r16
    4182:	10 82       	st	Z, r1
    4184:	2e 96       	adiw	r28, 0x0e	; 14
    4186:	e4 e0       	ldi	r30, 0x04	; 4
    4188:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x1c>

0000418c <vfprintf>:
    418c:	ab e0       	ldi	r26, 0x0B	; 11
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	ec ec       	ldi	r30, 0xCC	; 204
    4192:	f0 e2       	ldi	r31, 0x20	; 32
    4194:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__prologue_saves__>
    4198:	3c 01       	movw	r6, r24
    419a:	2b 01       	movw	r4, r22
    419c:	5a 01       	movw	r10, r20
    419e:	fc 01       	movw	r30, r24
    41a0:	17 82       	std	Z+7, r1	; 0x07
    41a2:	16 82       	std	Z+6, r1	; 0x06
    41a4:	83 81       	ldd	r24, Z+3	; 0x03
    41a6:	81 fd       	sbrc	r24, 1
    41a8:	03 c0       	rjmp	.+6      	; 0x41b0 <vfprintf+0x24>
    41aa:	6f ef       	ldi	r22, 0xFF	; 255
    41ac:	7f ef       	ldi	r23, 0xFF	; 255
    41ae:	c6 c1       	rjmp	.+908    	; 0x453c <vfprintf+0x3b0>
    41b0:	9a e0       	ldi	r25, 0x0A	; 10
    41b2:	89 2e       	mov	r8, r25
    41b4:	1e 01       	movw	r2, r28
    41b6:	08 94       	sec
    41b8:	21 1c       	adc	r2, r1
    41ba:	31 1c       	adc	r3, r1
    41bc:	f3 01       	movw	r30, r6
    41be:	23 81       	ldd	r18, Z+3	; 0x03
    41c0:	f2 01       	movw	r30, r4
    41c2:	23 fd       	sbrc	r18, 3
    41c4:	85 91       	lpm	r24, Z+
    41c6:	23 ff       	sbrs	r18, 3
    41c8:	81 91       	ld	r24, Z+
    41ca:	2f 01       	movw	r4, r30
    41cc:	88 23       	and	r24, r24
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <vfprintf+0x46>
    41d0:	b2 c1       	rjmp	.+868    	; 0x4536 <vfprintf+0x3aa>
    41d2:	85 32       	cpi	r24, 0x25	; 37
    41d4:	39 f4       	brne	.+14     	; 0x41e4 <vfprintf+0x58>
    41d6:	23 fd       	sbrc	r18, 3
    41d8:	85 91       	lpm	r24, Z+
    41da:	23 ff       	sbrs	r18, 3
    41dc:	81 91       	ld	r24, Z+
    41de:	2f 01       	movw	r4, r30
    41e0:	85 32       	cpi	r24, 0x25	; 37
    41e2:	29 f4       	brne	.+10     	; 0x41ee <vfprintf+0x62>
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	b3 01       	movw	r22, r6
    41e8:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    41ec:	e7 cf       	rjmp	.-50     	; 0x41bc <vfprintf+0x30>
    41ee:	98 2f       	mov	r25, r24
    41f0:	ff 24       	eor	r15, r15
    41f2:	ee 24       	eor	r14, r14
    41f4:	99 24       	eor	r9, r9
    41f6:	ff e1       	ldi	r31, 0x1F	; 31
    41f8:	ff 15       	cp	r31, r15
    41fa:	d0 f0       	brcs	.+52     	; 0x4230 <vfprintf+0xa4>
    41fc:	9b 32       	cpi	r25, 0x2B	; 43
    41fe:	69 f0       	breq	.+26     	; 0x421a <vfprintf+0x8e>
    4200:	9c 32       	cpi	r25, 0x2C	; 44
    4202:	28 f4       	brcc	.+10     	; 0x420e <vfprintf+0x82>
    4204:	90 32       	cpi	r25, 0x20	; 32
    4206:	59 f0       	breq	.+22     	; 0x421e <vfprintf+0x92>
    4208:	93 32       	cpi	r25, 0x23	; 35
    420a:	91 f4       	brne	.+36     	; 0x4230 <vfprintf+0xa4>
    420c:	0e c0       	rjmp	.+28     	; 0x422a <vfprintf+0x9e>
    420e:	9d 32       	cpi	r25, 0x2D	; 45
    4210:	49 f0       	breq	.+18     	; 0x4224 <vfprintf+0x98>
    4212:	90 33       	cpi	r25, 0x30	; 48
    4214:	69 f4       	brne	.+26     	; 0x4230 <vfprintf+0xa4>
    4216:	41 e0       	ldi	r20, 0x01	; 1
    4218:	24 c0       	rjmp	.+72     	; 0x4262 <vfprintf+0xd6>
    421a:	52 e0       	ldi	r21, 0x02	; 2
    421c:	f5 2a       	or	r15, r21
    421e:	84 e0       	ldi	r24, 0x04	; 4
    4220:	f8 2a       	or	r15, r24
    4222:	28 c0       	rjmp	.+80     	; 0x4274 <vfprintf+0xe8>
    4224:	98 e0       	ldi	r25, 0x08	; 8
    4226:	f9 2a       	or	r15, r25
    4228:	25 c0       	rjmp	.+74     	; 0x4274 <vfprintf+0xe8>
    422a:	e0 e1       	ldi	r30, 0x10	; 16
    422c:	fe 2a       	or	r15, r30
    422e:	22 c0       	rjmp	.+68     	; 0x4274 <vfprintf+0xe8>
    4230:	f7 fc       	sbrc	r15, 7
    4232:	29 c0       	rjmp	.+82     	; 0x4286 <vfprintf+0xfa>
    4234:	89 2f       	mov	r24, r25
    4236:	80 53       	subi	r24, 0x30	; 48
    4238:	8a 30       	cpi	r24, 0x0A	; 10
    423a:	70 f4       	brcc	.+28     	; 0x4258 <vfprintf+0xcc>
    423c:	f6 fe       	sbrs	r15, 6
    423e:	05 c0       	rjmp	.+10     	; 0x424a <vfprintf+0xbe>
    4240:	98 9c       	mul	r9, r8
    4242:	90 2c       	mov	r9, r0
    4244:	11 24       	eor	r1, r1
    4246:	98 0e       	add	r9, r24
    4248:	15 c0       	rjmp	.+42     	; 0x4274 <vfprintf+0xe8>
    424a:	e8 9c       	mul	r14, r8
    424c:	e0 2c       	mov	r14, r0
    424e:	11 24       	eor	r1, r1
    4250:	e8 0e       	add	r14, r24
    4252:	f0 e2       	ldi	r31, 0x20	; 32
    4254:	ff 2a       	or	r15, r31
    4256:	0e c0       	rjmp	.+28     	; 0x4274 <vfprintf+0xe8>
    4258:	9e 32       	cpi	r25, 0x2E	; 46
    425a:	29 f4       	brne	.+10     	; 0x4266 <vfprintf+0xda>
    425c:	f6 fc       	sbrc	r15, 6
    425e:	6b c1       	rjmp	.+726    	; 0x4536 <vfprintf+0x3aa>
    4260:	40 e4       	ldi	r20, 0x40	; 64
    4262:	f4 2a       	or	r15, r20
    4264:	07 c0       	rjmp	.+14     	; 0x4274 <vfprintf+0xe8>
    4266:	9c 36       	cpi	r25, 0x6C	; 108
    4268:	19 f4       	brne	.+6      	; 0x4270 <vfprintf+0xe4>
    426a:	50 e8       	ldi	r21, 0x80	; 128
    426c:	f5 2a       	or	r15, r21
    426e:	02 c0       	rjmp	.+4      	; 0x4274 <vfprintf+0xe8>
    4270:	98 36       	cpi	r25, 0x68	; 104
    4272:	49 f4       	brne	.+18     	; 0x4286 <vfprintf+0xfa>
    4274:	f2 01       	movw	r30, r4
    4276:	23 fd       	sbrc	r18, 3
    4278:	95 91       	lpm	r25, Z+
    427a:	23 ff       	sbrs	r18, 3
    427c:	91 91       	ld	r25, Z+
    427e:	2f 01       	movw	r4, r30
    4280:	99 23       	and	r25, r25
    4282:	09 f0       	breq	.+2      	; 0x4286 <vfprintf+0xfa>
    4284:	b8 cf       	rjmp	.-144    	; 0x41f6 <vfprintf+0x6a>
    4286:	89 2f       	mov	r24, r25
    4288:	85 54       	subi	r24, 0x45	; 69
    428a:	83 30       	cpi	r24, 0x03	; 3
    428c:	18 f0       	brcs	.+6      	; 0x4294 <vfprintf+0x108>
    428e:	80 52       	subi	r24, 0x20	; 32
    4290:	83 30       	cpi	r24, 0x03	; 3
    4292:	38 f4       	brcc	.+14     	; 0x42a2 <vfprintf+0x116>
    4294:	44 e0       	ldi	r20, 0x04	; 4
    4296:	50 e0       	ldi	r21, 0x00	; 0
    4298:	a4 0e       	add	r10, r20
    429a:	b5 1e       	adc	r11, r21
    429c:	5f e3       	ldi	r21, 0x3F	; 63
    429e:	59 83       	std	Y+1, r21	; 0x01
    42a0:	0f c0       	rjmp	.+30     	; 0x42c0 <vfprintf+0x134>
    42a2:	93 36       	cpi	r25, 0x63	; 99
    42a4:	31 f0       	breq	.+12     	; 0x42b2 <vfprintf+0x126>
    42a6:	93 37       	cpi	r25, 0x73	; 115
    42a8:	79 f0       	breq	.+30     	; 0x42c8 <vfprintf+0x13c>
    42aa:	93 35       	cpi	r25, 0x53	; 83
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <vfprintf+0x124>
    42ae:	56 c0       	rjmp	.+172    	; 0x435c <vfprintf+0x1d0>
    42b0:	20 c0       	rjmp	.+64     	; 0x42f2 <vfprintf+0x166>
    42b2:	f5 01       	movw	r30, r10
    42b4:	80 81       	ld	r24, Z
    42b6:	89 83       	std	Y+1, r24	; 0x01
    42b8:	42 e0       	ldi	r20, 0x02	; 2
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	a4 0e       	add	r10, r20
    42be:	b5 1e       	adc	r11, r21
    42c0:	61 01       	movw	r12, r2
    42c2:	01 e0       	ldi	r16, 0x01	; 1
    42c4:	10 e0       	ldi	r17, 0x00	; 0
    42c6:	12 c0       	rjmp	.+36     	; 0x42ec <vfprintf+0x160>
    42c8:	f5 01       	movw	r30, r10
    42ca:	c0 80       	ld	r12, Z
    42cc:	d1 80       	ldd	r13, Z+1	; 0x01
    42ce:	f6 fc       	sbrc	r15, 6
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <vfprintf+0x14c>
    42d2:	6f ef       	ldi	r22, 0xFF	; 255
    42d4:	7f ef       	ldi	r23, 0xFF	; 255
    42d6:	02 c0       	rjmp	.+4      	; 0x42dc <vfprintf+0x150>
    42d8:	69 2d       	mov	r22, r9
    42da:	70 e0       	ldi	r23, 0x00	; 0
    42dc:	42 e0       	ldi	r20, 0x02	; 2
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	a4 0e       	add	r10, r20
    42e2:	b5 1e       	adc	r11, r21
    42e4:	c6 01       	movw	r24, r12
    42e6:	0e 94 ae 22 	call	0x455c	; 0x455c <strnlen>
    42ea:	8c 01       	movw	r16, r24
    42ec:	5f e7       	ldi	r21, 0x7F	; 127
    42ee:	f5 22       	and	r15, r21
    42f0:	14 c0       	rjmp	.+40     	; 0x431a <vfprintf+0x18e>
    42f2:	f5 01       	movw	r30, r10
    42f4:	c0 80       	ld	r12, Z
    42f6:	d1 80       	ldd	r13, Z+1	; 0x01
    42f8:	f6 fc       	sbrc	r15, 6
    42fa:	03 c0       	rjmp	.+6      	; 0x4302 <vfprintf+0x176>
    42fc:	6f ef       	ldi	r22, 0xFF	; 255
    42fe:	7f ef       	ldi	r23, 0xFF	; 255
    4300:	02 c0       	rjmp	.+4      	; 0x4306 <vfprintf+0x17a>
    4302:	69 2d       	mov	r22, r9
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	42 e0       	ldi	r20, 0x02	; 2
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	a4 0e       	add	r10, r20
    430c:	b5 1e       	adc	r11, r21
    430e:	c6 01       	movw	r24, r12
    4310:	0e 94 a3 22 	call	0x4546	; 0x4546 <strnlen_P>
    4314:	8c 01       	movw	r16, r24
    4316:	50 e8       	ldi	r21, 0x80	; 128
    4318:	f5 2a       	or	r15, r21
    431a:	f3 fe       	sbrs	r15, 3
    431c:	07 c0       	rjmp	.+14     	; 0x432c <vfprintf+0x1a0>
    431e:	1a c0       	rjmp	.+52     	; 0x4354 <vfprintf+0x1c8>
    4320:	80 e2       	ldi	r24, 0x20	; 32
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	b3 01       	movw	r22, r6
    4326:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    432a:	ea 94       	dec	r14
    432c:	8e 2d       	mov	r24, r14
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	08 17       	cp	r16, r24
    4332:	19 07       	cpc	r17, r25
    4334:	a8 f3       	brcs	.-22     	; 0x4320 <vfprintf+0x194>
    4336:	0e c0       	rjmp	.+28     	; 0x4354 <vfprintf+0x1c8>
    4338:	f6 01       	movw	r30, r12
    433a:	f7 fc       	sbrc	r15, 7
    433c:	85 91       	lpm	r24, Z+
    433e:	f7 fe       	sbrs	r15, 7
    4340:	81 91       	ld	r24, Z+
    4342:	6f 01       	movw	r12, r30
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	b3 01       	movw	r22, r6
    4348:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    434c:	e1 10       	cpse	r14, r1
    434e:	ea 94       	dec	r14
    4350:	01 50       	subi	r16, 0x01	; 1
    4352:	10 40       	sbci	r17, 0x00	; 0
    4354:	01 15       	cp	r16, r1
    4356:	11 05       	cpc	r17, r1
    4358:	79 f7       	brne	.-34     	; 0x4338 <vfprintf+0x1ac>
    435a:	ea c0       	rjmp	.+468    	; 0x4530 <vfprintf+0x3a4>
    435c:	94 36       	cpi	r25, 0x64	; 100
    435e:	11 f0       	breq	.+4      	; 0x4364 <vfprintf+0x1d8>
    4360:	99 36       	cpi	r25, 0x69	; 105
    4362:	69 f5       	brne	.+90     	; 0x43be <vfprintf+0x232>
    4364:	f7 fe       	sbrs	r15, 7
    4366:	08 c0       	rjmp	.+16     	; 0x4378 <vfprintf+0x1ec>
    4368:	f5 01       	movw	r30, r10
    436a:	20 81       	ld	r18, Z
    436c:	31 81       	ldd	r19, Z+1	; 0x01
    436e:	42 81       	ldd	r20, Z+2	; 0x02
    4370:	53 81       	ldd	r21, Z+3	; 0x03
    4372:	84 e0       	ldi	r24, 0x04	; 4
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0a c0       	rjmp	.+20     	; 0x438c <vfprintf+0x200>
    4378:	f5 01       	movw	r30, r10
    437a:	80 81       	ld	r24, Z
    437c:	91 81       	ldd	r25, Z+1	; 0x01
    437e:	9c 01       	movw	r18, r24
    4380:	44 27       	eor	r20, r20
    4382:	37 fd       	sbrc	r19, 7
    4384:	40 95       	com	r20
    4386:	54 2f       	mov	r21, r20
    4388:	82 e0       	ldi	r24, 0x02	; 2
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	a8 0e       	add	r10, r24
    438e:	b9 1e       	adc	r11, r25
    4390:	9f e6       	ldi	r25, 0x6F	; 111
    4392:	f9 22       	and	r15, r25
    4394:	57 ff       	sbrs	r21, 7
    4396:	09 c0       	rjmp	.+18     	; 0x43aa <vfprintf+0x21e>
    4398:	50 95       	com	r21
    439a:	40 95       	com	r20
    439c:	30 95       	com	r19
    439e:	21 95       	neg	r18
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	4f 4f       	sbci	r20, 0xFF	; 255
    43a4:	5f 4f       	sbci	r21, 0xFF	; 255
    43a6:	e0 e8       	ldi	r30, 0x80	; 128
    43a8:	fe 2a       	or	r15, r30
    43aa:	ca 01       	movw	r24, r20
    43ac:	b9 01       	movw	r22, r18
    43ae:	a1 01       	movw	r20, r2
    43b0:	2a e0       	ldi	r18, 0x0A	; 10
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__ultoa_invert>
    43b8:	d8 2e       	mov	r13, r24
    43ba:	d2 18       	sub	r13, r2
    43bc:	40 c0       	rjmp	.+128    	; 0x443e <vfprintf+0x2b2>
    43be:	95 37       	cpi	r25, 0x75	; 117
    43c0:	29 f4       	brne	.+10     	; 0x43cc <vfprintf+0x240>
    43c2:	1f 2d       	mov	r17, r15
    43c4:	1f 7e       	andi	r17, 0xEF	; 239
    43c6:	2a e0       	ldi	r18, 0x0A	; 10
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	1d c0       	rjmp	.+58     	; 0x4406 <vfprintf+0x27a>
    43cc:	1f 2d       	mov	r17, r15
    43ce:	19 7f       	andi	r17, 0xF9	; 249
    43d0:	9f 36       	cpi	r25, 0x6F	; 111
    43d2:	61 f0       	breq	.+24     	; 0x43ec <vfprintf+0x260>
    43d4:	90 37       	cpi	r25, 0x70	; 112
    43d6:	20 f4       	brcc	.+8      	; 0x43e0 <vfprintf+0x254>
    43d8:	98 35       	cpi	r25, 0x58	; 88
    43da:	09 f0       	breq	.+2      	; 0x43de <vfprintf+0x252>
    43dc:	ac c0       	rjmp	.+344    	; 0x4536 <vfprintf+0x3aa>
    43de:	0f c0       	rjmp	.+30     	; 0x43fe <vfprintf+0x272>
    43e0:	90 37       	cpi	r25, 0x70	; 112
    43e2:	39 f0       	breq	.+14     	; 0x43f2 <vfprintf+0x266>
    43e4:	98 37       	cpi	r25, 0x78	; 120
    43e6:	09 f0       	breq	.+2      	; 0x43ea <vfprintf+0x25e>
    43e8:	a6 c0       	rjmp	.+332    	; 0x4536 <vfprintf+0x3aa>
    43ea:	04 c0       	rjmp	.+8      	; 0x43f4 <vfprintf+0x268>
    43ec:	28 e0       	ldi	r18, 0x08	; 8
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	0a c0       	rjmp	.+20     	; 0x4406 <vfprintf+0x27a>
    43f2:	10 61       	ori	r17, 0x10	; 16
    43f4:	14 fd       	sbrc	r17, 4
    43f6:	14 60       	ori	r17, 0x04	; 4
    43f8:	20 e1       	ldi	r18, 0x10	; 16
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	04 c0       	rjmp	.+8      	; 0x4406 <vfprintf+0x27a>
    43fe:	14 fd       	sbrc	r17, 4
    4400:	16 60       	ori	r17, 0x06	; 6
    4402:	20 e1       	ldi	r18, 0x10	; 16
    4404:	32 e0       	ldi	r19, 0x02	; 2
    4406:	17 ff       	sbrs	r17, 7
    4408:	08 c0       	rjmp	.+16     	; 0x441a <vfprintf+0x28e>
    440a:	f5 01       	movw	r30, r10
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	44 e0       	ldi	r20, 0x04	; 4
    4416:	50 e0       	ldi	r21, 0x00	; 0
    4418:	08 c0       	rjmp	.+16     	; 0x442a <vfprintf+0x29e>
    441a:	f5 01       	movw	r30, r10
    441c:	80 81       	ld	r24, Z
    441e:	91 81       	ldd	r25, Z+1	; 0x01
    4420:	bc 01       	movw	r22, r24
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	42 e0       	ldi	r20, 0x02	; 2
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	a4 0e       	add	r10, r20
    442c:	b5 1e       	adc	r11, r21
    442e:	a1 01       	movw	r20, r2
    4430:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__ultoa_invert>
    4434:	d8 2e       	mov	r13, r24
    4436:	d2 18       	sub	r13, r2
    4438:	8f e7       	ldi	r24, 0x7F	; 127
    443a:	f8 2e       	mov	r15, r24
    443c:	f1 22       	and	r15, r17
    443e:	f6 fe       	sbrs	r15, 6
    4440:	0b c0       	rjmp	.+22     	; 0x4458 <vfprintf+0x2cc>
    4442:	5e ef       	ldi	r21, 0xFE	; 254
    4444:	f5 22       	and	r15, r21
    4446:	d9 14       	cp	r13, r9
    4448:	38 f4       	brcc	.+14     	; 0x4458 <vfprintf+0x2cc>
    444a:	f4 fe       	sbrs	r15, 4
    444c:	07 c0       	rjmp	.+14     	; 0x445c <vfprintf+0x2d0>
    444e:	f2 fc       	sbrc	r15, 2
    4450:	05 c0       	rjmp	.+10     	; 0x445c <vfprintf+0x2d0>
    4452:	8f ee       	ldi	r24, 0xEF	; 239
    4454:	f8 22       	and	r15, r24
    4456:	02 c0       	rjmp	.+4      	; 0x445c <vfprintf+0x2d0>
    4458:	1d 2d       	mov	r17, r13
    445a:	01 c0       	rjmp	.+2      	; 0x445e <vfprintf+0x2d2>
    445c:	19 2d       	mov	r17, r9
    445e:	f4 fe       	sbrs	r15, 4
    4460:	0d c0       	rjmp	.+26     	; 0x447c <vfprintf+0x2f0>
    4462:	fe 01       	movw	r30, r28
    4464:	ed 0d       	add	r30, r13
    4466:	f1 1d       	adc	r31, r1
    4468:	80 81       	ld	r24, Z
    446a:	80 33       	cpi	r24, 0x30	; 48
    446c:	19 f4       	brne	.+6      	; 0x4474 <vfprintf+0x2e8>
    446e:	99 ee       	ldi	r25, 0xE9	; 233
    4470:	f9 22       	and	r15, r25
    4472:	08 c0       	rjmp	.+16     	; 0x4484 <vfprintf+0x2f8>
    4474:	1f 5f       	subi	r17, 0xFF	; 255
    4476:	f2 fe       	sbrs	r15, 2
    4478:	05 c0       	rjmp	.+10     	; 0x4484 <vfprintf+0x2f8>
    447a:	03 c0       	rjmp	.+6      	; 0x4482 <vfprintf+0x2f6>
    447c:	8f 2d       	mov	r24, r15
    447e:	86 78       	andi	r24, 0x86	; 134
    4480:	09 f0       	breq	.+2      	; 0x4484 <vfprintf+0x2f8>
    4482:	1f 5f       	subi	r17, 0xFF	; 255
    4484:	0f 2d       	mov	r16, r15
    4486:	f3 fc       	sbrc	r15, 3
    4488:	14 c0       	rjmp	.+40     	; 0x44b2 <vfprintf+0x326>
    448a:	f0 fe       	sbrs	r15, 0
    448c:	0f c0       	rjmp	.+30     	; 0x44ac <vfprintf+0x320>
    448e:	1e 15       	cp	r17, r14
    4490:	10 f0       	brcs	.+4      	; 0x4496 <vfprintf+0x30a>
    4492:	9d 2c       	mov	r9, r13
    4494:	0b c0       	rjmp	.+22     	; 0x44ac <vfprintf+0x320>
    4496:	9d 2c       	mov	r9, r13
    4498:	9e 0c       	add	r9, r14
    449a:	91 1a       	sub	r9, r17
    449c:	1e 2d       	mov	r17, r14
    449e:	06 c0       	rjmp	.+12     	; 0x44ac <vfprintf+0x320>
    44a0:	80 e2       	ldi	r24, 0x20	; 32
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	b3 01       	movw	r22, r6
    44a6:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    44aa:	1f 5f       	subi	r17, 0xFF	; 255
    44ac:	1e 15       	cp	r17, r14
    44ae:	c0 f3       	brcs	.-16     	; 0x44a0 <vfprintf+0x314>
    44b0:	04 c0       	rjmp	.+8      	; 0x44ba <vfprintf+0x32e>
    44b2:	1e 15       	cp	r17, r14
    44b4:	10 f4       	brcc	.+4      	; 0x44ba <vfprintf+0x32e>
    44b6:	e1 1a       	sub	r14, r17
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <vfprintf+0x330>
    44ba:	ee 24       	eor	r14, r14
    44bc:	04 ff       	sbrs	r16, 4
    44be:	0f c0       	rjmp	.+30     	; 0x44de <vfprintf+0x352>
    44c0:	80 e3       	ldi	r24, 0x30	; 48
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	b3 01       	movw	r22, r6
    44c6:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    44ca:	02 ff       	sbrs	r16, 2
    44cc:	1d c0       	rjmp	.+58     	; 0x4508 <vfprintf+0x37c>
    44ce:	01 fd       	sbrc	r16, 1
    44d0:	03 c0       	rjmp	.+6      	; 0x44d8 <vfprintf+0x34c>
    44d2:	88 e7       	ldi	r24, 0x78	; 120
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e c0       	rjmp	.+28     	; 0x44f4 <vfprintf+0x368>
    44d8:	88 e5       	ldi	r24, 0x58	; 88
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	0b c0       	rjmp	.+22     	; 0x44f4 <vfprintf+0x368>
    44de:	80 2f       	mov	r24, r16
    44e0:	86 78       	andi	r24, 0x86	; 134
    44e2:	91 f0       	breq	.+36     	; 0x4508 <vfprintf+0x37c>
    44e4:	01 ff       	sbrs	r16, 1
    44e6:	02 c0       	rjmp	.+4      	; 0x44ec <vfprintf+0x360>
    44e8:	8b e2       	ldi	r24, 0x2B	; 43
    44ea:	01 c0       	rjmp	.+2      	; 0x44ee <vfprintf+0x362>
    44ec:	80 e2       	ldi	r24, 0x20	; 32
    44ee:	f7 fc       	sbrc	r15, 7
    44f0:	8d e2       	ldi	r24, 0x2D	; 45
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	b3 01       	movw	r22, r6
    44f6:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    44fa:	06 c0       	rjmp	.+12     	; 0x4508 <vfprintf+0x37c>
    44fc:	80 e3       	ldi	r24, 0x30	; 48
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	b3 01       	movw	r22, r6
    4502:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    4506:	9a 94       	dec	r9
    4508:	d9 14       	cp	r13, r9
    450a:	c0 f3       	brcs	.-16     	; 0x44fc <vfprintf+0x370>
    450c:	da 94       	dec	r13
    450e:	f1 01       	movw	r30, r2
    4510:	ed 0d       	add	r30, r13
    4512:	f1 1d       	adc	r31, r1
    4514:	80 81       	ld	r24, Z
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	b3 01       	movw	r22, r6
    451a:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    451e:	dd 20       	and	r13, r13
    4520:	a9 f7       	brne	.-22     	; 0x450c <vfprintf+0x380>
    4522:	06 c0       	rjmp	.+12     	; 0x4530 <vfprintf+0x3a4>
    4524:	80 e2       	ldi	r24, 0x20	; 32
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	b3 01       	movw	r22, r6
    452a:	0e 94 b9 22 	call	0x4572	; 0x4572 <fputc>
    452e:	ea 94       	dec	r14
    4530:	ee 20       	and	r14, r14
    4532:	c1 f7       	brne	.-16     	; 0x4524 <vfprintf+0x398>
    4534:	43 ce       	rjmp	.-890    	; 0x41bc <vfprintf+0x30>
    4536:	f3 01       	movw	r30, r6
    4538:	66 81       	ldd	r22, Z+6	; 0x06
    453a:	77 81       	ldd	r23, Z+7	; 0x07
    453c:	cb 01       	movw	r24, r22
    453e:	2b 96       	adiw	r28, 0x0b	; 11
    4540:	e2 e1       	ldi	r30, 0x12	; 18
    4542:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__epilogue_restores__>

00004546 <strnlen_P>:
    4546:	fc 01       	movw	r30, r24
    4548:	05 90       	lpm	r0, Z+
    454a:	61 50       	subi	r22, 0x01	; 1
    454c:	70 40       	sbci	r23, 0x00	; 0
    454e:	01 10       	cpse	r0, r1
    4550:	d8 f7       	brcc	.-10     	; 0x4548 <strnlen_P+0x2>
    4552:	80 95       	com	r24
    4554:	90 95       	com	r25
    4556:	8e 0f       	add	r24, r30
    4558:	9f 1f       	adc	r25, r31
    455a:	08 95       	ret

0000455c <strnlen>:
    455c:	fc 01       	movw	r30, r24
    455e:	61 50       	subi	r22, 0x01	; 1
    4560:	70 40       	sbci	r23, 0x00	; 0
    4562:	01 90       	ld	r0, Z+
    4564:	01 10       	cpse	r0, r1
    4566:	d8 f7       	brcc	.-10     	; 0x455e <strnlen+0x2>
    4568:	80 95       	com	r24
    456a:	90 95       	com	r25
    456c:	8e 0f       	add	r24, r30
    456e:	9f 1f       	adc	r25, r31
    4570:	08 95       	ret

00004572 <fputc>:
    4572:	0f 93       	push	r16
    4574:	1f 93       	push	r17
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	8c 01       	movw	r16, r24
    457c:	eb 01       	movw	r28, r22
    457e:	8b 81       	ldd	r24, Y+3	; 0x03
    4580:	81 ff       	sbrs	r24, 1
    4582:	1b c0       	rjmp	.+54     	; 0x45ba <fputc+0x48>
    4584:	82 ff       	sbrs	r24, 2
    4586:	0d c0       	rjmp	.+26     	; 0x45a2 <fputc+0x30>
    4588:	2e 81       	ldd	r18, Y+6	; 0x06
    458a:	3f 81       	ldd	r19, Y+7	; 0x07
    458c:	8c 81       	ldd	r24, Y+4	; 0x04
    458e:	9d 81       	ldd	r25, Y+5	; 0x05
    4590:	28 17       	cp	r18, r24
    4592:	39 07       	cpc	r19, r25
    4594:	64 f4       	brge	.+24     	; 0x45ae <fputc+0x3c>
    4596:	e8 81       	ld	r30, Y
    4598:	f9 81       	ldd	r31, Y+1	; 0x01
    459a:	01 93       	st	Z+, r16
    459c:	f9 83       	std	Y+1, r31	; 0x01
    459e:	e8 83       	st	Y, r30
    45a0:	06 c0       	rjmp	.+12     	; 0x45ae <fputc+0x3c>
    45a2:	e8 85       	ldd	r30, Y+8	; 0x08
    45a4:	f9 85       	ldd	r31, Y+9	; 0x09
    45a6:	80 2f       	mov	r24, r16
    45a8:	09 95       	icall
    45aa:	89 2b       	or	r24, r25
    45ac:	31 f4       	brne	.+12     	; 0x45ba <fputc+0x48>
    45ae:	8e 81       	ldd	r24, Y+6	; 0x06
    45b0:	9f 81       	ldd	r25, Y+7	; 0x07
    45b2:	01 96       	adiw	r24, 0x01	; 1
    45b4:	9f 83       	std	Y+7, r25	; 0x07
    45b6:	8e 83       	std	Y+6, r24	; 0x06
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <fputc+0x4c>
    45ba:	0f ef       	ldi	r16, 0xFF	; 255
    45bc:	1f ef       	ldi	r17, 0xFF	; 255
    45be:	c8 01       	movw	r24, r16
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	08 95       	ret

000045ca <__ultoa_invert>:
    45ca:	fa 01       	movw	r30, r20
    45cc:	aa 27       	eor	r26, r26
    45ce:	28 30       	cpi	r18, 0x08	; 8
    45d0:	51 f1       	breq	.+84     	; 0x4626 <__ultoa_invert+0x5c>
    45d2:	20 31       	cpi	r18, 0x10	; 16
    45d4:	81 f1       	breq	.+96     	; 0x4636 <__ultoa_invert+0x6c>
    45d6:	e8 94       	clt
    45d8:	6f 93       	push	r22
    45da:	6e 7f       	andi	r22, 0xFE	; 254
    45dc:	6e 5f       	subi	r22, 0xFE	; 254
    45de:	7f 4f       	sbci	r23, 0xFF	; 255
    45e0:	8f 4f       	sbci	r24, 0xFF	; 255
    45e2:	9f 4f       	sbci	r25, 0xFF	; 255
    45e4:	af 4f       	sbci	r26, 0xFF	; 255
    45e6:	b1 e0       	ldi	r27, 0x01	; 1
    45e8:	3e d0       	rcall	.+124    	; 0x4666 <__ultoa_invert+0x9c>
    45ea:	b4 e0       	ldi	r27, 0x04	; 4
    45ec:	3c d0       	rcall	.+120    	; 0x4666 <__ultoa_invert+0x9c>
    45ee:	67 0f       	add	r22, r23
    45f0:	78 1f       	adc	r23, r24
    45f2:	89 1f       	adc	r24, r25
    45f4:	9a 1f       	adc	r25, r26
    45f6:	a1 1d       	adc	r26, r1
    45f8:	68 0f       	add	r22, r24
    45fa:	79 1f       	adc	r23, r25
    45fc:	8a 1f       	adc	r24, r26
    45fe:	91 1d       	adc	r25, r1
    4600:	a1 1d       	adc	r26, r1
    4602:	6a 0f       	add	r22, r26
    4604:	71 1d       	adc	r23, r1
    4606:	81 1d       	adc	r24, r1
    4608:	91 1d       	adc	r25, r1
    460a:	a1 1d       	adc	r26, r1
    460c:	20 d0       	rcall	.+64     	; 0x464e <__ultoa_invert+0x84>
    460e:	09 f4       	brne	.+2      	; 0x4612 <__ultoa_invert+0x48>
    4610:	68 94       	set
    4612:	3f 91       	pop	r19
    4614:	2a e0       	ldi	r18, 0x0A	; 10
    4616:	26 9f       	mul	r18, r22
    4618:	11 24       	eor	r1, r1
    461a:	30 19       	sub	r19, r0
    461c:	30 5d       	subi	r19, 0xD0	; 208
    461e:	31 93       	st	Z+, r19
    4620:	de f6       	brtc	.-74     	; 0x45d8 <__ultoa_invert+0xe>
    4622:	cf 01       	movw	r24, r30
    4624:	08 95       	ret
    4626:	46 2f       	mov	r20, r22
    4628:	47 70       	andi	r20, 0x07	; 7
    462a:	40 5d       	subi	r20, 0xD0	; 208
    462c:	41 93       	st	Z+, r20
    462e:	b3 e0       	ldi	r27, 0x03	; 3
    4630:	0f d0       	rcall	.+30     	; 0x4650 <__ultoa_invert+0x86>
    4632:	c9 f7       	brne	.-14     	; 0x4626 <__ultoa_invert+0x5c>
    4634:	f6 cf       	rjmp	.-20     	; 0x4622 <__ultoa_invert+0x58>
    4636:	46 2f       	mov	r20, r22
    4638:	4f 70       	andi	r20, 0x0F	; 15
    463a:	40 5d       	subi	r20, 0xD0	; 208
    463c:	4a 33       	cpi	r20, 0x3A	; 58
    463e:	18 f0       	brcs	.+6      	; 0x4646 <__ultoa_invert+0x7c>
    4640:	49 5d       	subi	r20, 0xD9	; 217
    4642:	31 fd       	sbrc	r19, 1
    4644:	40 52       	subi	r20, 0x20	; 32
    4646:	41 93       	st	Z+, r20
    4648:	02 d0       	rcall	.+4      	; 0x464e <__ultoa_invert+0x84>
    464a:	a9 f7       	brne	.-22     	; 0x4636 <__ultoa_invert+0x6c>
    464c:	ea cf       	rjmp	.-44     	; 0x4622 <__ultoa_invert+0x58>
    464e:	b4 e0       	ldi	r27, 0x04	; 4
    4650:	a6 95       	lsr	r26
    4652:	97 95       	ror	r25
    4654:	87 95       	ror	r24
    4656:	77 95       	ror	r23
    4658:	67 95       	ror	r22
    465a:	ba 95       	dec	r27
    465c:	c9 f7       	brne	.-14     	; 0x4650 <__ultoa_invert+0x86>
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	61 05       	cpc	r22, r1
    4662:	71 05       	cpc	r23, r1
    4664:	08 95       	ret
    4666:	9b 01       	movw	r18, r22
    4668:	ac 01       	movw	r20, r24
    466a:	0a 2e       	mov	r0, r26
    466c:	06 94       	lsr	r0
    466e:	57 95       	ror	r21
    4670:	47 95       	ror	r20
    4672:	37 95       	ror	r19
    4674:	27 95       	ror	r18
    4676:	ba 95       	dec	r27
    4678:	c9 f7       	brne	.-14     	; 0x466c <__ultoa_invert+0xa2>
    467a:	62 0f       	add	r22, r18
    467c:	73 1f       	adc	r23, r19
    467e:	84 1f       	adc	r24, r20
    4680:	95 1f       	adc	r25, r21
    4682:	a0 1d       	adc	r26, r0
    4684:	08 95       	ret

00004686 <_exit>:
    4686:	f8 94       	cli

00004688 <__stop_program>:
    4688:	ff cf       	rjmp	.-2      	; 0x4688 <__stop_program>
